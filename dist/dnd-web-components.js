!function(V,l){"object"==typeof exports&&"object"==typeof module?module.exports=l():"function"==typeof define&&define.amd?define("dnd-web-components",[],l):"object"==typeof exports?exports["dnd-web-components"]=l():V["dnd-web-components"]=l()}(window,(function(){return function(V){var l={};function U(Q){if(l[Q])return l[Q].exports;var F=l[Q]={i:Q,l:!1,exports:{}};return V[Q].call(F.exports,F,F.exports,U),F.l=!0,F.exports}return U.m=V,U.c=l,U.d=function(V,l,Q){U.o(V,l)||Object.defineProperty(V,l,{enumerable:!0,get:Q})},U.r=function(V){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(V,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(V,"__esModule",{value:!0})},U.t=function(V,l){if(1&l&&(V=U(V)),8&l)return V;if(4&l&&"object"==typeof V&&V&&V.__esModule)return V;var Q=Object.create(null);if(U.r(Q),Object.defineProperty(Q,"default",{enumerable:!0,value:V}),2&l&&"string"!=typeof V)for(var F in V)U.d(Q,F,function(l){return V[l]}.bind(null,F));return Q},U.n=function(V){var l=V&&V.__esModule?function(){return V.default}:function(){return V};return U.d(l,"a",l),l},U.o=function(V,l){return Object.prototype.hasOwnProperty.call(V,l)},U.p="",U(U.s=1)}([function(module,exports,__webpack_require__){eval('!function(Q,n){ true?module.exports=n():undefined}(window,(function(){return function(Q){var n=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(Q,e){!function(Q,n){if(!V[Q]||!r[Q])return;for(var e in r[Q]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(o[e]=n[e]);0==--G&&0===u&&X()}(Q,e),n&&n(Q,e)};var e,t=!0,B="0511d4da5631b97f2e9d",F={},i=[],U=[];function s(Q){var n=E[Q];if(!n)return N;var t=function(t){return n.hot.active?(E[t]?-1===E[t].parents.indexOf(Q)&&E[t].parents.push(Q):(i=[Q],e=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+Q),i=[]),N(t)},B=function(Q){return{configurable:!0,enumerable:!0,get:function(){return N[Q]},set:function(n){N[Q]=n}}};for(var F in N)Object.prototype.hasOwnProperty.call(N,F)&&"e"!==F&&"t"!==F&&Object.defineProperty(t,F,B(F));return t.e=function(Q){return"ready"===l&&d("prepare"),u++,N.e(Q).then(n,(function(Q){throw n(),Q}));function n(){u--,"prepare"===l&&(x[Q]||Z(Q),0===u&&0===G&&X())}},t.t=function(Q,n){return 1&n&&(Q=t(Q)),N.t(Q,-2&n)},t}function I(n){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==n,active:!0,accept:function(Q,n){if(void 0===Q)t._selfAccepted=!0;else if("function"==typeof Q)t._selfAccepted=Q;else if("object"==typeof Q)for(var e=0;e<Q.length;e++)t._acceptedDependencies[Q[e]]=n||function(){};else t._acceptedDependencies[Q]=n||function(){}},decline:function(Q){if(void 0===Q)t._selfDeclined=!0;else if("object"==typeof Q)for(var n=0;n<Q.length;n++)t._declinedDependencies[Q[n]]=!0;else t._declinedDependencies[Q]=!0},dispose:function(Q){t._disposeHandlers.push(Q)},addDisposeHandler:function(Q){t._disposeHandlers.push(Q)},removeDisposeHandler:function(Q){var n=t._disposeHandlers.indexOf(Q);n>=0&&t._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(o={})[n]=Q[n],d("ready");break;case"ready":L(n);break;case"prepare":case"check":case"dispose":case"apply":(b=b||[]).push(n)}},check:a,apply:p,status:function(Q){if(!Q)return l;c.push(Q)},addStatusHandler:function(Q){c.push(Q)},removeStatusHandler:function(Q){var n=c.indexOf(Q);n>=0&&c.splice(n,1)},data:F[n]};return e=void 0,t}var c=[],l="idle";function d(Q){l=Q;for(var n=0;n<c.length;n++)c[n].call(null,Q)}var g,o,C,b,G=0,u=0,x={},r={},V={};function y(Q){return+Q+""===Q?+Q:Q}function a(Q){if("idle"!==l)throw new Error("check() is only allowed in idle status");return t=Q,d("check"),(n=1e4,n=n||1e4,new Promise((function(Q,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var t=new XMLHttpRequest,B=N.p+"hot/hot-update.json";t.open("GET",B,!0),t.timeout=n,t.send(null)}catch(Q){return e(Q)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)e(new Error("Manifest request to "+B+" timed out."));else if(404===t.status)Q();else if(200!==t.status&&304!==t.status)e(new Error("Manifest request to "+B+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(Q){return void e(Q)}Q(n)}}}))).then((function(Q){if(!Q)return d(R()?"ready":"idle"),null;r={},x={},V=Q.c,C=Q.h,d("prepare");var n=new Promise((function(Q,n){g={resolve:Q,reject:n}}));o={};return Z(0),"prepare"===l&&0===u&&0===G&&X(),n}));var n}function Z(Q){var n;V[Q]?(r[Q]=!0,G++,(n=document.createElement("script")).charset="utf-8",n.src=N.p+"hot/hot-update.js",document.head.appendChild(n)):x[Q]=!0}function X(){d("ready");var Q=g;if(g=null,Q)if(t)Promise.resolve().then((function(){return p(t)})).then((function(n){Q.resolve(n)}),(function(n){Q.reject(n)}));else{var n=[];for(var e in o)Object.prototype.hasOwnProperty.call(o,e)&&n.push(y(e));Q.resolve(n)}}function p(n){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function n(t){var U,s,I,c,l;function g(Q){for(var n=[Q],e={},t=n.map((function(Q){return{chain:[Q],id:Q}}));t.length>0;){var B=t.pop(),F=B.id,i=B.chain;if((c=E[F])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:F};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:F};for(var U=0;U<c.parents.length;U++){var s=c.parents[U],I=E[s];if(I){if(I.hot._declinedDependencies[F])return{type:"declined",chain:i.concat([s]),moduleId:F,parentId:s};-1===n.indexOf(s)&&(I.hot._acceptedDependencies[F]?(e[s]||(e[s]=[]),G(e[s],[F])):(delete e[s],n.push(s),t.push({chain:i.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:Q,outdatedModules:n,outdatedDependencies:e}}function G(Q,n){for(var e=0;e<n.length;e++){var t=n[e];-1===Q.indexOf(t)&&Q.push(t)}}R();var u={},x=[],r={},a=function(){console.warn("[HMR] unexpected require("+X.moduleId+") to disposed module")};for(var Z in o)if(Object.prototype.hasOwnProperty.call(o,Z)){var X;l=y(Z),X=o[Z]?g(l):{type:"disposed",moduleId:Z};var p=!1,L=!1,m=!1,W="";switch(X.chain&&(W="\\nUpdate propagation: "+X.chain.join(" -> ")),X.type){case"self-declined":t.onDeclined&&t.onDeclined(X),t.ignoreDeclined||(p=new Error("Aborted because of self decline: "+X.moduleId+W));break;case"declined":t.onDeclined&&t.onDeclined(X),t.ignoreDeclined||(p=new Error("Aborted because of declined dependency: "+X.moduleId+" in "+X.parentId+W));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(X),t.ignoreUnaccepted||(p=new Error("Aborted because "+l+" is not accepted"+W));break;case"accepted":t.onAccepted&&t.onAccepted(X),L=!0;break;case"disposed":t.onDisposed&&t.onDisposed(X),m=!0;break;default:throw new Error("Unexception type "+X.type)}if(p)return d("abort"),Promise.reject(p);if(L)for(l in r[l]=o[l],G(x,X.outdatedModules),X.outdatedDependencies)Object.prototype.hasOwnProperty.call(X.outdatedDependencies,l)&&(u[l]||(u[l]=[]),G(u[l],X.outdatedDependencies[l]));m&&(G(x,[X.moduleId]),r[l]=a)}var A,h=[];for(s=0;s<x.length;s++)l=x[s],E[l]&&E[l].hot._selfAccepted&&r[l]!==a&&!E[l].hot._selfInvalidated&&h.push({module:l,parents:E[l].parents.slice(),errorHandler:E[l].hot._selfAccepted});d("dispose"),Object.keys(V).forEach((function(Q){!1===V[Q]&&function(Q){delete installedChunks[Q]}(Q)}));var D,S,H=x.slice();for(;H.length>0;)if(l=H.pop(),c=E[l]){var v={},f=c.hot._disposeHandlers;for(I=0;I<f.length;I++)(U=f[I])(v);for(F[l]=v,c.hot.active=!1,delete E[l],delete u[l],I=0;I<c.children.length;I++){var T=E[c.children[I]];T&&((A=T.parents.indexOf(l))>=0&&T.parents.splice(A,1))}}for(l in u)if(Object.prototype.hasOwnProperty.call(u,l)&&(c=E[l]))for(S=u[l],I=0;I<S.length;I++)D=S[I],(A=c.children.indexOf(D))>=0&&c.children.splice(A,1);d("apply"),void 0!==C&&(B=C,C=void 0);for(l in o=void 0,r)Object.prototype.hasOwnProperty.call(r,l)&&(Q[l]=r[l]);var Y=null;for(l in u)if(Object.prototype.hasOwnProperty.call(u,l)&&(c=E[l])){S=u[l];var J=[];for(s=0;s<S.length;s++)if(D=S[s],U=c.hot._acceptedDependencies[D]){if(-1!==J.indexOf(U))continue;J.push(U)}for(s=0;s<J.length;s++){U=J[s];try{U(S)}catch(Q){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:S[s],error:Q}),t.ignoreErrored||Y||(Y=Q)}}}for(s=0;s<h.length;s++){var w=h[s];l=w.module,i=w.parents,e=l;try{N(l)}catch(Q){if("function"==typeof w.errorHandler)try{w.errorHandler(Q)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:Q}),t.ignoreErrored||Y||(Y=n),Y||(Y=Q)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:Q}),t.ignoreErrored||Y||(Y=Q)}}if(Y)return d("fail"),Promise.reject(Y);if(b)return n(t).then((function(Q){return x.forEach((function(n){Q.indexOf(n)<0&&Q.push(n)})),Q}));return d("idle"),new Promise((function(Q){Q(x)}))}(n=n||{})}function R(){if(b)return o||(o={}),b.forEach(L),b=void 0,!0}function L(n){Object.prototype.hasOwnProperty.call(o,n)||(o[n]=Q[n])}var E={};function N(n){if(E[n])return E[n].exports;var e=E[n]={i:n,l:!1,exports:{},hot:I(n),parents:(U=i,i=[],U),children:[]};return Q[n].call(e.exports,e,e.exports,s(n)),e.l=!0,e.exports}return N.m=Q,N.c=E,N.d=function(Q,n,e){N.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:e})},N.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},N.t=function(Q,n){if(1&n&&(Q=N(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var e=Object.create(null);if(N.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var t in Q)N.d(e,t,function(n){return Q[n]}.bind(null,t));return e},N.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return N.d(n,"a",n),n},N.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},N.p="/static/",N.h=function(){return B},s(0)(N.s=0)}([function(Q,n,e){Q.exports=e(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval(\'// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\\n__webpack_require__.d(__webpack_exports__, "Component", function() { return /* reexport */ Component; });\\n__webpack_require__.d(__webpack_exports__, "LifecycleComponent", function() { return /* reexport */ LifeCycleComponent; });\\n\\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nclass ComponentCollection {\\n  constructor() {\\n    _defineProperty(this, "components", new Map());\\n\\n    _defineProperty(this, "add", component => {\\n      this.components.set(component.type, component);\\n    });\\n\\n    _defineProperty(this, "update", (cType, func) => {\\n      if (this.components.has(cType)) {\\n        const c = this.components.get(cType);\\n\\n        if (c) {\\n          const updatedComponent = func(c);\\n          this.components.set(cType, updatedComponent);\\n        }\\n      }\\n    });\\n\\n    _defineProperty(this, "remove", cType => {\\n      if (this.components.has(cType)) {\\n        const component = this.components.get(cType);\\n\\n        if (component) {\\n          component.onRemove();\\n        }\\n      }\\n\\n      this.components.delete(cType);\\n    });\\n\\n    _defineProperty(this, "get", cType => {\\n      if (!this.components.has(cType)) {\\n        throw new Error(`ComponentCollection does not have component of type ${cType}`);\\n      }\\n\\n      return this.components.get(cType);\\n    });\\n\\n    _defineProperty(this, "has", cType => {\\n      if (Array.isArray(cType)) {\\n        return cType.every(ct => this.components.has(ct) === true);\\n      } else {\\n        return this.components.has(cType);\\n      }\\n    });\\n  }\\n\\n  get componentTypes() {\\n    return [...this.components.keys()];\\n  }\\n\\n  get size() {\\n    return this.components.size;\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./src/World.ts\\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\nclass World_World {\\n  constructor() {\\n    World_defineProperty(this, "componentCollections", new Map());\\n\\n    World_defineProperty(this, "entities", new Map());\\n\\n    World_defineProperty(this, "entitiesByCTypes", new Map());\\n\\n    World_defineProperty(this, "entitiesByTags", new Map());\\n\\n    World_defineProperty(this, "find", predicate => {\\n      for (const entity of this.entities.values()) {\\n        if (predicate(entity)) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "findAll", predicate => {\\n      const results = [];\\n\\n      for (const entity of this.entities.values()) {\\n        if (predicate(entity)) {\\n          results.push(entity);\\n        }\\n      }\\n\\n      return results;\\n    });\\n\\n    World_defineProperty(this, "locate", cTypes => {\\n      for (const entity of this.entities.values()) {\\n        if (entity.components.has(cTypes)) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "locateAll", cTypes => {\\n      const results = [];\\n\\n      for (const entity of this.entities.values()) {\\n        if (entity.components.has(cTypes)) {\\n          results.push(entity);\\n        }\\n      }\\n\\n      return results;\\n    });\\n\\n    World_defineProperty(this, "grab", cType => {\\n      const entity = this.locate(cType);\\n\\n      if (entity) {\\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\\n        const component = cc.get(cType);\\n        return {\\n          entity,\\n          component\\n        };\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "grabBy", (cType, predicate) => {\\n      const entities = this.locateAll(cType);\\n\\n      for (const entity of entities) {\\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\\n        const component = cc.get(cType);\\n\\n        if (predicate(component)) {\\n          return {\\n            component,\\n            entity\\n          };\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "grabAll", cType => {\\n      return this.locateAll(cType).map(entity => ({\\n        entity,\\n        component: entity.components.get(cType)\\n      }));\\n    });\\n\\n    World_defineProperty(this, "get", (eid, cType) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\\n      return cc.get(cType);\\n    });\\n\\n    World_defineProperty(this, "getTagged", tag => {\\n      const tagEntityIds = this.entitiesByTags.get(tag);\\n\\n      if (tagEntityIds) {\\n        const entityId = tagEntityIds.values().next().value;\\n        const entity = this.entities.get(entityId);\\n\\n        if (entity) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "getAllTagged", tag => {\\n      let entities = []; // eslint-disable-line\\n\\n      const tagEntityIds = this.entitiesByTags.get(tag);\\n\\n      if (tagEntityIds) {\\n        for (const entityId of tagEntityIds) {\\n          const entity = this.entities.get(entityId);\\n\\n          if (entity) {\\n            entities.push(entity);\\n          }\\n        }\\n      }\\n\\n      return entities;\\n    });\\n\\n    World_defineProperty(this, "set", (eid, component) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\\n      cc.add(component);\\n      this.componentCollections.set(eid, cc);\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.has)) {\\n          entitySet.add(eid);\\n        }\\n      }\\n\\n      return this;\\n    });\\n\\n    World_defineProperty(this, "remove", (eid, cType) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection(); // remove entity from current entitiesByCTypes\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.has)) {\\n          entitySet.delete(eid);\\n        }\\n      }\\n\\n      cc.remove(cType); // Move entityId to new CTypes if needed.\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.has)) {\\n          entitySet.add(eid);\\n        }\\n      }\\n    });\\n  }\\n\\n  /**\\n   * Internal method used in setting up a new system.\\n   */\\n  registerSystem(cTypes) {\\n    this.entitiesByCTypes.set(cTypes, new Set());\\n    return this;\\n  }\\n\\n  registerEntity(entity) {\\n    const cc = new ComponentCollection();\\n    this.componentCollections.set(entity.id, cc);\\n    this.entities.set(entity.id, entity);\\n    return this;\\n  }\\n  /**\\n   * Remove all components that belong to an entity.\\n   */\\n\\n\\n  clearEntityComponents(eid) {\\n    this.componentCollections.set(eid, new ComponentCollection());\\n\\n    for (const entitySet of this.entitiesByCTypes.values()) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n    }\\n\\n    return this;\\n  }\\n  /**\\n   * Destroys an entity.\\n   * Same as entity.destroy().\\n   */\\n\\n\\n  destroyEntity(eid) {\\n    this.componentCollections.delete(eid);\\n    this.entities.delete(eid);\\n\\n    for (const entitySet of this.entitiesByCTypes.values()) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n    } // remove any tag associations with destroyed entities.\\n\\n\\n    for (const [tag, entitySet] of this.entitiesByTags) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n\\n      if (entitySet.size === 0) {\\n        this.entitiesByTags.delete(tag);\\n      }\\n    }\\n\\n    return this;\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\\n// require the crypto API and do not support built-in fallback to lower quality random number\\n// generators (like Math.random()).\\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\\n// find the complete implementation of crypto (msCrypto) on IE11.\\nvar getRandomValues = typeof crypto !== \\\'undefined\\\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \\\'undefined\\\' && typeof msCrypto.getRandomValues === \\\'function\\\' && msCrypto.getRandomValues.bind(msCrypto);\\nvar rnds8 = new Uint8Array(16);\\nfunction rng() {\\n  if (!getRandomValues) {\\n    throw new Error(\\\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\\\');\\n  }\\n\\n  return getRandomValues(rnds8);\\n}\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/bytesToUuid.js\\n/**\\n * Convert array of 16 byte values to UUID string format of the form:\\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\n */\\nvar byteToHex = [];\\n\\nfor (var bytesToUuid_i = 0; bytesToUuid_i < 256; ++bytesToUuid_i) {\\n  byteToHex.push((bytesToUuid_i + 0x100).toString(16).substr(1));\\n}\\n\\nfunction bytesToUuid(buf, offset_) {\\n  var offset = offset_ || 0; // Note: Be careful editing this code!  It\\\'s been tuned for performance\\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\\n\\n  return (byteToHex[buf[offset + 0]] + byteToHex[buf[offset + 1]] + byteToHex[buf[offset + 2]] + byteToHex[buf[offset + 3]] + \\\'-\\\' + byteToHex[buf[offset + 4]] + byteToHex[buf[offset + 5]] + \\\'-\\\' + byteToHex[buf[offset + 6]] + byteToHex[buf[offset + 7]] + \\\'-\\\' + byteToHex[buf[offset + 8]] + byteToHex[buf[offset + 9]] + \\\'-\\\' + byteToHex[buf[offset + 10]] + byteToHex[buf[offset + 11]] + byteToHex[buf[offset + 12]] + byteToHex[buf[offset + 13]] + byteToHex[buf[offset + 14]] + byteToHex[buf[offset + 15]]).toLowerCase();\\n}\\n\\n/* harmony default export */ var esm_browser_bytesToUuid = (bytesToUuid);\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\\n\\n\\n\\nfunction v4(options, buf, offset) {\\n  options = options || {};\\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\\n\\n  rnds[6] = rnds[6] & 0x0f | 0x40;\\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\\n\\n  if (buf) {\\n    offset = offset || 0;\\n\\n    for (var i = 0; i < 16; ++i) {\\n      buf[offset + i] = rnds[i];\\n    }\\n\\n    return buf;\\n  }\\n\\n  return esm_browser_bytesToUuid(rnds);\\n}\\n\\n/* harmony default export */ var esm_browser_v4 = (v4);\\n// CONCATENATED MODULE: ./src/Entity.ts\\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nclass Entity_Entity {\\n  constructor(world) {\\n    Entity_defineProperty(this, "_id", void 0);\\n\\n    Entity_defineProperty(this, "_world", void 0);\\n\\n    this._id = esm_browser_v4();\\n    this._world = world;\\n    /*\\n    Registering with the World.\\n    */\\n\\n    this._world.registerEntity(this);\\n  }\\n  /**\\n   * Add a component to an Entity, doh.\\n   */\\n\\n\\n  add(component) {\\n    this._world.set(this._id, component);\\n\\n    return this;\\n  }\\n  /**\\n   * Add a tag to a component\\n   */\\n\\n\\n  addTag(tag) {\\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\\n\\n    if (entitySet) {\\n      entitySet.add(this._id);\\n\\n      this._world.entitiesByTags.set(tag, entitySet);\\n    }\\n\\n    return this;\\n  }\\n  /**\\n   * Determines if an entity has a component related to it.\\n   */\\n\\n\\n  has(cType) {\\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\\n    return cc.has(cType);\\n  }\\n  /**\\n   * Check to see if an entity tagged with a given tag.\\n   */\\n\\n\\n  hasTag(tag) {\\n    if (this._world.entitiesByTags.has(tag)) {\\n      const entitySet = this._world.entitiesByTags.get(tag);\\n\\n      if (entitySet) {\\n        return entitySet.has(this._id);\\n      }\\n    }\\n\\n    return false;\\n  }\\n  /**\\n   * Get a component that belongs to an entity.\\n   */\\n\\n\\n  get(cType) {\\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\\n    const component = cc.get(cType);\\n    return component;\\n  }\\n  /**\\n   * Get all components that have been added to an entity, via a ComponentCollection\\n   */\\n\\n\\n  getAll() {\\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\\n  }\\n\\n  remove(cType) {\\n    this._world.remove(this._id, cType);\\n\\n    return this;\\n  }\\n  /**\\n   * Remove a tag from an entity\\n   */\\n\\n\\n  removeTag(tag) {\\n    if (this._world.entitiesByTags.has(tag)) {\\n      const entitySet = this._world.entitiesByTags.get(tag);\\n\\n      if (entitySet) {\\n        entitySet.delete(this._id);\\n\\n        if (entitySet.size === 0) {\\n          this._world.entitiesByTags.delete(tag);\\n        }\\n      }\\n    }\\n\\n    return this;\\n  }\\n  /** Clears all components from an Entity */\\n\\n\\n  clear() {\\n    this._world.clearEntityComponents(this._id);\\n\\n    return this;\\n  }\\n  /**\\n   * Remove all tags on an entity\\n   */\\n\\n\\n  clearTags() {\\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\\n      entitySet.delete(this._id);\\n\\n      if (entitySet.size === 0) {\\n        this._world.entitiesByTags.delete(tag);\\n      }\\n    }\\n\\n    return this;\\n  }\\n\\n  destroy() {\\n    this._world.destroyEntity(this._id);\\n  }\\n\\n  get id() {\\n    return this._id;\\n  }\\n\\n  get world() {\\n    return this._world;\\n  }\\n  /**\\n   * Get all components that have been added to an entity, via a ComponentCollection.\\n   * Does the same thing as entityInstance.getAll().\\n   */\\n\\n\\n  get components() {\\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\\n  }\\n  /**\\n   * Retrieves all the tags that have been added to this entity.\\n   */\\n\\n\\n  get tags() {\\n    const tags = new Set();\\n\\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\\n      if (entitySet.has(this._id)) {\\n        tags.add(tag);\\n      }\\n    }\\n\\n    return tags;\\n  }\\n\\n}\\nfunction createEntity(world) {\\n  const entity = new Entity_Entity(world);\\n  return entity;\\n}\\n// CONCATENATED MODULE: ./src/System.ts\\n\\n\\n\\n/**\\n * This is how you create a System.\\n * @example\\n * ```\\n * createSystem(world, [\\\'ComponentType\\\'], ({ entity }) => \\\'Do fun system things here.\\\')\\n * ```\\n */\\nfunction createSystem(world, cTypes, systemFunc) {\\n  world.registerSystem(cTypes);\\n  return () => {\\n    let index = 0;\\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\\n    // of where the ComponentCollection is, with the array of ComponentTypes\\n    // that are passes.\\n    // Might be nice in the future to go back to a ref check on cTypes, but\\n    // for now this doesn\\\'t seem to be that much of a perf hit.\\n    // for (const ct of world.entitiesByCTypes.keys()) {\\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\\n    //       const args: SystemFuncArgs<CT> = {\\n    //         entity: world.entities.get(eid),\\n    //         components: world.componentCollections.get(eid),\\n    //         world,\\n    //         index,\\n    //         size,\\n    //         isFirst: index === 0,\\n    //         isLast: index + 1 === size,\\n    //       }\\n    //       systemFunc(args);\\n    //       index += 1;\\n    //     }\\n    //   }\\n    // }\\n\\n    const cTypeArrs = world.entitiesByCTypes.get(cTypes) || new Set();\\n\\n    for (const eid of cTypeArrs) {\\n      const args = {\\n        entity: world.entities.get(eid) || new Entity_Entity(world),\\n        components: world.componentCollections.get(eid) || new ComponentCollection(),\\n        world,\\n        index,\\n        size,\\n        isFirst: index === 0,\\n        isLast: index + 1 === size\\n      };\\n      systemFunc(args);\\n      index += 1;\\n    }\\n  };\\n}\\n// CONCATENATED MODULE: ./src/Component.ts\\nfunction Component_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nclass Component {\\n  constructor(storage) {\\n    Component_defineProperty(this, "type", void 0);\\n\\n    Component_defineProperty(this, "storage", void 0);\\n\\n    this.type = "AbstractComponent";\\n    this.storage = storage;\\n\\n    for (const [key, val] of Object.entries(storage)) {\\n      Object.defineProperty(this, key, {\\n        get: () => {\\n          return this.storage[key];\\n        },\\n        set: nextVal => {\\n          this.storage[key] = nextVal;\\n        }\\n      });\\n    } // Add getters/setters?\\n\\n  } // getProperty():\\n  // TODO: Will add onRemove later as not to screw up components that\\n  //       "implement" Component instead of "extend"ing it.\\n\\n\\n  onRemove() {// empty\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./src/LifecycleComponent.ts\\nfunction LifecycleComponent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nclass LifeCycleComponent {\\n  constructor(storage) {\\n    LifecycleComponent_defineProperty(this, "type", void 0);\\n\\n    LifecycleComponent_defineProperty(this, "storage", void 0);\\n\\n    LifecycleComponent_defineProperty(this, "handleStoragePropAccess", (_target, prop, _receiver) => {\\n      this.storageWillBeAccessed(prop);\\n      const val = this.onStorageAccess(prop);\\n      this.storageWasAccessed(prop);\\n      return val;\\n    });\\n\\n    LifecycleComponent_defineProperty(this, "handleStoragePropChange", (target, prop, value, _receiver) => {\\n      if (this.storageShouldUpdate(prop, value)) {\\n        this.storageWillUpdate(prop, value);\\n        const prevValue = target[prop];\\n        target[prop] = value;\\n        this.storageDidUpdate(prop, prevValue);\\n      }\\n\\n      return true;\\n    });\\n\\n    this.type = "AbstractComponent"; // Should the proxy be a "revocable" type?\\n\\n    this.storage = new Proxy(storage, {\\n      get: this.handleStoragePropAccess,\\n      set: this.handleStoragePropChange\\n    });\\n  }\\n\\n  // Lifecycle methods\\n  storageShouldUpdate(_prop, _value) {\\n    return true;\\n  }\\n\\n  storageWillBeAccessed(_prop) {// left empty.\\n  }\\n\\n  onStorageAccess(prop) {\\n    return this.storage[prop];\\n  }\\n\\n  storageWasAccessed(_prop) {// left empty.\\n  }\\n\\n  storageWillUpdate(_prop, _nextValue) {// left empty.\\n  }\\n\\n  storageDidUpdate(_prop, _prevValue) {// left empty.\\n  }\\n\\n  onRemove() {// do stuff when removed....\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./src/index.ts\\n\\n\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n\')}])}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi4vZWNzdGF0aWMvZGlzdC9idW5kbGUuanM/NzE0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLEtBQWlELG9CQUFvQixTQUEwSCxDQUFDLG9CQUFvQixtQkFBbUIsc0NBQXNDLDhDQUE4QyxlQUFlLHVCQUF1Qiw4RUFBOEUsbUJBQW1CLGlCQUFpQix3Q0FBd0MsV0FBVyxjQUFjLFdBQVcsZUFBZSxrQkFBa0IsNk5BQTZOLGVBQWUsT0FBTyw2Q0FBNkMsWUFBWSxpQkFBaUIsVUFBVSw0R0FBNEcsdUJBQXVCLCtEQUErRCxZQUFZLEdBQUcsYUFBYSxtREFBbUQsbUJBQW1CLGlDQUFpQyxHQUFHLGNBQWMsT0FBTyx3QkFBd0IseUJBQXlCLHNIQUFzSCxpQ0FBaUMsK0NBQStDLHVDQUF1QyxXQUFXLGtEQUFrRCxnREFBZ0QscUJBQXFCLGlDQUFpQyx1Q0FBdUMsV0FBVyxxQ0FBcUMsbUNBQW1DLHFCQUFxQiwyQkFBMkIsK0JBQStCLDJCQUEyQixrQ0FBa0Msb0NBQW9DLHFDQUFxQyx1QkFBdUIsbUNBQW1DLGdCQUFnQixxQkFBcUIsTUFBTSxpQkFBaUIsTUFBTSx1RUFBdUUsb0NBQW9DLGVBQWUsVUFBVSw4QkFBOEIsVUFBVSxpQ0FBaUMsbUJBQW1CLG9CQUFvQixZQUFZLGtCQUFrQixrQkFBa0IsY0FBYyxJQUFJLFlBQVksV0FBVyxzQkFBc0Isd0JBQXdCLEtBQUssTUFBTSxjQUFjLHFCQUFxQixjQUFjLHdFQUF3RSxpRUFBaUUsZ0ZBQWdGLElBQUkscURBQXFELDRDQUE0QyxTQUFTLFlBQVksZ0NBQWdDLHlGQUF5RiwyQkFBMkIseUZBQXlGLEtBQUssSUFBSSxpQ0FBaUMsU0FBUyxpQkFBaUIsT0FBTyxzQkFBc0Isd0NBQXdDLElBQUksS0FBSywwQkFBMEIsaUNBQWlDLEdBQUcsb0JBQW9CLEdBQUcsS0FBSywrQ0FBK0MsR0FBRyxNQUFNLGNBQWMsTUFBTSwySUFBMkksYUFBYSxXQUFXLFFBQVEsb0RBQW9ELFlBQVkscUJBQXFCLGFBQWEsZUFBZSxZQUFZLEdBQUcsS0FBSyxTQUFTLHVFQUF1RSxjQUFjLGNBQWMsMEVBQTBFLHFCQUFxQixjQUFjLGNBQWMsa0JBQWtCLHNCQUFzQixPQUFPLGdCQUFnQixHQUFHLFdBQVcsRUFBRSwrQkFBK0IsNkRBQTZELDhCQUE4Qix5Q0FBeUMsc0JBQXNCLHNDQUFzQyxZQUFZLG1CQUFtQixLQUFLLDBCQUEwQixNQUFNLHlDQUF5QywyREFBMkQsZ0hBQWdILHlCQUF5QixPQUFPLE9BQU8scUVBQXFFLGdCQUFnQixZQUFZLFdBQVcsS0FBSyxXQUFXLDhCQUE4QixJQUFJLFFBQVEsVUFBVSxjQUFjLDZFQUE2RSw2REFBNkQsTUFBTSxvQkFBb0IsNEJBQTRCLHdCQUF3QiwwRUFBMEUsb0lBQW9JLE1BQU0sd0pBQXdKLE1BQU0sZ0lBQWdJLE1BQU0sa0RBQWtELE1BQU0sa0RBQWtELE1BQU0sb0RBQW9ELHlDQUF5QywwTEFBMEwsOEJBQThCLFdBQVcsUUFBUSxXQUFXLHVGQUF1RiwwRUFBMEUsRUFBRSxpREFBaUQsdUJBQXVCLDBCQUEwQixJQUFJLEdBQUcsb0JBQW9CLEtBQUssV0FBVyxzQkFBc0IsUUFBUSwwQkFBMEIsUUFBUSxXQUFXLGdCQUFnQix1REFBdUQsb0JBQW9CLEtBQUssdUJBQXVCLHlEQUF5RCxpRkFBaUYsV0FBVyxnRUFBZ0Usc0NBQXNDLDJFQUEyRSxXQUFXLG1FQUFtRSxPQUFPLFNBQVMsUUFBUSxXQUFXLGdEQUFnRCw4QkFBOEIsVUFBVSxRQUFRLFdBQVcsS0FBSyxPQUFPLElBQUksS0FBSyxTQUFTLDBCQUEwQiwyREFBMkQsOEJBQThCLFFBQVEsV0FBVyxLQUFLLFdBQVcsMkJBQTJCLElBQUksS0FBSyxTQUFTLHlDQUF5QyxrQkFBa0IsU0FBUywwQkFBMEIsNEVBQTRFLHFDQUFxQywrQkFBK0IsOENBQThDLDZCQUE2Qix3Q0FBd0MsbUNBQW1DLDhCQUE4QiwwQkFBMEIsS0FBSyxHQUFHLDBDQUEwQyxLQUFLLEdBQUcsUUFBUSxFQUFFLGFBQWEsb0JBQW9CLDJCQUEyQixjQUFjLHVEQUF1RCxTQUFTLGNBQWMsNEJBQTRCLFlBQVksbUJBQW1CLDRDQUE0Qyw4REFBOEQsdUNBQXVDLHFDQUFxQyxvQkFBb0IsRUFBRSxpQkFBaUIsNEZBQTRGLGVBQWUsd0NBQXdDLFNBQVMsRUFBRSxtQkFBbUIsOEJBQThCLHFEQUFxRCwwQkFBMEIsNkNBQTZDLHNCQUFzQiw2REFBNkQsWUFBWSxlQUFlLFNBQVMsaUJBQWlCLGlDQUFpQyxpQkFBaUIsWUFBWSxVQUFVLHNCQUFzQixtQkFBbUIsaURBQWlELCtCQUErQixTQUFTLGFBQWEsa0JBQWtCLGVBQWUsMERBQTBELGFBQWEscUVBQXFFLGdGQUFnRixtQ0FBbUMsRUFBRSxFQUFFLHlFQUF5RSxvQ0FBb0MsRUFBRSxFQUFFLHlFQUF5RSxvQ0FBb0MsRUFBRSxFQUFFLHNFQUFzRSxpQ0FBaUMsRUFBRSxFQUFFLCtFQUErRSwwQ0FBMEMsRUFBRSxFQUFFLHFHQUFxRyxrQkFBa0Isa0NBQWtDLHFFQUFxRSxFQUFFLEVBQUUsT0FBTyxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsK0JBQStCLG1CQUFtQixxREFBcUQsbURBQW1ELHVEQUF1RCxPQUFPLEVBQUUsMERBQTBELHlDQUF5QywrQ0FBK0Msb0JBQW9CLDZDQUE2Qyx5REFBeUQsV0FBVyxTQUFTLE9BQU8sRUFBRSxrREFBa0QseUNBQXlDLHVEQUF1RCw0QkFBNEIsaUNBQWlDLFdBQVcsU0FBUyx3Q0FBd0MsT0FBTyxFQUFFLCtDQUErQywwQ0FBMEMsaUZBQWlGLE1BQU0sR0FBRyxTQUFTLDRDQUE0QyxPQUFPLEVBQUUsK0NBQStDLG1DQUFtQyxxRUFBcUUsU0FBUyxPQUFPLDRDQUE0QyxTQUFTLE9BQU8sRUFBRSxLQUFLLDRCQUE0Qix5Q0FBeUMsS0FBSyxrQkFBa0Isa0NBQWtDLEtBQUssS0FBSywwRkFBMEYsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWSxFQUFFLHlCQUF5QixtQkFBbUIsb0VBQW9FLDBEQUEwRCxrRUFBa0UsZ0VBQWdFLHlEQUF5RCxzREFBc0Qsa0NBQWtDLDBCQUEwQixXQUFXLFNBQVMsc0JBQXNCLE9BQU8sRUFBRSw0REFBNEQsMkJBQTJCLHdEQUF3RCxrQ0FBa0MsaUNBQWlDLFdBQVcsU0FBUyx5QkFBeUIsT0FBTyxFQUFFLHdEQUF3RCxzREFBc0QsOENBQThDLDBCQUEwQixXQUFXLFNBQVMsc0JBQXNCLE9BQU8sRUFBRSwyREFBMkQsMkJBQTJCLHdEQUF3RCw4Q0FBOEMsaUNBQWlDLFdBQVcsU0FBUyx5QkFBeUIsT0FBTyxFQUFFLHFEQUFxRCwwQ0FBMEMsdUJBQXVCLDJGQUEyRiwwQ0FBMEMsa0JBQWtCLG9EQUFvRCxTQUFTLHNCQUFzQixPQUFPLEVBQUUsb0VBQW9FLCtDQUErQywwQ0FBMEMsMkZBQTJGLDBDQUEwQyx1Q0FBdUMsb0JBQW9CLDBEQUEwRCxXQUFXLFNBQVMsc0JBQXNCLE9BQU8sRUFBRSx3REFBd0QscURBQXFELDJFQUEyRSxHQUFHLE9BQU8sRUFBRSwyREFBMkQsbUZBQW1GLDZCQUE2QixPQUFPLEVBQUUsd0RBQXdELDBEQUEwRCw2QkFBNkIsOERBQThELHFEQUFxRCx5QkFBeUIsMEJBQTBCLFdBQVcsU0FBUyxzQkFBc0IsT0FBTyxFQUFFLDJEQUEyRCwwQkFBMEIsbUZBQW1GLDZCQUE2QixnREFBZ0QsdURBQXVELDJCQUEyQixvQ0FBb0MsYUFBYSxXQUFXLFNBQVMsMEJBQTBCLE9BQU8sRUFBRSwrREFBK0QsbUZBQW1GLDBCQUEwQiwrQ0FBK0MsbUVBQW1FLG9DQUFvQywrQkFBK0IsV0FBVyxTQUFTLHNCQUFzQixPQUFPLEVBQUUsOERBQThELG1GQUFtRixrSEFBa0gsb0NBQW9DLGtDQUFrQyxXQUFXLFNBQVMsMkJBQTJCLDZHQUE2RyxvQ0FBb0MsK0JBQStCLFdBQVcsU0FBUyxPQUFPLEVBQUUsS0FBSyxtR0FBbUcsbURBQW1ELGtCQUFrQixLQUFLLDhCQUE4QiwyQ0FBMkMsbURBQW1ELDJDQUEyQyxrQkFBa0IsS0FBSyx3R0FBd0csb0VBQW9FLGlFQUFpRSxpQ0FBaUMsZ0NBQWdDLFNBQVMsT0FBTyxvQkFBb0IsS0FBSyxvR0FBb0csNENBQTRDLGdDQUFnQyxpRUFBaUUsaUNBQWlDLGdDQUFnQyxTQUFTLE9BQU8sdUhBQXVILGlDQUFpQyxnQ0FBZ0MsU0FBUyxxQ0FBcUMsMENBQTBDLFNBQVMsT0FBTyxvQkFBb0IsS0FBSyxLQUFLLDRzQkFBNHNCLGlDQUFpQyxrQkFBa0IsMkJBQTJCLG9JQUFvSSxLQUFLLG9DQUFvQyxHQUFHLDROQUE0TiwrQkFBK0IscUJBQXFCLG1CQUFtQixtRUFBbUUsR0FBRyx3Q0FBd0MsOEJBQThCLGtyQkFBa3JCLEdBQUcsNkVBQTZFLCtHQUErRyw0QkFBNEIsd0RBQXdELHVHQUF1RyxvQ0FBb0MscURBQXFELDJCQUEyQix1QkFBdUIsUUFBUSxPQUFPLGtDQUFrQyxPQUFPLG1CQUFtQixLQUFLLDJDQUEyQyxHQUFHLDJEQUEyRCw0RkFBNEYsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWSxFQUFFLDZCQUE2Qix3QkFBd0IsaURBQWlELHNEQUFzRCxvQ0FBb0MsMEJBQTBCLDBGQUEwRixLQUFLLCtFQUErRSwyQ0FBMkMsb0JBQW9CLEtBQUssa0VBQWtFLDhHQUE4Ryx3QkFBd0IsZ0NBQWdDLHlEQUF5RCxPQUFPLG9CQUFvQixLQUFLLCtGQUErRiw2RkFBNkYsMkJBQTJCLEtBQUssNEZBQTRGLGdEQUFnRCw4REFBOEQsMEJBQTBCLHlDQUF5QyxTQUFTLE9BQU8scUJBQXFCLEtBQUssbUZBQW1GLDZGQUE2RixzQ0FBc0MsdUJBQXVCLEtBQUssc0hBQXNILHlGQUF5RixLQUFLLHFCQUFxQiwwQ0FBMEMsb0JBQW9CLEtBQUssd0VBQXdFLGdEQUFnRCw4REFBOEQsMEJBQTBCLHFDQUFxQyx1Q0FBdUMsbURBQW1ELFdBQVcsU0FBUyxPQUFPLG9CQUFvQixLQUFLLGdFQUFnRSxrREFBa0Qsb0JBQW9CLEtBQUssc0VBQXNFLDRFQUE0RSxtQ0FBbUMscUNBQXFDLGlEQUFpRCxTQUFTLE9BQU8sb0JBQW9CLEtBQUssaUJBQWlCLDBDQUEwQyxLQUFLLGdCQUFnQixzQkFBc0IsS0FBSyxtQkFBbUIseUJBQXlCLEtBQUsscUxBQXFMLHlGQUF5RixLQUFLLG9HQUFvRyw2QkFBNkIsOEVBQThFLHNDQUFzQyx3QkFBd0IsU0FBUyxPQUFPLG9CQUFvQixLQUFLLEtBQUssZ0NBQWdDLDRDQUE0QyxrQkFBa0IsR0FBRyw4SkFBOEosU0FBUyxxR0FBcUcsaUNBQWlDLGtCQUFrQixvQkFBb0IsK0NBQStDLGtYQUFrWCxrRkFBa0Ysb0VBQW9FLGlEQUFpRCx3UkFBd1IsZ0NBQWdDLDBCQUEwQixjQUFjLFlBQVksVUFBVSwwRUFBMEUsc0NBQXNDLHNCQUFzQix5UkFBeVIseUJBQXlCLG1CQUFtQixPQUFPLE1BQU0sR0FBRyxrR0FBa0csa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWSxFQUFFLHFCQUFxQiwwQkFBMEIscURBQXFELDBEQUEwRCx3Q0FBd0MsNkJBQTZCLDJEQUEyRCwwQ0FBMEMsc0JBQXNCLHFDQUFxQyxXQUFXLDRCQUE0Qix3Q0FBd0MsV0FBVyxTQUFTLEVBQUUsT0FBTywrQkFBK0IsMEtBQTBLLGFBQWEsS0FBSyxvSEFBb0gsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWSxFQUFFLDhCQUE4QiwwQkFBMEIsOERBQThELG1FQUFtRSwwR0FBMEcseUNBQXlDLCtDQUErQyxzQ0FBc0MsbUJBQW1CLE9BQU8sRUFBRSxnSEFBZ0gsb0RBQW9ELDhDQUE4Qyx5Q0FBeUMsK0JBQStCLGlEQUFpRCxTQUFTLHNCQUFzQixPQUFPLEVBQUUsd0NBQXdDLHNGQUFzRiwwRkFBMEYsRUFBRSxLQUFLLGtFQUFrRSxrQkFBa0IsS0FBSyxvQ0FBb0MsbUJBQW1CLDZCQUE2QixnQ0FBZ0MsS0FBSyxpQ0FBaUMsbUJBQW1CLDRDQUE0QyxtQkFBbUIsMkNBQTJDLG1CQUFtQixrQkFBa0IsaUNBQWlDLEtBQUssdUhBQXVILGNBQWMseWs5Q0FBeWs5QyxHQUFHIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oUSxuKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1uKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImVjc3RhdGljXCIsW10sbik6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5lY3N0YXRpYz1uKCk6US5lY3N0YXRpYz1uKCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oUSl7dmFyIG49d2luZG93LndlYnBhY2tIb3RVcGRhdGVlY3N0YXRpYzt3aW5kb3cud2VicGFja0hvdFVwZGF0ZWVjc3RhdGljPWZ1bmN0aW9uKFEsZSl7IWZ1bmN0aW9uKFEsbil7aWYoIVZbUV18fCFyW1FdKXJldHVybjtmb3IodmFyIGUgaW4gcltRXT0hMSxuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLGUpJiYob1tlXT1uW2VdKTswPT0tLUcmJjA9PT11JiZYKCl9KFEsZSksbiYmbihRLGUpfTt2YXIgZSx0PSEwLEI9XCIwNTExZDRkYTU2MzFiOTdmMmU5ZFwiLEY9e30saT1bXSxVPVtdO2Z1bmN0aW9uIHMoUSl7dmFyIG49RVtRXTtpZighbilyZXR1cm4gTjt2YXIgdD1mdW5jdGlvbih0KXtyZXR1cm4gbi5ob3QuYWN0aXZlPyhFW3RdPy0xPT09RVt0XS5wYXJlbnRzLmluZGV4T2YoUSkmJkVbdF0ucGFyZW50cy5wdXNoKFEpOihpPVtRXSxlPXQpLC0xPT09bi5jaGlsZHJlbi5pbmRleE9mKHQpJiZuLmNoaWxkcmVuLnB1c2godCkpOihjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIrdCtcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIrUSksaT1bXSksTih0KX0sQj1mdW5jdGlvbihRKXtyZXR1cm57Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE5bUV19LHNldDpmdW5jdGlvbihuKXtOW1FdPW59fX07Zm9yKHZhciBGIGluIE4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKE4sRikmJlwiZVwiIT09RiYmXCJ0XCIhPT1GJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxGLEIoRikpO3JldHVybiB0LmU9ZnVuY3Rpb24oUSl7cmV0dXJuXCJyZWFkeVwiPT09bCYmZChcInByZXBhcmVcIiksdSsrLE4uZShRKS50aGVuKG4sKGZ1bmN0aW9uKFEpe3Rocm93IG4oKSxRfSkpO2Z1bmN0aW9uIG4oKXt1LS0sXCJwcmVwYXJlXCI9PT1sJiYoeFtRXXx8WihRKSwwPT09dSYmMD09PUcmJlgoKSl9fSx0LnQ9ZnVuY3Rpb24oUSxuKXtyZXR1cm4gMSZuJiYoUT10KFEpKSxOLnQoUSwtMiZuKX0sdH1mdW5jdGlvbiBJKG4pe3ZhciB0PXtfYWNjZXB0ZWREZXBlbmRlbmNpZXM6e30sX2RlY2xpbmVkRGVwZW5kZW5jaWVzOnt9LF9zZWxmQWNjZXB0ZWQ6ITEsX3NlbGZEZWNsaW5lZDohMSxfc2VsZkludmFsaWRhdGVkOiExLF9kaXNwb3NlSGFuZGxlcnM6W10sX21haW46ZSE9PW4sYWN0aXZlOiEwLGFjY2VwdDpmdW5jdGlvbihRLG4pe2lmKHZvaWQgMD09PVEpdC5fc2VsZkFjY2VwdGVkPSEwO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUSl0Ll9zZWxmQWNjZXB0ZWQ9UTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBRKWZvcih2YXIgZT0wO2U8US5sZW5ndGg7ZSsrKXQuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW1FbZV1dPW58fGZ1bmN0aW9uKCl7fTtlbHNlIHQuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW1FdPW58fGZ1bmN0aW9uKCl7fX0sZGVjbGluZTpmdW5jdGlvbihRKXtpZih2b2lkIDA9PT1RKXQuX3NlbGZEZWNsaW5lZD0hMDtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBRKWZvcih2YXIgbj0wO248US5sZW5ndGg7bisrKXQuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW1Fbbl1dPSEwO2Vsc2UgdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbUV09ITB9LGRpc3Bvc2U6ZnVuY3Rpb24oUSl7dC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goUSl9LGFkZERpc3Bvc2VIYW5kbGVyOmZ1bmN0aW9uKFEpe3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKFEpfSxyZW1vdmVEaXNwb3NlSGFuZGxlcjpmdW5jdGlvbihRKXt2YXIgbj10Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihRKTtuPj0wJiZ0Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKG4sMSl9LGludmFsaWRhdGU6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5fc2VsZkludmFsaWRhdGVkPSEwLGwpe2Nhc2VcImlkbGVcIjoobz17fSlbbl09UVtuXSxkKFwicmVhZHlcIik7YnJlYWs7Y2FzZVwicmVhZHlcIjpMKG4pO2JyZWFrO2Nhc2VcInByZXBhcmVcIjpjYXNlXCJjaGVja1wiOmNhc2VcImRpc3Bvc2VcIjpjYXNlXCJhcHBseVwiOihiPWJ8fFtdKS5wdXNoKG4pfX0sY2hlY2s6YSxhcHBseTpwLHN0YXR1czpmdW5jdGlvbihRKXtpZighUSlyZXR1cm4gbDtjLnB1c2goUSl9LGFkZFN0YXR1c0hhbmRsZXI6ZnVuY3Rpb24oUSl7Yy5wdXNoKFEpfSxyZW1vdmVTdGF0dXNIYW5kbGVyOmZ1bmN0aW9uKFEpe3ZhciBuPWMuaW5kZXhPZihRKTtuPj0wJiZjLnNwbGljZShuLDEpfSxkYXRhOkZbbl19O3JldHVybiBlPXZvaWQgMCx0fXZhciBjPVtdLGw9XCJpZGxlXCI7ZnVuY3Rpb24gZChRKXtsPVE7Zm9yKHZhciBuPTA7bjxjLmxlbmd0aDtuKyspY1tuXS5jYWxsKG51bGwsUSl9dmFyIGcsbyxDLGIsRz0wLHU9MCx4PXt9LHI9e30sVj17fTtmdW5jdGlvbiB5KFEpe3JldHVybitRK1wiXCI9PT1RPytROlF9ZnVuY3Rpb24gYShRKXtpZihcImlkbGVcIiE9PWwpdGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7cmV0dXJuIHQ9USxkKFwiY2hlY2tcIiksKG49MWU0LG49bnx8MWU0LG5ldyBQcm9taXNlKChmdW5jdGlvbihRLGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBYTUxIdHRwUmVxdWVzdClyZXR1cm4gZShuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO3RyeXt2YXIgdD1uZXcgWE1MSHR0cFJlcXVlc3QsQj1OLnArXCJob3QvaG90LXVwZGF0ZS5qc29uXCI7dC5vcGVuKFwiR0VUXCIsQiwhMCksdC50aW1lb3V0PW4sdC5zZW5kKG51bGwpfWNhdGNoKFEpe3JldHVybiBlKFEpfXQub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoND09PXQucmVhZHlTdGF0ZSlpZigwPT09dC5zdGF0dXMpZShuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiK0IrXCIgdGltZWQgb3V0LlwiKSk7ZWxzZSBpZig0MDQ9PT10LnN0YXR1cylRKCk7ZWxzZSBpZigyMDAhPT10LnN0YXR1cyYmMzA0IT09dC5zdGF0dXMpZShuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiK0IrXCIgZmFpbGVkLlwiKSk7ZWxzZXt0cnl7dmFyIG49SlNPTi5wYXJzZSh0LnJlc3BvbnNlVGV4dCl9Y2F0Y2goUSl7cmV0dXJuIHZvaWQgZShRKX1RKG4pfX19KSkpLnRoZW4oKGZ1bmN0aW9uKFEpe2lmKCFRKXJldHVybiBkKFIoKT9cInJlYWR5XCI6XCJpZGxlXCIpLG51bGw7cj17fSx4PXt9LFY9US5jLEM9US5oLGQoXCJwcmVwYXJlXCIpO3ZhciBuPW5ldyBQcm9taXNlKChmdW5jdGlvbihRLG4pe2c9e3Jlc29sdmU6USxyZWplY3Q6bn19KSk7bz17fTtyZXR1cm4gWigwKSxcInByZXBhcmVcIj09PWwmJjA9PT11JiYwPT09RyYmWCgpLG59KSk7dmFyIG59ZnVuY3Rpb24gWihRKXt2YXIgbjtWW1FdPyhyW1FdPSEwLEcrKywobj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKS5jaGFyc2V0PVwidXRmLThcIixuLnNyYz1OLnArXCJob3QvaG90LXVwZGF0ZS5qc1wiLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobikpOnhbUV09ITB9ZnVuY3Rpb24gWCgpe2QoXCJyZWFkeVwiKTt2YXIgUT1nO2lmKGc9bnVsbCxRKWlmKHQpUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gcCh0KX0pKS50aGVuKChmdW5jdGlvbihuKXtRLnJlc29sdmUobil9KSwoZnVuY3Rpb24obil7US5yZWplY3Qobil9KSk7ZWxzZXt2YXIgbj1bXTtmb3IodmFyIGUgaW4gbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxlKSYmbi5wdXNoKHkoZSkpO1EucmVzb2x2ZShuKX19ZnVuY3Rpb24gcChuKXtpZihcInJlYWR5XCIhPT1sKXRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtyZXR1cm4gZnVuY3Rpb24gbih0KXt2YXIgVSxzLEksYyxsO2Z1bmN0aW9uIGcoUSl7Zm9yKHZhciBuPVtRXSxlPXt9LHQ9bi5tYXAoKGZ1bmN0aW9uKFEpe3JldHVybntjaGFpbjpbUV0saWQ6UX19KSk7dC5sZW5ndGg+MDspe3ZhciBCPXQucG9wKCksRj1CLmlkLGk9Qi5jaGFpbjtpZigoYz1FW0ZdKSYmKCFjLmhvdC5fc2VsZkFjY2VwdGVkfHxjLmhvdC5fc2VsZkludmFsaWRhdGVkKSl7aWYoYy5ob3QuX3NlbGZEZWNsaW5lZClyZXR1cm57dHlwZTpcInNlbGYtZGVjbGluZWRcIixjaGFpbjppLG1vZHVsZUlkOkZ9O2lmKGMuaG90Ll9tYWluKXJldHVybnt0eXBlOlwidW5hY2NlcHRlZFwiLGNoYWluOmksbW9kdWxlSWQ6Rn07Zm9yKHZhciBVPTA7VTxjLnBhcmVudHMubGVuZ3RoO1UrKyl7dmFyIHM9Yy5wYXJlbnRzW1VdLEk9RVtzXTtpZihJKXtpZihJLmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbRl0pcmV0dXJue3R5cGU6XCJkZWNsaW5lZFwiLGNoYWluOmkuY29uY2F0KFtzXSksbW9kdWxlSWQ6RixwYXJlbnRJZDpzfTstMT09PW4uaW5kZXhPZihzKSYmKEkuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tGXT8oZVtzXXx8KGVbc109W10pLEcoZVtzXSxbRl0pKTooZGVsZXRlIGVbc10sbi5wdXNoKHMpLHQucHVzaCh7Y2hhaW46aS5jb25jYXQoW3NdKSxpZDpzfSkpKX19fX1yZXR1cm57dHlwZTpcImFjY2VwdGVkXCIsbW9kdWxlSWQ6USxvdXRkYXRlZE1vZHVsZXM6bixvdXRkYXRlZERlcGVuZGVuY2llczplfX1mdW5jdGlvbiBHKFEsbil7Zm9yKHZhciBlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciB0PW5bZV07LTE9PT1RLmluZGV4T2YodCkmJlEucHVzaCh0KX19UigpO3ZhciB1PXt9LHg9W10scj17fSxhPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiK1gubW9kdWxlSWQrXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiKX07Zm9yKHZhciBaIGluIG8paWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sWikpe3ZhciBYO2w9eShaKSxYPW9bWl0/ZyhsKTp7dHlwZTpcImRpc3Bvc2VkXCIsbW9kdWxlSWQ6Wn07dmFyIHA9ITEsTD0hMSxtPSExLFc9XCJcIjtzd2l0Y2goWC5jaGFpbiYmKFc9XCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiK1guY2hhaW4uam9pbihcIiAtPiBcIikpLFgudHlwZSl7Y2FzZVwic2VsZi1kZWNsaW5lZFwiOnQub25EZWNsaW5lZCYmdC5vbkRlY2xpbmVkKFgpLHQuaWdub3JlRGVjbGluZWR8fChwPW5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiK1gubW9kdWxlSWQrVykpO2JyZWFrO2Nhc2VcImRlY2xpbmVkXCI6dC5vbkRlY2xpbmVkJiZ0Lm9uRGVjbGluZWQoWCksdC5pZ25vcmVEZWNsaW5lZHx8KHA9bmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiK1gubW9kdWxlSWQrXCIgaW4gXCIrWC5wYXJlbnRJZCtXKSk7YnJlYWs7Y2FzZVwidW5hY2NlcHRlZFwiOnQub25VbmFjY2VwdGVkJiZ0Lm9uVW5hY2NlcHRlZChYKSx0Lmlnbm9yZVVuYWNjZXB0ZWR8fChwPW5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBcIitsK1wiIGlzIG5vdCBhY2NlcHRlZFwiK1cpKTticmVhaztjYXNlXCJhY2NlcHRlZFwiOnQub25BY2NlcHRlZCYmdC5vbkFjY2VwdGVkKFgpLEw9ITA7YnJlYWs7Y2FzZVwiZGlzcG9zZWRcIjp0Lm9uRGlzcG9zZWQmJnQub25EaXNwb3NlZChYKSxtPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIitYLnR5cGUpfWlmKHApcmV0dXJuIGQoXCJhYm9ydFwiKSxQcm9taXNlLnJlamVjdChwKTtpZihMKWZvcihsIGluIHJbbF09b1tsXSxHKHgsWC5vdXRkYXRlZE1vZHVsZXMpLFgub3V0ZGF0ZWREZXBlbmRlbmNpZXMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFgub3V0ZGF0ZWREZXBlbmRlbmNpZXMsbCkmJih1W2xdfHwodVtsXT1bXSksRyh1W2xdLFgub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbF0pKTttJiYoRyh4LFtYLm1vZHVsZUlkXSkscltsXT1hKX12YXIgQSxoPVtdO2ZvcihzPTA7czx4Lmxlbmd0aDtzKyspbD14W3NdLEVbbF0mJkVbbF0uaG90Ll9zZWxmQWNjZXB0ZWQmJnJbbF0hPT1hJiYhRVtsXS5ob3QuX3NlbGZJbnZhbGlkYXRlZCYmaC5wdXNoKHttb2R1bGU6bCxwYXJlbnRzOkVbbF0ucGFyZW50cy5zbGljZSgpLGVycm9ySGFuZGxlcjpFW2xdLmhvdC5fc2VsZkFjY2VwdGVkfSk7ZChcImRpc3Bvc2VcIiksT2JqZWN0LmtleXMoVikuZm9yRWFjaCgoZnVuY3Rpb24oUSl7ITE9PT1WW1FdJiZmdW5jdGlvbihRKXtkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW1FdfShRKX0pKTt2YXIgRCxTLEg9eC5zbGljZSgpO2Zvcig7SC5sZW5ndGg+MDspaWYobD1ILnBvcCgpLGM9RVtsXSl7dmFyIHY9e30sZj1jLmhvdC5fZGlzcG9zZUhhbmRsZXJzO2ZvcihJPTA7STxmLmxlbmd0aDtJKyspKFU9ZltJXSkodik7Zm9yKEZbbF09dixjLmhvdC5hY3RpdmU9ITEsZGVsZXRlIEVbbF0sZGVsZXRlIHVbbF0sST0wO0k8Yy5jaGlsZHJlbi5sZW5ndGg7SSsrKXt2YXIgVD1FW2MuY2hpbGRyZW5bSV1dO1QmJigoQT1ULnBhcmVudHMuaW5kZXhPZihsKSk+PTAmJlQucGFyZW50cy5zcGxpY2UoQSwxKSl9fWZvcihsIGluIHUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHUsbCkmJihjPUVbbF0pKWZvcihTPXVbbF0sST0wO0k8Uy5sZW5ndGg7SSsrKUQ9U1tJXSwoQT1jLmNoaWxkcmVuLmluZGV4T2YoRCkpPj0wJiZjLmNoaWxkcmVuLnNwbGljZShBLDEpO2QoXCJhcHBseVwiKSx2b2lkIDAhPT1DJiYoQj1DLEM9dm9pZCAwKTtmb3IobCBpbiBvPXZvaWQgMCxyKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGwpJiYoUVtsXT1yW2xdKTt2YXIgWT1udWxsO2ZvcihsIGluIHUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHUsbCkmJihjPUVbbF0pKXtTPXVbbF07dmFyIEo9W107Zm9yKHM9MDtzPFMubGVuZ3RoO3MrKylpZihEPVNbc10sVT1jLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbRF0pe2lmKC0xIT09Si5pbmRleE9mKFUpKWNvbnRpbnVlO0oucHVzaChVKX1mb3Iocz0wO3M8Si5sZW5ndGg7cysrKXtVPUpbc107dHJ5e1UoUyl9Y2F0Y2goUSl7dC5vbkVycm9yZWQmJnQub25FcnJvcmVkKHt0eXBlOlwiYWNjZXB0LWVycm9yZWRcIixtb2R1bGVJZDpsLGRlcGVuZGVuY3lJZDpTW3NdLGVycm9yOlF9KSx0Lmlnbm9yZUVycm9yZWR8fFl8fChZPVEpfX19Zm9yKHM9MDtzPGgubGVuZ3RoO3MrKyl7dmFyIHc9aFtzXTtsPXcubW9kdWxlLGk9dy5wYXJlbnRzLGU9bDt0cnl7TihsKX1jYXRjaChRKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB3LmVycm9ySGFuZGxlcil0cnl7dy5lcnJvckhhbmRsZXIoUSl9Y2F0Y2gobil7dC5vbkVycm9yZWQmJnQub25FcnJvcmVkKHt0eXBlOlwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsbW9kdWxlSWQ6bCxlcnJvcjpuLG9yaWdpbmFsRXJyb3I6UX0pLHQuaWdub3JlRXJyb3JlZHx8WXx8KFk9biksWXx8KFk9USl9ZWxzZSB0Lm9uRXJyb3JlZCYmdC5vbkVycm9yZWQoe3R5cGU6XCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsbW9kdWxlSWQ6bCxlcnJvcjpRfSksdC5pZ25vcmVFcnJvcmVkfHxZfHwoWT1RKX19aWYoWSlyZXR1cm4gZChcImZhaWxcIiksUHJvbWlzZS5yZWplY3QoWSk7aWYoYilyZXR1cm4gbih0KS50aGVuKChmdW5jdGlvbihRKXtyZXR1cm4geC5mb3JFYWNoKChmdW5jdGlvbihuKXtRLmluZGV4T2Yobik8MCYmUS5wdXNoKG4pfSkpLFF9KSk7cmV0dXJuIGQoXCJpZGxlXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbihRKXtRKHgpfSkpfShuPW58fHt9KX1mdW5jdGlvbiBSKCl7aWYoYilyZXR1cm4gb3x8KG89e30pLGIuZm9yRWFjaChMKSxiPXZvaWQgMCwhMH1mdW5jdGlvbiBMKG4pe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLG4pfHwob1tuXT1RW25dKX12YXIgRT17fTtmdW5jdGlvbiBOKG4pe2lmKEVbbl0pcmV0dXJuIEVbbl0uZXhwb3J0czt2YXIgZT1FW25dPXtpOm4sbDohMSxleHBvcnRzOnt9LGhvdDpJKG4pLHBhcmVudHM6KFU9aSxpPVtdLFUpLGNoaWxkcmVuOltdfTtyZXR1cm4gUVtuXS5jYWxsKGUuZXhwb3J0cyxlLGUuZXhwb3J0cyxzKG4pKSxlLmw9ITAsZS5leHBvcnRzfXJldHVybiBOLm09USxOLmM9RSxOLmQ9ZnVuY3Rpb24oUSxuLGUpe04ubyhRLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoUSxuLHtlbnVtZXJhYmxlOiEwLGdldDplfSl9LE4ucj1mdW5jdGlvbihRKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShRLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxOLnQ9ZnVuY3Rpb24oUSxuKXtpZigxJm4mJihRPU4oUSkpLDgmbilyZXR1cm4gUTtpZig0Jm4mJlwib2JqZWN0XCI9PXR5cGVvZiBRJiZRJiZRLl9fZXNNb2R1bGUpcmV0dXJuIFE7dmFyIGU9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihOLnIoZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6UX0pLDImbiYmXCJzdHJpbmdcIiE9dHlwZW9mIFEpZm9yKHZhciB0IGluIFEpTi5kKGUsdCxmdW5jdGlvbihuKXtyZXR1cm4gUVtuXX0uYmluZChudWxsLHQpKTtyZXR1cm4gZX0sTi5uPWZ1bmN0aW9uKFEpe3ZhciBuPVEmJlEuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBRLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIFF9O3JldHVybiBOLmQobixcImFcIixuKSxufSxOLm89ZnVuY3Rpb24oUSxuKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFEsbil9LE4ucD1cIi9zdGF0aWMvXCIsTi5oPWZ1bmN0aW9uKCl7cmV0dXJuIEJ9LHMoMCkoTi5zPTApfShbZnVuY3Rpb24oUSxuLGUpe1EuZXhwb3J0cz1lKDEpfSxmdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKCcvLyBFU00gQ09NUEFUIEZMQUdcXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuXFxuLy8gRVhQT1JUU1xcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIldvcmxkXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgKi8gV29ybGRfV29ybGQ7IH0pO1xcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNyZWF0ZUVudGl0eVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIHJlZXhwb3J0ICovIGNyZWF0ZUVudGl0eTsgfSk7XFxuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiY3JlYXRlU3lzdGVtXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgKi8gY3JlYXRlU3lzdGVtOyB9KTtcXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDb21wb25lbnRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiAvKiByZWV4cG9ydCAqLyBDb21wb25lbnQ7IH0pO1xcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkxpZmVjeWNsZUNvbXBvbmVudFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIHJlZXhwb3J0ICovIExpZmVDeWNsZUNvbXBvbmVudDsgfSk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvQ29tcG9uZW50Q29sbGVjdGlvbi50c1xcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuY2xhc3MgQ29tcG9uZW50Q29sbGVjdGlvbiB7XFxuICBjb25zdHJ1Y3RvcigpIHtcXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29tcG9uZW50c1wiLCBuZXcgTWFwKCkpO1xcblxcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhZGRcIiwgY29tcG9uZW50ID0+IHtcXG4gICAgICB0aGlzLmNvbXBvbmVudHMuc2V0KGNvbXBvbmVudC50eXBlLCBjb21wb25lbnQpO1xcbiAgICB9KTtcXG5cXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidXBkYXRlXCIsIChjVHlwZSwgZnVuYykgPT4ge1xcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMuaGFzKGNUeXBlKSkge1xcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY29tcG9uZW50cy5nZXQoY1R5cGUpO1xcblxcbiAgICAgICAgaWYgKGMpIHtcXG4gICAgICAgICAgY29uc3QgdXBkYXRlZENvbXBvbmVudCA9IGZ1bmMoYyk7XFxuICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5zZXQoY1R5cGUsIHVwZGF0ZWRDb21wb25lbnQpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlbW92ZVwiLCBjVHlwZSA9PiB7XFxuICAgICAgaWYgKHRoaXMuY29tcG9uZW50cy5oYXMoY1R5cGUpKSB7XFxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHMuZ2V0KGNUeXBlKTtcXG5cXG4gICAgICAgIGlmIChjb21wb25lbnQpIHtcXG4gICAgICAgICAgY29tcG9uZW50Lm9uUmVtb3ZlKCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuY29tcG9uZW50cy5kZWxldGUoY1R5cGUpO1xcbiAgICB9KTtcXG5cXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0XCIsIGNUeXBlID0+IHtcXG4gICAgICBpZiAoIXRoaXMuY29tcG9uZW50cy5oYXMoY1R5cGUpKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudENvbGxlY3Rpb24gZG9lcyBub3QgaGF2ZSBjb21wb25lbnQgb2YgdHlwZSAke2NUeXBlfWApO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmdldChjVHlwZSk7XFxuICAgIH0pO1xcblxcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYXNcIiwgY1R5cGUgPT4ge1xcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNUeXBlKSkge1xcbiAgICAgICAgcmV0dXJuIGNUeXBlLmV2ZXJ5KGN0ID0+IHRoaXMuY29tcG9uZW50cy5oYXMoY3QpID09PSB0cnVlKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5oYXMoY1R5cGUpO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuICB9XFxuXFxuICBnZXQgY29tcG9uZW50VHlwZXMoKSB7XFxuICAgIHJldHVybiBbLi4udGhpcy5jb21wb25lbnRzLmtleXMoKV07XFxuICB9XFxuXFxuICBnZXQgc2l6ZSgpIHtcXG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5zaXplO1xcbiAgfVxcblxcbn1cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9Xb3JsZC50c1xcbmZ1bmN0aW9uIFdvcmxkX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5cXG5jbGFzcyBXb3JsZF9Xb3JsZCB7XFxuICBjb25zdHJ1Y3RvcigpIHtcXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb21wb25lbnRDb2xsZWN0aW9uc1wiLCBuZXcgTWFwKCkpO1xcblxcbiAgICBXb3JsZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVudGl0aWVzXCIsIG5ldyBNYXAoKSk7XFxuXFxuICAgIFdvcmxkX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZW50aXRpZXNCeUNUeXBlc1wiLCBuZXcgTWFwKCkpO1xcblxcbiAgICBXb3JsZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVudGl0aWVzQnlUYWdzXCIsIG5ldyBNYXAoKSk7XFxuXFxuICAgIFdvcmxkX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZmluZFwiLCBwcmVkaWNhdGUgPT4ge1xcbiAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIHRoaXMuZW50aXRpZXMudmFsdWVzKCkpIHtcXG4gICAgICAgIGlmIChwcmVkaWNhdGUoZW50aXR5KSkge1xcbiAgICAgICAgICByZXR1cm4gZW50aXR5O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbnVsbDtcXG4gICAgfSk7XFxuXFxuICAgIFdvcmxkX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZmluZEFsbFwiLCBwcmVkaWNhdGUgPT4ge1xcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcXG5cXG4gICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzLnZhbHVlcygpKSB7XFxuICAgICAgICBpZiAocHJlZGljYXRlKGVudGl0eSkpIHtcXG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGVudGl0eSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiByZXN1bHRzO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJsb2NhdGVcIiwgY1R5cGVzID0+IHtcXG4gICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzLnZhbHVlcygpKSB7XFxuICAgICAgICBpZiAoZW50aXR5LmNvbXBvbmVudHMuaGFzKGNUeXBlcykpIHtcXG4gICAgICAgICAgcmV0dXJuIGVudGl0eTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH0pO1xcblxcbiAgICBXb3JsZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxvY2F0ZUFsbFwiLCBjVHlwZXMgPT4ge1xcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcXG5cXG4gICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzLnZhbHVlcygpKSB7XFxuICAgICAgICBpZiAoZW50aXR5LmNvbXBvbmVudHMuaGFzKGNUeXBlcykpIHtcXG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGVudGl0eSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiByZXN1bHRzO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJncmFiXCIsIGNUeXBlID0+IHtcXG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmxvY2F0ZShjVHlwZSk7XFxuXFxuICAgICAgaWYgKGVudGl0eSkge1xcbiAgICAgICAgY29uc3QgY2MgPSB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlbnRpdHkuaWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uKCk7XFxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjYy5nZXQoY1R5cGUpO1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgZW50aXR5LFxcbiAgICAgICAgICBjb21wb25lbnRcXG4gICAgICAgIH07XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBudWxsO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJncmFiQnlcIiwgKGNUeXBlLCBwcmVkaWNhdGUpID0+IHtcXG4gICAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMubG9jYXRlQWxsKGNUeXBlKTtcXG5cXG4gICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllcykge1xcbiAgICAgICAgY29uc3QgY2MgPSB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlbnRpdHkuaWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uKCk7XFxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjYy5nZXQoY1R5cGUpO1xcblxcbiAgICAgICAgaWYgKHByZWRpY2F0ZShjb21wb25lbnQpKSB7XFxuICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgY29tcG9uZW50LFxcbiAgICAgICAgICAgIGVudGl0eVxcbiAgICAgICAgICB9O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbnVsbDtcXG4gICAgfSk7XFxuXFxuICAgIFdvcmxkX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ3JhYkFsbFwiLCBjVHlwZSA9PiB7XFxuICAgICAgcmV0dXJuIHRoaXMubG9jYXRlQWxsKGNUeXBlKS5tYXAoZW50aXR5ID0+ICh7XFxuICAgICAgICBlbnRpdHksXFxuICAgICAgICBjb21wb25lbnQ6IGVudGl0eS5jb21wb25lbnRzLmdldChjVHlwZSlcXG4gICAgICB9KSk7XFxuICAgIH0pO1xcblxcbiAgICBXb3JsZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFwiLCAoZWlkLCBjVHlwZSkgPT4ge1xcbiAgICAgIGNvbnN0IGNjID0gdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQoZWlkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbigpO1xcbiAgICAgIHJldHVybiBjYy5nZXQoY1R5cGUpO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXRUYWdnZWRcIiwgdGFnID0+IHtcXG4gICAgICBjb25zdCB0YWdFbnRpdHlJZHMgPSB0aGlzLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xcblxcbiAgICAgIGlmICh0YWdFbnRpdHlJZHMpIHtcXG4gICAgICAgIGNvbnN0IGVudGl0eUlkID0gdGFnRW50aXR5SWRzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuZW50aXRpZXMuZ2V0KGVudGl0eUlkKTtcXG5cXG4gICAgICAgIGlmIChlbnRpdHkpIHtcXG4gICAgICAgICAgcmV0dXJuIGVudGl0eTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH0pO1xcblxcbiAgICBXb3JsZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldEFsbFRhZ2dlZFwiLCB0YWcgPT4ge1xcbiAgICAgIGxldCBlbnRpdGllcyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXFxuXFxuICAgICAgY29uc3QgdGFnRW50aXR5SWRzID0gdGhpcy5lbnRpdGllc0J5VGFncy5nZXQodGFnKTtcXG5cXG4gICAgICBpZiAodGFnRW50aXR5SWRzKSB7XFxuICAgICAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIHRhZ0VudGl0eUlkcykge1xcbiAgICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0aWVzLmdldChlbnRpdHlJZCk7XFxuXFxuICAgICAgICAgIGlmIChlbnRpdHkpIHtcXG4gICAgICAgICAgICBlbnRpdGllcy5wdXNoKGVudGl0eSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGVudGl0aWVzO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRcIiwgKGVpZCwgY29tcG9uZW50KSA9PiB7XFxuICAgICAgY29uc3QgY2MgPSB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlaWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uKCk7XFxuICAgICAgY2MuYWRkKGNvbXBvbmVudCk7XFxuICAgICAgdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5zZXQoZWlkLCBjYyk7XFxuXFxuICAgICAgZm9yIChjb25zdCBbY3RBcnIsIGVudGl0eVNldF0gb2YgdGhpcy5lbnRpdGllc0J5Q1R5cGVzKSB7XFxuICAgICAgICBpZiAoY3RBcnIuZXZlcnkoY2MuaGFzKSkge1xcbiAgICAgICAgICBlbnRpdHlTZXQuYWRkKGVpZCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9KTtcXG5cXG4gICAgV29ybGRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZW1vdmVcIiwgKGVpZCwgY1R5cGUpID0+IHtcXG4gICAgICBjb25zdCBjYyA9IHRoaXMuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KGVpZCkgfHwgbmV3IENvbXBvbmVudENvbGxlY3Rpb24oKTsgLy8gcmVtb3ZlIGVudGl0eSBmcm9tIGN1cnJlbnQgZW50aXRpZXNCeUNUeXBlc1xcblxcbiAgICAgIGZvciAoY29uc3QgW2N0QXJyLCBlbnRpdHlTZXRdIG9mIHRoaXMuZW50aXRpZXNCeUNUeXBlcykge1xcbiAgICAgICAgaWYgKGN0QXJyLmV2ZXJ5KGNjLmhhcykpIHtcXG4gICAgICAgICAgZW50aXR5U2V0LmRlbGV0ZShlaWQpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG5cXG4gICAgICBjYy5yZW1vdmUoY1R5cGUpOyAvLyBNb3ZlIGVudGl0eUlkIHRvIG5ldyBDVHlwZXMgaWYgbmVlZGVkLlxcblxcbiAgICAgIGZvciAoY29uc3QgW2N0QXJyLCBlbnRpdHlTZXRdIG9mIHRoaXMuZW50aXRpZXNCeUNUeXBlcykge1xcbiAgICAgICAgaWYgKGN0QXJyLmV2ZXJ5KGNjLmhhcykpIHtcXG4gICAgICAgICAgZW50aXR5U2V0LmFkZChlaWQpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSk7XFxuICB9XFxuXFxuICAvKipcXG4gICAqIEludGVybmFsIG1ldGhvZCB1c2VkIGluIHNldHRpbmcgdXAgYSBuZXcgc3lzdGVtLlxcbiAgICovXFxuICByZWdpc3RlclN5c3RlbShjVHlwZXMpIHtcXG4gICAgdGhpcy5lbnRpdGllc0J5Q1R5cGVzLnNldChjVHlwZXMsIG5ldyBTZXQoKSk7XFxuICAgIHJldHVybiB0aGlzO1xcbiAgfVxcblxcbiAgcmVnaXN0ZXJFbnRpdHkoZW50aXR5KSB7XFxuICAgIGNvbnN0IGNjID0gbmV3IENvbXBvbmVudENvbGxlY3Rpb24oKTtcXG4gICAgdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5zZXQoZW50aXR5LmlkLCBjYyk7XFxuICAgIHRoaXMuZW50aXRpZXMuc2V0KGVudGl0eS5pZCwgZW50aXR5KTtcXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9XFxuICAvKipcXG4gICAqIFJlbW92ZSBhbGwgY29tcG9uZW50cyB0aGF0IGJlbG9uZyB0byBhbiBlbnRpdHkuXFxuICAgKi9cXG5cXG5cXG4gIGNsZWFyRW50aXR5Q29tcG9uZW50cyhlaWQpIHtcXG4gICAgdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5zZXQoZWlkLCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbigpKTtcXG5cXG4gICAgZm9yIChjb25zdCBlbnRpdHlTZXQgb2YgdGhpcy5lbnRpdGllc0J5Q1R5cGVzLnZhbHVlcygpKSB7XFxuICAgICAgaWYgKGVudGl0eVNldC5oYXMoZWlkKSkge1xcbiAgICAgICAgZW50aXR5U2V0LmRlbGV0ZShlaWQpO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH1cXG4gIC8qKlxcbiAgICogRGVzdHJveXMgYW4gZW50aXR5LlxcbiAgICogU2FtZSBhcyBlbnRpdHkuZGVzdHJveSgpLlxcbiAgICovXFxuXFxuXFxuICBkZXN0cm95RW50aXR5KGVpZCkge1xcbiAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmRlbGV0ZShlaWQpO1xcbiAgICB0aGlzLmVudGl0aWVzLmRlbGV0ZShlaWQpO1xcblxcbiAgICBmb3IgKGNvbnN0IGVudGl0eVNldCBvZiB0aGlzLmVudGl0aWVzQnlDVHlwZXMudmFsdWVzKCkpIHtcXG4gICAgICBpZiAoZW50aXR5U2V0LmhhcyhlaWQpKSB7XFxuICAgICAgICBlbnRpdHlTZXQuZGVsZXRlKGVpZCk7XFxuICAgICAgfVxcbiAgICB9IC8vIHJlbW92ZSBhbnkgdGFnIGFzc29jaWF0aW9ucyB3aXRoIGRlc3Ryb3llZCBlbnRpdGllcy5cXG5cXG5cXG4gICAgZm9yIChjb25zdCBbdGFnLCBlbnRpdHlTZXRdIG9mIHRoaXMuZW50aXRpZXNCeVRhZ3MpIHtcXG4gICAgICBpZiAoZW50aXR5U2V0LmhhcyhlaWQpKSB7XFxuICAgICAgICBlbnRpdHlTZXQuZGVsZXRlKGVpZCk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChlbnRpdHlTZXQuc2l6ZSA9PT0gMCkge1xcbiAgICAgICAgdGhpcy5lbnRpdGllc0J5VGFncy5kZWxldGUodGFnKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9XFxuXFxufVxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanNcXG4vLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxcbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcXG4vLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxcbnZhciBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSBcXCd1bmRlZmluZWRcXCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09IFxcJ3VuZGVmaW5lZFxcJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSBcXCdmdW5jdGlvblxcJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XFxudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xcbmZ1bmN0aW9uIHJuZygpIHtcXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XFxuICAgIHRocm93IG5ldyBFcnJvcihcXCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZFxcJyk7XFxuICB9XFxuXFxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcXG59XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL2J5dGVzVG9VdWlkLmpzXFxuLyoqXFxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XFxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXFxuICovXFxudmFyIGJ5dGVUb0hleCA9IFtdO1xcblxcbmZvciAodmFyIGJ5dGVzVG9VdWlkX2kgPSAwOyBieXRlc1RvVXVpZF9pIDwgMjU2OyArK2J5dGVzVG9VdWlkX2kpIHtcXG4gIGJ5dGVUb0hleC5wdXNoKChieXRlc1RvVXVpZF9pICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xcbn1cXG5cXG5mdW5jdGlvbiBieXRlc1RvVXVpZChidWYsIG9mZnNldF8pIHtcXG4gIHZhciBvZmZzZXQgPSBvZmZzZXRfIHx8IDA7IC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdFxcJ3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxcblxcbiAgcmV0dXJuIChieXRlVG9IZXhbYnVmW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFtidWZbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2J1ZltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDNdXSArIFxcJy1cXCcgKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFtidWZbb2Zmc2V0ICsgNV1dICsgXFwnLVxcJyArIGJ5dGVUb0hleFtidWZbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2J1ZltvZmZzZXQgKyA3XV0gKyBcXCctXFwnICsgYnl0ZVRvSGV4W2J1ZltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDldXSArIFxcJy1cXCcgKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYnVmW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XFxufVxcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGVzbV9icm93c2VyX2J5dGVzVG9VdWlkID0gKGJ5dGVzVG9VdWlkKTtcXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanNcXG5cXG5cXG5cXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XFxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcXG5cXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XFxuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcXG5cXG4gIGlmIChidWYpIHtcXG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XFxuXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGJ1ZjtcXG4gIH1cXG5cXG4gIHJldHVybiBlc21fYnJvd3Nlcl9ieXRlc1RvVXVpZChybmRzKTtcXG59XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZXNtX2Jyb3dzZXJfdjQgPSAodjQpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL0VudGl0eS50c1xcbmZ1bmN0aW9uIEVudGl0eV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuXFxuXFxuY2xhc3MgRW50aXR5X0VudGl0eSB7XFxuICBjb25zdHJ1Y3Rvcih3b3JsZCkge1xcbiAgICBFbnRpdHlfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaWRcIiwgdm9pZCAwKTtcXG5cXG4gICAgRW50aXR5X2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3dvcmxkXCIsIHZvaWQgMCk7XFxuXFxuICAgIHRoaXMuX2lkID0gZXNtX2Jyb3dzZXJfdjQoKTtcXG4gICAgdGhpcy5fd29ybGQgPSB3b3JsZDtcXG4gICAgLypcXG4gICAgUmVnaXN0ZXJpbmcgd2l0aCB0aGUgV29ybGQuXFxuICAgICovXFxuXFxuICAgIHRoaXMuX3dvcmxkLnJlZ2lzdGVyRW50aXR5KHRoaXMpO1xcbiAgfVxcbiAgLyoqXFxuICAgKiBBZGQgYSBjb21wb25lbnQgdG8gYW4gRW50aXR5LCBkb2guXFxuICAgKi9cXG5cXG5cXG4gIGFkZChjb21wb25lbnQpIHtcXG4gICAgdGhpcy5fd29ybGQuc2V0KHRoaXMuX2lkLCBjb21wb25lbnQpO1xcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH1cXG4gIC8qKlxcbiAgICogQWRkIGEgdGFnIHRvIGEgY29tcG9uZW50XFxuICAgKi9cXG5cXG5cXG4gIGFkZFRhZyh0YWcpIHtcXG4gICAgY29uc3QgZW50aXR5U2V0ID0gdGhpcy5fd29ybGQuZW50aXRpZXNCeVRhZ3MuaGFzKHRhZykgPyB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5nZXQodGFnKSA6IG5ldyBTZXQoKTtcXG5cXG4gICAgaWYgKGVudGl0eVNldCkge1xcbiAgICAgIGVudGl0eVNldC5hZGQodGhpcy5faWQpO1xcblxcbiAgICAgIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLnNldCh0YWcsIGVudGl0eVNldCk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9XFxuICAvKipcXG4gICAqIERldGVybWluZXMgaWYgYW4gZW50aXR5IGhhcyBhIGNvbXBvbmVudCByZWxhdGVkIHRvIGl0LlxcbiAgICovXFxuXFxuXFxuICBoYXMoY1R5cGUpIHtcXG4gICAgY29uc3QgY2MgPSB0aGlzLl93b3JsZC5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQodGhpcy5faWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uKCk7XFxuICAgIHJldHVybiBjYy5oYXMoY1R5cGUpO1xcbiAgfVxcbiAgLyoqXFxuICAgKiBDaGVjayB0byBzZWUgaWYgYW4gZW50aXR5IHRhZ2dlZCB3aXRoIGEgZ2l2ZW4gdGFnLlxcbiAgICovXFxuXFxuXFxuICBoYXNUYWcodGFnKSB7XFxuICAgIGlmICh0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5oYXModGFnKSkge1xcbiAgICAgIGNvbnN0IGVudGl0eVNldCA9IHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xcblxcbiAgICAgIGlmIChlbnRpdHlTZXQpIHtcXG4gICAgICAgIHJldHVybiBlbnRpdHlTZXQuaGFzKHRoaXMuX2lkKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGZhbHNlO1xcbiAgfVxcbiAgLyoqXFxuICAgKiBHZXQgYSBjb21wb25lbnQgdGhhdCBiZWxvbmdzIHRvIGFuIGVudGl0eS5cXG4gICAqL1xcblxcblxcbiAgZ2V0KGNUeXBlKSB7XFxuICAgIGNvbnN0IGNjID0gdGhpcy5fd29ybGQuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KHRoaXMuX2lkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbigpO1xcbiAgICBjb25zdCBjb21wb25lbnQgPSBjYy5nZXQoY1R5cGUpO1xcbiAgICByZXR1cm4gY29tcG9uZW50O1xcbiAgfVxcbiAgLyoqXFxuICAgKiBHZXQgYWxsIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdG8gYW4gZW50aXR5LCB2aWEgYSBDb21wb25lbnRDb2xsZWN0aW9uXFxuICAgKi9cXG5cXG5cXG4gIGdldEFsbCgpIHtcXG4gICAgcmV0dXJuIHRoaXMuX3dvcmxkLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldCh0aGlzLl9pZCkgfHwgbmV3IENvbXBvbmVudENvbGxlY3Rpb24oKTtcXG4gIH1cXG5cXG4gIHJlbW92ZShjVHlwZSkge1xcbiAgICB0aGlzLl93b3JsZC5yZW1vdmUodGhpcy5faWQsIGNUeXBlKTtcXG5cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9XFxuICAvKipcXG4gICAqIFJlbW92ZSBhIHRhZyBmcm9tIGFuIGVudGl0eVxcbiAgICovXFxuXFxuXFxuICByZW1vdmVUYWcodGFnKSB7XFxuICAgIGlmICh0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5oYXModGFnKSkge1xcbiAgICAgIGNvbnN0IGVudGl0eVNldCA9IHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xcblxcbiAgICAgIGlmIChlbnRpdHlTZXQpIHtcXG4gICAgICAgIGVudGl0eVNldC5kZWxldGUodGhpcy5faWQpO1xcblxcbiAgICAgICAgaWYgKGVudGl0eVNldC5zaXplID09PSAwKSB7XFxuICAgICAgICAgIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmRlbGV0ZSh0YWcpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH1cXG4gIC8qKiBDbGVhcnMgYWxsIGNvbXBvbmVudHMgZnJvbSBhbiBFbnRpdHkgKi9cXG5cXG5cXG4gIGNsZWFyKCkge1xcbiAgICB0aGlzLl93b3JsZC5jbGVhckVudGl0eUNvbXBvbmVudHModGhpcy5faWQpO1xcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH1cXG4gIC8qKlxcbiAgICogUmVtb3ZlIGFsbCB0YWdzIG9uIGFuIGVudGl0eVxcbiAgICovXFxuXFxuXFxuICBjbGVhclRhZ3MoKSB7XFxuICAgIGZvciAoY29uc3QgW3RhZywgZW50aXR5U2V0XSBvZiB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5lbnRyaWVzKCkpIHtcXG4gICAgICBlbnRpdHlTZXQuZGVsZXRlKHRoaXMuX2lkKTtcXG5cXG4gICAgICBpZiAoZW50aXR5U2V0LnNpemUgPT09IDApIHtcXG4gICAgICAgIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmRlbGV0ZSh0YWcpO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH1cXG5cXG4gIGRlc3Ryb3koKSB7XFxuICAgIHRoaXMuX3dvcmxkLmRlc3Ryb3lFbnRpdHkodGhpcy5faWQpO1xcbiAgfVxcblxcbiAgZ2V0IGlkKCkge1xcbiAgICByZXR1cm4gdGhpcy5faWQ7XFxuICB9XFxuXFxuICBnZXQgd29ybGQoKSB7XFxuICAgIHJldHVybiB0aGlzLl93b3JsZDtcXG4gIH1cXG4gIC8qKlxcbiAgICogR2V0IGFsbCBjb21wb25lbnRzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIGFuIGVudGl0eSwgdmlhIGEgQ29tcG9uZW50Q29sbGVjdGlvbi5cXG4gICAqIERvZXMgdGhlIHNhbWUgdGhpbmcgYXMgZW50aXR5SW5zdGFuY2UuZ2V0QWxsKCkuXFxuICAgKi9cXG5cXG5cXG4gIGdldCBjb21wb25lbnRzKCkge1xcbiAgICByZXR1cm4gdGhpcy5fd29ybGQuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KHRoaXMuX2lkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbigpO1xcbiAgfVxcbiAgLyoqXFxuICAgKiBSZXRyaWV2ZXMgYWxsIHRoZSB0YWdzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoaXMgZW50aXR5LlxcbiAgICovXFxuXFxuXFxuICBnZXQgdGFncygpIHtcXG4gICAgY29uc3QgdGFncyA9IG5ldyBTZXQoKTtcXG5cXG4gICAgZm9yIChjb25zdCBbdGFnLCBlbnRpdHlTZXRdIG9mIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmVudHJpZXMoKSkge1xcbiAgICAgIGlmIChlbnRpdHlTZXQuaGFzKHRoaXMuX2lkKSkge1xcbiAgICAgICAgdGFncy5hZGQodGFnKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHRhZ3M7XFxuICB9XFxuXFxufVxcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eSh3b3JsZCkge1xcbiAgY29uc3QgZW50aXR5ID0gbmV3IEVudGl0eV9FbnRpdHkod29ybGQpO1xcbiAgcmV0dXJuIGVudGl0eTtcXG59XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvU3lzdGVtLnRzXFxuXFxuXFxuXFxuLyoqXFxuICogVGhpcyBpcyBob3cgeW91IGNyZWF0ZSBhIFN5c3RlbS5cXG4gKiBAZXhhbXBsZVxcbiAqIGBgYFxcbiAqIGNyZWF0ZVN5c3RlbSh3b3JsZCwgW1xcJ0NvbXBvbmVudFR5cGVcXCddLCAoeyBlbnRpdHkgfSkgPT4gXFwnRG8gZnVuIHN5c3RlbSB0aGluZ3MgaGVyZS5cXCcpXFxuICogYGBgXFxuICovXFxuZnVuY3Rpb24gY3JlYXRlU3lzdGVtKHdvcmxkLCBjVHlwZXMsIHN5c3RlbUZ1bmMpIHtcXG4gIHdvcmxkLnJlZ2lzdGVyU3lzdGVtKGNUeXBlcyk7XFxuICByZXR1cm4gKCkgPT4ge1xcbiAgICBsZXQgaW5kZXggPSAwO1xcbiAgICBjb25zdCBzaXplID0gd29ybGQuZW50aXRpZXNCeUNUeXBlcy5zaXplOyAvLyBVc2VkIGZvciBtYXRjaGluZyB0aGUgYXJyYXkgb2YgQ29tcG9uZW50VHlwZXMgd2hpY2ggaXMgdGhlIGtleVxcbiAgICAvLyBvZiB3aGVyZSB0aGUgQ29tcG9uZW50Q29sbGVjdGlvbiBpcywgd2l0aCB0aGUgYXJyYXkgb2YgQ29tcG9uZW50VHlwZXNcXG4gICAgLy8gdGhhdCBhcmUgcGFzc2VzLlxcbiAgICAvLyBNaWdodCBiZSBuaWNlIGluIHRoZSBmdXR1cmUgdG8gZ28gYmFjayB0byBhIHJlZiBjaGVjayBvbiBjVHlwZXMsIGJ1dFxcbiAgICAvLyBmb3Igbm93IHRoaXMgZG9lc25cXCd0IHNlZW0gdG8gYmUgdGhhdCBtdWNoIG9mIGEgcGVyZiBoaXQuXFxuICAgIC8vIGZvciAoY29uc3QgY3Qgb2Ygd29ybGQuZW50aXRpZXNCeUNUeXBlcy5rZXlzKCkpIHtcXG4gICAgLy8gICBpZiAoY1R5cGVzLmxlbmd0aCA9PT0gY3QubGVuZ3RoICYmIGNUeXBlcy5ldmVyeShjID0+IGN0LmluY2x1ZGVzKGMpKSkge1xcbiAgICAvLyAgICAgZm9yIChjb25zdCBlaWQgb2Ygd29ybGQuZW50aXRpZXNCeUNUeXBlcy5nZXQoY1R5cGVzKSkge1xcbiAgICAvLyAgICAgICBjb25zdCBhcmdzOiBTeXN0ZW1GdW5jQXJnczxDVD4gPSB7XFxuICAgIC8vICAgICAgICAgZW50aXR5OiB3b3JsZC5lbnRpdGllcy5nZXQoZWlkKSxcXG4gICAgLy8gICAgICAgICBjb21wb25lbnRzOiB3b3JsZC5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQoZWlkKSxcXG4gICAgLy8gICAgICAgICB3b3JsZCxcXG4gICAgLy8gICAgICAgICBpbmRleCxcXG4gICAgLy8gICAgICAgICBzaXplLFxcbiAgICAvLyAgICAgICAgIGlzRmlyc3Q6IGluZGV4ID09PSAwLFxcbiAgICAvLyAgICAgICAgIGlzTGFzdDogaW5kZXggKyAxID09PSBzaXplLFxcbiAgICAvLyAgICAgICB9XFxuICAgIC8vICAgICAgIHN5c3RlbUZ1bmMoYXJncyk7XFxuICAgIC8vICAgICAgIGluZGV4ICs9IDE7XFxuICAgIC8vICAgICB9XFxuICAgIC8vICAgfVxcbiAgICAvLyB9XFxuXFxuICAgIGNvbnN0IGNUeXBlQXJycyA9IHdvcmxkLmVudGl0aWVzQnlDVHlwZXMuZ2V0KGNUeXBlcykgfHwgbmV3IFNldCgpO1xcblxcbiAgICBmb3IgKGNvbnN0IGVpZCBvZiBjVHlwZUFycnMpIHtcXG4gICAgICBjb25zdCBhcmdzID0ge1xcbiAgICAgICAgZW50aXR5OiB3b3JsZC5lbnRpdGllcy5nZXQoZWlkKSB8fCBuZXcgRW50aXR5X0VudGl0eSh3b3JsZCksXFxuICAgICAgICBjb21wb25lbnRzOiB3b3JsZC5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQoZWlkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbigpLFxcbiAgICAgICAgd29ybGQsXFxuICAgICAgICBpbmRleCxcXG4gICAgICAgIHNpemUsXFxuICAgICAgICBpc0ZpcnN0OiBpbmRleCA9PT0gMCxcXG4gICAgICAgIGlzTGFzdDogaW5kZXggKyAxID09PSBzaXplXFxuICAgICAgfTtcXG4gICAgICBzeXN0ZW1GdW5jKGFyZ3MpO1xcbiAgICAgIGluZGV4ICs9IDE7XFxuICAgIH1cXG4gIH07XFxufVxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL0NvbXBvbmVudC50c1xcbmZ1bmN0aW9uIENvbXBvbmVudF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuY2xhc3MgQ29tcG9uZW50IHtcXG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2UpIHtcXG4gICAgQ29tcG9uZW50X2RlZmluZVByb3BlcnR5KHRoaXMsIFwidHlwZVwiLCB2b2lkIDApO1xcblxcbiAgICBDb21wb25lbnRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yYWdlXCIsIHZvaWQgMCk7XFxuXFxuICAgIHRoaXMudHlwZSA9IFwiQWJzdHJhY3RDb21wb25lbnRcIjtcXG4gICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcXG5cXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHN0b3JhZ2UpKSB7XFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xcbiAgICAgICAgZ2V0OiAoKSA9PiB7XFxuICAgICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2Vba2V5XTtcXG4gICAgICAgIH0sXFxuICAgICAgICBzZXQ6IG5leHRWYWwgPT4ge1xcbiAgICAgICAgICB0aGlzLnN0b3JhZ2Vba2V5XSA9IG5leHRWYWw7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH0gLy8gQWRkIGdldHRlcnMvc2V0dGVycz9cXG5cXG4gIH0gLy8gZ2V0UHJvcGVydHkoKTpcXG4gIC8vIFRPRE86IFdpbGwgYWRkIG9uUmVtb3ZlIGxhdGVyIGFzIG5vdCB0byBzY3JldyB1cCBjb21wb25lbnRzIHRoYXRcXG4gIC8vICAgICAgIFwiaW1wbGVtZW50XCIgQ29tcG9uZW50IGluc3RlYWQgb2YgXCJleHRlbmRcImluZyBpdC5cXG5cXG5cXG4gIG9uUmVtb3ZlKCkgey8vIGVtcHR5XFxuICB9XFxuXFxufVxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL0xpZmVjeWNsZUNvbXBvbmVudC50c1xcbmZ1bmN0aW9uIExpZmVjeWNsZUNvbXBvbmVudF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuY2xhc3MgTGlmZUN5Y2xlQ29tcG9uZW50IHtcXG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2UpIHtcXG4gICAgTGlmZWN5Y2xlQ29tcG9uZW50X2RlZmluZVByb3BlcnR5KHRoaXMsIFwidHlwZVwiLCB2b2lkIDApO1xcblxcbiAgICBMaWZlY3ljbGVDb21wb25lbnRfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yYWdlXCIsIHZvaWQgMCk7XFxuXFxuICAgIExpZmVjeWNsZUNvbXBvbmVudF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmRsZVN0b3JhZ2VQcm9wQWNjZXNzXCIsIChfdGFyZ2V0LCBwcm9wLCBfcmVjZWl2ZXIpID0+IHtcXG4gICAgICB0aGlzLnN0b3JhZ2VXaWxsQmVBY2Nlc3NlZChwcm9wKTtcXG4gICAgICBjb25zdCB2YWwgPSB0aGlzLm9uU3RvcmFnZUFjY2Vzcyhwcm9wKTtcXG4gICAgICB0aGlzLnN0b3JhZ2VXYXNBY2Nlc3NlZChwcm9wKTtcXG4gICAgICByZXR1cm4gdmFsO1xcbiAgICB9KTtcXG5cXG4gICAgTGlmZWN5Y2xlQ29tcG9uZW50X2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFuZGxlU3RvcmFnZVByb3BDaGFuZ2VcIiwgKHRhcmdldCwgcHJvcCwgdmFsdWUsIF9yZWNlaXZlcikgPT4ge1xcbiAgICAgIGlmICh0aGlzLnN0b3JhZ2VTaG91bGRVcGRhdGUocHJvcCwgdmFsdWUpKSB7XFxuICAgICAgICB0aGlzLnN0b3JhZ2VXaWxsVXBkYXRlKHByb3AsIHZhbHVlKTtcXG4gICAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IHRhcmdldFtwcm9wXTtcXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xcbiAgICAgICAgdGhpcy5zdG9yYWdlRGlkVXBkYXRlKHByb3AsIHByZXZWYWx1ZSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy50eXBlID0gXCJBYnN0cmFjdENvbXBvbmVudFwiOyAvLyBTaG91bGQgdGhlIHByb3h5IGJlIGEgXCJyZXZvY2FibGVcIiB0eXBlP1xcblxcbiAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgUHJveHkoc3RvcmFnZSwge1xcbiAgICAgIGdldDogdGhpcy5oYW5kbGVTdG9yYWdlUHJvcEFjY2VzcyxcXG4gICAgICBzZXQ6IHRoaXMuaGFuZGxlU3RvcmFnZVByb3BDaGFuZ2VcXG4gICAgfSk7XFxuICB9XFxuXFxuICAvLyBMaWZlY3ljbGUgbWV0aG9kc1xcbiAgc3RvcmFnZVNob3VsZFVwZGF0ZShfcHJvcCwgX3ZhbHVlKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcblxcbiAgc3RvcmFnZVdpbGxCZUFjY2Vzc2VkKF9wcm9wKSB7Ly8gbGVmdCBlbXB0eS5cXG4gIH1cXG5cXG4gIG9uU3RvcmFnZUFjY2Vzcyhwcm9wKSB7XFxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VbcHJvcF07XFxuICB9XFxuXFxuICBzdG9yYWdlV2FzQWNjZXNzZWQoX3Byb3ApIHsvLyBsZWZ0IGVtcHR5LlxcbiAgfVxcblxcbiAgc3RvcmFnZVdpbGxVcGRhdGUoX3Byb3AsIF9uZXh0VmFsdWUpIHsvLyBsZWZ0IGVtcHR5LlxcbiAgfVxcblxcbiAgc3RvcmFnZURpZFVwZGF0ZShfcHJvcCwgX3ByZXZWYWx1ZSkgey8vIGxlZnQgZW1wdHkuXFxuICB9XFxuXFxuICBvblJlbW92ZSgpIHsvLyBkbyBzdHVmZiB3aGVuIHJlbW92ZWQuLi4uXFxuICB9XFxuXFxufVxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2luZGV4LnRzXFxuXFxuXFxuXFxuXFxuXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OWxZM04wWVhScFl5OHVMM055WXk5RGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUxuUnpQelV4WXpRaUxDSjNaV0p3WVdOck9pOHZaV056ZEdGMGFXTXZMaTl6Y21NdlYyOXliR1F1ZEhNL1kyTXdZaUlzSW5kbFluQmhZMnM2THk5bFkzTjBZWFJwWXk4dUwyNXZaR1ZmYlc5a2RXeGxjeTkxZFdsa0wyUnBjM1F2WlhOdExXSnliM2R6WlhJdmNtNW5MbXB6UDJRNFpqZ2lMQ0ozWldKd1lXTnJPaTh2WldOemRHRjBhV012TGk5dWIyUmxYMjF2WkhWc1pYTXZkWFZwWkM5a2FYTjBMMlZ6YlMxaWNtOTNjMlZ5TDJKNWRHVnpWRzlWZFdsa0xtcHpQMkkyT1RFaUxDSjNaV0p3WVdOck9pOHZaV056ZEdGMGFXTXZMaTl1YjJSbFgyMXZaSFZzWlhNdmRYVnBaQzlrYVhOMEwyVnpiUzFpY205M2MyVnlMM1kwTG1welAyVmpNallpTENKM1pXSndZV05yT2k4dlpXTnpkR0YwYVdNdkxpOXpjbU12Ulc1MGFYUjVMblJ6UDJGak5qZ2lMQ0ozWldKd1lXTnJPaTh2WldOemRHRjBhV012TGk5emNtTXZVM2x6ZEdWdExuUnpQek15TkRnaUxDSjNaV0p3WVdOck9pOHZaV056ZEdGMGFXTXZMaTl6Y21NdlEyOXRjRzl1Wlc1MExuUnpQelJrTm1JaUxDSjNaV0p3WVdOck9pOHZaV056ZEdGMGFXTXZMaTl6Y21NdlRHbG1aV041WTJ4bFEyOXRjRzl1Wlc1MExuUnpQelpoWTJNaUxDSjNaV0p3WVdOck9pOHZaV056ZEdGMGFXTXZMaTl6Y21NdmFXNWtaWGd1ZEhNL1ptWmlOQ0pkTENKdVlXMWxjeUk2V3lKRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUlpd2lUV0Z3SWl3aVkyOXRjRzl1Wlc1MElpd2lZMjl0Y0c5dVpXNTBjeUlzSW5ObGRDSXNJblI1Y0dVaUxDSmpWSGx3WlNJc0ltWjFibU1pTENKb1lYTWlMQ0pqSWl3aVoyVjBJaXdpZFhCa1lYUmxaRU52YlhCdmJtVnVkQ0lzSW05dVVtVnRiM1psSWl3aVpHVnNaWFJsSWl3aVJYSnliM0lpTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKbGRtVnllU0lzSW1OMElpd2lZMjl0Y0c5dVpXNTBWSGx3WlhNaUxDSnJaWGx6SWl3aWMybDZaU0lzSWxkdmNteGtJaXdpY0hKbFpHbGpZWFJsSWl3aVpXNTBhWFI1SWl3aVpXNTBhWFJwWlhNaUxDSjJZV3gxWlhNaUxDSnlaWE4xYkhSeklpd2ljSFZ6YUNJc0ltTlVlWEJsY3lJc0lteHZZMkYwWlNJc0ltTmpJaXdpWTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ym5NaUxDSnBaQ0lzSW14dlkyRjBaVUZzYkNJc0ltMWhjQ0lzSW1WcFpDSXNJblJoWnlJc0luUmhaMFZ1ZEdsMGVVbGtjeUlzSW1WdWRHbDBhV1Z6UW5sVVlXZHpJaXdpWlc1MGFYUjVTV1FpTENKdVpYaDBJaXdpZG1Gc2RXVWlMQ0poWkdRaUxDSmpkRUZ5Y2lJc0ltVnVkR2wwZVZObGRDSXNJbVZ1ZEdsMGFXVnpRbmxEVkhsd1pYTWlMQ0p5WlcxdmRtVWlMQ0p5WldkcGMzUmxjbE41YzNSbGJTSXNJbE5sZENJc0luSmxaMmx6ZEdWeVJXNTBhWFI1SWl3aVkyeGxZWEpGYm5ScGRIbERiMjF3YjI1bGJuUnpJaXdpWkdWemRISnZlVVZ1ZEdsMGVTSXNJa1Z1ZEdsMGVTSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWQyOXliR1FpTENKZmFXUWlMQ0oxZFdsa2RqUWlMQ0pmZDI5eWJHUWlMQ0poWkdSVVlXY2lMQ0pvWVhOVVlXY2lMQ0puWlhSQmJHd2lMQ0p5WlcxdmRtVlVZV2NpTENKamJHVmhjaUlzSW1Oc1pXRnlWR0ZuY3lJc0ltVnVkSEpwWlhNaUxDSmtaWE4wY205NUlpd2lkR0ZuY3lJc0ltTnlaV0YwWlVWdWRHbDBlU0lzSW1OeVpXRjBaVk41YzNSbGJTSXNJbk41YzNSbGJVWjFibU1pTENKcGJtUmxlQ0lzSW1OVWVYQmxRWEp5Y3lJc0ltRnlaM01pTENKcGMwWnBjbk4wSWl3aWFYTk1ZWE4wSWl3aVEyOXRjRzl1Wlc1MElpd2ljM1J2Y21GblpTSXNJbXRsZVNJc0luWmhiQ0lzSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpYm1WNGRGWmhiQ0lzSWt4cFptVkRlV05zWlVOdmJYQnZibVZ1ZENJc0lsOTBZWEpuWlhRaUxDSndjbTl3SWl3aVgzSmxZMlZwZG1WeUlpd2ljM1J2Y21GblpWZHBiR3hDWlVGalkyVnpjMlZrSWl3aWIyNVRkRzl5WVdkbFFXTmpaWE56SWl3aWMzUnZjbUZuWlZkaGMwRmpZMlZ6YzJWa0lpd2lkR0Z5WjJWMElpd2ljM1J2Y21GblpWTm9iM1ZzWkZWd1pHRjBaU0lzSW5OMGIzSmhaMlZYYVd4c1ZYQmtZWFJsSWl3aWNISmxkbFpoYkhWbElpd2ljM1J2Y21GblpVUnBaRlZ3WkdGMFpTSXNJbEJ5YjNoNUlpd2lhR0Z1Wkd4bFUzUnZjbUZuWlZCeWIzQkJZMk5sYzNNaUxDSm9ZVzVrYkdWVGRHOXlZV2RsVUhKdmNFTm9ZVzVuWlNJc0lsOXdjbTl3SWl3aVgzWmhiSFZsSWl3aVgyNWxlSFJXWVd4MVpTSXNJbDl3Y21WMlZtRnNkV1VpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3UVVGTlpTeE5RVUZOUVN4dFFrRkJUaXhEUVVFNFFqdEJRVUZCTzBGQlFVRXNkME5CUTBVc1NVRkJTVU1zUjBGQlNpeEZRVVJHT3p0QlFVRkJMR2xEUVVkd1EwTXNVMEZCUkN4SlFVRnZRenRCUVVONFF5eFhRVUZMUXl4VlFVRk1MRU5CUVdkQ1F5eEhRVUZvUWl4RFFVRnZRa1lzVTBGQlV5eERRVUZEUnl4SlFVRTVRaXhGUVVGdlEwZ3NVMEZCY0VNN1FVRkRSQ3hMUVV3d1F6czdRVUZCUVN4dlEwRlBiRU1zUTBGQlEwa3NTMEZCUkN4RlFVRlpReXhKUVVGYUxFdEJRV2RGTzBGQlEzWkZMRlZCUVVrc1MwRkJTMG9zVlVGQlRDeERRVUZuUWtzc1IwRkJhRUlzUTBGQmIwSkdMRXRCUVhCQ0xFTkJRVW9zUlVGQlowTTdRVUZET1VJc1kwRkJUVWNzUTBGQlF5eEhRVUZITEV0QlFVdE9MRlZCUVV3c1EwRkJaMEpQTEVkQlFXaENMRU5CUVc5Q1NpeExRVUZ3UWl4RFFVRldPenRCUVVWQkxGbEJRVWxITEVOQlFVb3NSVUZCVHp0QlFVTk1MR2RDUVVGTlJTeG5Ra0ZCWjBJc1IwRkJSMG9zU1VGQlNTeERRVUZEUlN4RFFVRkVMRU5CUVRkQ08wRkJRMEVzWlVGQlMwNHNWVUZCVEN4RFFVRm5Ra01zUjBGQmFFSXNRMEZCYjBKRkxFdEJRWEJDTEVWQlFUSkNTeXhuUWtGQk0wSTdRVUZEUkR0QlFVTkdPMEZCUTBZc1MwRm9RakJET3p0QlFVRkJMRzlEUVd0Q2FrTk1MRXRCUVVRc1NVRkJjVUk3UVVGRE5VSXNWVUZCU1N4TFFVRkxTQ3hWUVVGTUxFTkJRV2RDU3l4SFFVRm9RaXhEUVVGdlFrWXNTMEZCY0VJc1EwRkJTaXhGUVVGblF6dEJRVU01UWl4alFVRk5TaXhUUVVGVExFZEJRVWNzUzBGQlMwTXNWVUZCVEN4RFFVRm5RazhzUjBGQmFFSXNRMEZCYjBKS0xFdEJRWEJDTEVOQlFXeENPenRCUVVWQkxGbEJRVWxLTEZOQlFVb3NSVUZCWlR0QlFVTmlRU3h0UWtGQlV5eERRVUZEVlN4UlFVRldPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFhRVUZMVkN4VlFVRk1MRU5CUVdkQ1ZTeE5RVUZvUWl4RFFVRjFRbEFzUzBGQmRrSTdRVUZEUkN4TFFUVkNNRU03TzBGQlFVRXNhVU5CT0VKcVEwRXNTMEZCU2l4SlFVRnhRanRCUVVONlFpeFZRVUZKTEVOQlFVTXNTMEZCUzBnc1ZVRkJUQ3hEUVVGblFrc3NSMEZCYUVJc1EwRkJiMEpHTEV0QlFYQkNMRU5CUVV3c1JVRkJhVU03UVVGREwwSXNZMEZCVFN4SlFVRkpVU3hMUVVGS0xFTkJRVmNzZFVSQlFYTkVVaXhMUVVGTkxFVkJRWFpGTEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hoUVVGUExFdEJRVXRJTEZWQlFVd3NRMEZCWjBKUExFZEJRV2hDTEVOQlFXOUNTaXhMUVVGd1FpeERRVUZRTzBGQlEwUXNTMEZ3UXpCRE96dEJRVUZCTEdsRFFYTkRjRU5CTEV0QlFVUXNTVUZCSzBJN1FVRkRia01zVlVGQlNWTXNTMEZCU3l4RFFVRkRReXhQUVVGT0xFTkJRV05XTEV0QlFXUXNRMEZCU2l4RlFVRXdRanRCUVVONFFpeGxRVUZQUVN4TFFVRkxMRU5CUVVOWExFdEJRVTRzUTBGQllVTXNSVUZCUkN4SlFVRlJMRXRCUVV0bUxGVkJRVXdzUTBGQlowSkxMRWRCUVdoQ0xFTkJRVzlDVlN4RlFVRndRaXhOUVVFMFFpeEpRVUZvUkN4RFFVRlFPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlR5eExRVUZMWml4VlFVRk1MRU5CUVdkQ1N5eEhRVUZvUWl4RFFVRnZRa1lzUzBGQmNFSXNRMEZCVUR0QlFVTkVPMEZCUTBZc1MwRTFRekJETzBGQlFVRTdPMEZCT0VNelF5eE5RVUZKWVN4alFVRktMRWRCUVRKQ08wRkJRM3BDTEZkQlFVOHNRMEZCUXl4SFFVRkhMRXRCUVV0b1FpeFZRVUZNTEVOQlFXZENhVUlzU1VGQmFFSXNSVUZCU2l4RFFVRlFPMEZCUTBRN08wRkJSVVFzVFVGQlNVTXNTVUZCU2l4SFFVRnRRanRCUVVOcVFpeFhRVUZQTEV0QlFVdHNRaXhWUVVGTUxFTkJRV2RDYTBJc1NVRkJka0k3UVVGRFJEczdRVUZ3UkRCRExFTTdPenM3UVVOSU4wTTdRVUZqWlN4TlFVRk5ReXhYUVVGT0xFTkJRV2RDTzBGQlFVRTdRVUZCUVN4MVJFRkRhME1zU1VGQlNYSkNMRWRCUVVvc1JVRkViRU03TzBGQlFVRXNNa05CUjFNc1NVRkJTVUVzUjBGQlNpeEZRVWhVT3p0QlFVRkJMRzFFUVV0blFpeEpRVUZKUVN4SFFVRktMRVZCVEdoQ096dEJRVUZCTEdsRVFVOWhMRWxCUVVsQkxFZEJRVW9zUlVGUVlqczdRVUZCUVN4MVEwRlpja0p6UWl4VFFVRkVMRWxCUVhGRU8wRkJRekZFTEZkQlFVc3NUVUZCVFVNc1RVRkJXQ3hKUVVGeFFpeExRVUZMUXl4UlFVRk1MRU5CUVdORExFMUJRV1FzUlVGQmNrSXNSVUZCTmtNN1FVRkRNME1zV1VGQlNVZ3NVMEZCVXl4RFFVRkRReXhOUVVGRUxFTkJRV0lzUlVGQmRVSTdRVUZEY2tJc2FVSkJRVTlCTEUxQlFWQTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVThzU1VGQlVEdEJRVU5FTEV0QmNFSTBRanM3UVVGQlFTd3dRMEY1UW14Q1JDeFRRVUZFTEVsQlFXZEVPMEZCUTNoRUxGbEJRVTFKTEU5QlFYRkNMRWRCUVVjc1JVRkJPVUk3TzBGQlJVRXNWMEZCU3l4TlFVRk5TQ3hOUVVGWUxFbEJRWEZDTEV0QlFVdERMRkZCUVV3c1EwRkJZME1zVFVGQlpDeEZRVUZ5UWl4RlFVRTJRenRCUVVNelF5eFpRVUZKU0N4VFFVRlRMRU5CUVVORExFMUJRVVFzUTBGQllpeEZRVUYxUWp0QlFVTnlRa2NzYVVKQlFVOHNRMEZCUTBNc1NVRkJVaXhEUVVGaFNpeE5RVUZpTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hoUVVGUFJ5eFBRVUZRTzBGQlEwUXNTMEZ1UXpSQ096dEJRVUZCTEhsRFFYZERia0pGTEUxQlFVUXNTVUZCTUVNN1FVRkRha1FzVjBGQlN5eE5RVUZOVEN4TlFVRllMRWxCUVhGQ0xFdEJRVXRETEZGQlFVd3NRMEZCWTBNc1RVRkJaQ3hGUVVGeVFpeEZRVUUyUXp0QlFVTXpReXhaUVVGSlJpeE5RVUZOTEVOQlFVTnlRaXhWUVVGUUxFTkJRV3RDU3l4SFFVRnNRaXhEUVVGelFuRkNMRTFCUVhSQ0xFTkJRVW9zUlVGQmJVTTdRVUZEYWtNc2FVSkJRVTlNTEUxQlFWQTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVThzU1VGQlVEdEJRVU5FTEV0QmFFUTBRanM3UVVGQlFTdzBRMEZ4UkdoQ1N5eE5RVUZFTEVsQlFYRkRPMEZCUXk5RExGbEJRVTFHTEU5QlFYRkNMRWRCUVVjc1JVRkJPVUk3TzBGQlJVRXNWMEZCU3l4TlFVRk5TQ3hOUVVGWUxFbEJRWEZDTEV0QlFVdERMRkZCUVV3c1EwRkJZME1zVFVGQlpDeEZRVUZ5UWl4RlFVRTJRenRCUVVNelF5eFpRVUZKUml4TlFVRk5MRU5CUVVOeVFpeFZRVUZRTEVOQlFXdENTeXhIUVVGc1FpeERRVUZ6UW5GQ0xFMUJRWFJDTEVOQlFVb3NSVUZCYlVNN1FVRkRha05HTEdsQ1FVRlBMRU5CUVVORExFbEJRVklzUTBGQllVb3NUVUZCWWp0QlFVTkVPMEZCUTBZN08wRkJSVVFzWVVGQlQwY3NUMEZCVUR0QlFVTkVMRXRCTDBRMFFqczdRVUZCUVN4MVEwRjNSV3hDY2tJc1MwRkJTaXhKUVVGeFJEdEJRVU14UkN4WlFVRk5hMElzVFVGQlRTeEhRVUZITEV0QlFVdE5MRTFCUVV3c1EwRkJXWGhDTEV0QlFWb3NRMEZCWmpzN1FVRkZRU3hWUVVGSmEwSXNUVUZCU2l4RlFVRlpPMEZCUTFZc1kwRkJUVThzUlVGQlJTeEhRVU5PTEV0QlFVdERMRzlDUVVGTUxFTkJRVEJDZEVJc1IwRkJNVUlzUTBGQk9FSmpMRTFCUVUwc1EwRkJRMU1zUlVGQmNrTXNTMEZEUVN4SlFVRkpha01zYlVKQlFVb3NSVUZHUmp0QlFVbEJMR05CUVUxRkxGTkJRVk1zUjBGQlJ6WkNMRVZCUVVVc1EwRkJRM0pDTEVkQlFVZ3NRMEZCVlVvc1MwRkJWaXhEUVVGc1FqdEJRVVZCTEdWQlFVODdRVUZEVEd0Q0xHZENRVVJMTzBGQlJVeDBRanRCUVVaTExGTkJRVkE3UVVGSlJEczdRVUZGUkN4aFFVRlBMRWxCUVZBN1FVRkRSQ3hMUVhwR05FSTdPMEZCUVVFc2VVTkJiVWR3UWl4RFFVTlFTU3hMUVVSUExFVkJSVkJwUWl4VFFVWlBMRXRCUnl0Q08wRkJRM1JETEZsQlFVMUZMRkZCUVZFc1IwRkJSeXhMUVVGTFV5eFRRVUZNTEVOQlFXVTFRaXhMUVVGbUxFTkJRV3BDT3p0QlFVVkJMRmRCUVVzc1RVRkJUV3RDTEUxQlFWZ3NTVUZCY1VKRExGRkJRWEpDTEVWQlFTdENPMEZCUXpkQ0xHTkJRVTFOTEVWQlFVVXNSMEZEVGl4TFFVRkxReXh2UWtGQlRDeERRVUV3UW5SQ0xFZEJRVEZDTEVOQlFUaENZeXhOUVVGTkxFTkJRVU5UTEVWQlFYSkRMRXRCUTBFc1NVRkJTV3BETEcxQ1FVRktMRVZCUmtZN1FVRkpRU3hqUVVGTlJTeFRRVUZUTEVkQlFVYzJRaXhGUVVGRkxFTkJRVU55UWl4SFFVRklMRU5CUVZWS0xFdEJRVllzUTBGQmJFSTdPMEZCUlVFc1dVRkJTV2xDTEZOQlFWTXNRMEZCUTNKQ0xGTkJRVVFzUTBGQllpeEZRVUV3UWp0QlFVTjRRaXhwUWtGQlR6dEJRVU5NUVN4eFFrRkVTenRCUVVWTWMwSTdRVUZHU3l4WFFVRlFPMEZCU1VRN1FVRkRSanM3UVVGRlJDeGhRVUZQTEVsQlFWQTdRVUZEUkN4TFFYcElORUk3TzBGQlFVRXNNRU5CT0VobWJFSXNTMEZCU2l4SlFVRm5SRHRCUVVONFJDeGhRVUZQTEV0QlFVczBRaXhUUVVGTUxFTkJRV1UxUWl4TFFVRm1MRVZCUVhOQ05rSXNSMEZCZEVJc1EwRkJNa0pZTEUxQlFVUXNTMEZCWVR0QlFVTTFRMEVzWTBGRU5FTTdRVUZGTlVOMFFpeHBRa0ZCVXl4RlFVRkhjMElzVFVGQlRTeERRVUZEY2tJc1ZVRkJVQ3hEUVVGclFrOHNSMEZCYkVJc1EwRkJjMEpLTEV0QlFYUkNPMEZCUm1kRExFOUJRV0lzUTBGQk1VSXNRMEZCVUR0QlFVbEVMRXRCYmtrMFFqczdRVUZCUVN4elEwRjNTWFpDTEVOQlFVazRRaXhIUVVGS0xFVkJRVzFDT1VJc1MwRkJia0lzUzBGQmIwTTdRVUZEZUVNc1dVRkJUWGxDTEVWQlFVVXNSMEZEVGl4TFFVRkxReXh2UWtGQlRDeERRVUV3UW5SQ0xFZEJRVEZDTEVOQlFUaENNRUlzUjBGQk9VSXNTMEZCYzBNc1NVRkJTWEJETEcxQ1FVRktMRVZCUkhoRE8wRkJSMEVzWVVGQlR5dENMRVZCUVVVc1EwRkJRM0pDTEVkQlFVZ3NRMEZCVlVvc1MwRkJWaXhEUVVGUU8wRkJRMFFzUzBFM1NUUkNPenRCUVVGQkxEUkRRV3RLYUVJclFpeEhRVUZFTEVsQlFXbERPMEZCUXpORExGbEJRVTFETEZsQlFWa3NSMEZCUnl4TFFVRkxReXhqUVVGTUxFTkJRVzlDTjBJc1IwRkJjRUlzUTBGQmQwSXlRaXhIUVVGNFFpeERRVUZ5UWpzN1FVRkZRU3hWUVVGSlF5eFpRVUZLTEVWQlFXdENPMEZCUTJoQ0xHTkJRVTFGTEZGQlFWRXNSMEZCUjBZc1dVRkJXU3hEUVVGRFdpeE5RVUZpTEVkQlFYTkNaU3hKUVVGMFFpeEhRVUUyUWtNc1MwRkJPVU03UVVGRlFTeGpRVUZOYkVJc1RVRkJUU3hIUVVGSExFdEJRVXRETEZGQlFVd3NRMEZCWTJZc1IwRkJaQ3hEUVVGclFqaENMRkZCUVd4Q0xFTkJRV1k3TzBGQlJVRXNXVUZCU1doQ0xFMUJRVW9zUlVGQldUdEJRVU5XTEdsQ1FVRlBRU3hOUVVGUU8wRkJRMFE3UVVGRFJqczdRVUZGUkN4aFFVRlBMRWxCUVZBN1FVRkRSQ3hMUVdoTE5FSTdPMEZCUVVFc0swTkJhMHRpWVN4SFFVRkVMRWxCUVRSQ08wRkJRM3BETEZWQlFVbGFMRkZCUVhOQ0xFZEJRVWNzUlVGQk4wSXNRMEZFZVVNc1EwRkRVanM3UVVGRmFrTXNXVUZCVFdFc1dVRkJXU3hIUVVGSExFdEJRVXRETEdOQlFVd3NRMEZCYjBJM1FpeEhRVUZ3UWl4RFFVRjNRakpDTEVkQlFYaENMRU5CUVhKQ096dEJRVVZCTEZWQlFVbERMRmxCUVVvc1JVRkJhMEk3UVVGRGFFSXNZVUZCU3l4TlFVRk5SU3hSUVVGWUxFbEJRWFZDUml4WlFVRjJRaXhGUVVGeFF6dEJRVU51UXl4blFrRkJUV1FzVFVGQlRTeEhRVUZITEV0QlFVdERMRkZCUVV3c1EwRkJZMllzUjBGQlpDeERRVUZyUWpoQ0xGRkJRV3hDTEVOQlFXWTdPMEZCUTBFc1kwRkJTV2hDTEUxQlFVb3NSVUZCV1R0QlFVTldReXh2UWtGQlVTeERRVUZEUnl4SlFVRlVMRU5CUVdOS0xFMUJRV1E3UVVGRFJEdEJRVU5HTzBGQlEwWTdPMEZCUlVRc1lVRkJUME1zVVVGQlVEdEJRVU5FTEV0QmFrdzBRanM3UVVGQlFTeHpRMEZ6VEhaQ0xFTkJRVU5YTEVkQlFVUXNSVUZCWjBKc1F5eFRRVUZvUWl4TFFVRjNSRHRCUVVNMVJDeFpRVUZOTmtJc1JVRkJSU3hIUVVOT0xFdEJRVXRETEc5Q1FVRk1MRU5CUVRCQ2RFSXNSMEZCTVVJc1EwRkJPRUl3UWl4SFFVRTVRaXhMUVVGelF5eEpRVUZKY0VNc2JVSkJRVW9zUlVGRWVFTTdRVUZIUVN0Q0xGRkJRVVVzUTBGQlExa3NSMEZCU0N4RFFVRlBla01zVTBGQlVEdEJRVVZCTEZkQlFVczRRaXh2UWtGQlRDeERRVUV3UWpWQ0xFZEJRVEZDTEVOQlFUaENaME1zUjBGQk9VSXNSVUZCYlVOTUxFVkJRVzVET3p0QlFVVkJMRmRCUVVzc1RVRkJUU3hEUVVGRFlTeExRVUZFTEVWQlFWRkRMRk5CUVZJc1EwRkJXQ3hKUVVGcFF5eExRVUZMUXl4blFrRkJkRU1zUlVGQmQwUTdRVUZEZEVRc1dVRkJTVVlzUzBGQlN5eERRVUZETTBJc1MwRkJUaXhEUVVGWll5eEZRVUZGTEVOQlFVTjJRaXhIUVVGbUxFTkJRVW9zUlVGQmVVSTdRVUZEZGtKeFF5eHRRa0ZCVXl4RFFVRkRSaXhIUVVGV0xFTkJRV05RTEVkQlFXUTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVThzU1VGQlVEdEJRVU5FTEV0QmNrMDBRanM3UVVGQlFTeDVRMEV5VFhCQ0xFTkJRVU5CTEVkQlFVUXNSVUZCWjBJNVFpeExRVUZvUWl4TFFVRnZRenRCUVVNelF5eFpRVUZOZVVJc1JVRkJSU3hIUVVOT0xFdEJRVXRETEc5Q1FVRk1MRU5CUVRCQ2RFSXNSMEZCTVVJc1EwRkJPRUl3UWl4SFFVRTVRaXhMUVVGelF5eEpRVUZKY0VNc2JVSkJRVW9zUlVGRWVFTXNRMEZFTWtNc1EwRkpNME03TzBGQlEwRXNWMEZCU3l4TlFVRk5MRU5CUVVNMFF5eExRVUZFTEVWQlFWRkRMRk5CUVZJc1EwRkJXQ3hKUVVGcFF5eExRVUZMUXl4blFrRkJkRU1zUlVGQmQwUTdRVUZEZEVRc1dVRkJTVVlzUzBGQlN5eERRVUZETTBJc1MwRkJUaXhEUVVGWll5eEZRVUZGTEVOQlFVTjJRaXhIUVVGbUxFTkJRVW9zUlVGQmVVSTdRVUZEZGtKeFF5eHRRa0ZCVXl4RFFVRkRhRU1zVFVGQlZpeERRVUZwUW5WQ0xFZEJRV3BDTzBGQlEwUTdRVUZEUmpzN1FVRkZSRXdzVVVGQlJTeERRVUZEWjBJc1RVRkJTQ3hEUVVGVmVrTXNTMEZCVml4RlFWZ3lReXhEUVdFelF6czdRVUZEUVN4WFFVRkxMRTFCUVUwc1EwRkJRM05ETEV0QlFVUXNSVUZCVVVNc1UwRkJVaXhEUVVGWUxFbEJRV2xETEV0QlFVdERMR2RDUVVGMFF5eEZRVUYzUkR0QlFVTjBSQ3haUVVGSlJpeExRVUZMTEVOQlFVTXpRaXhMUVVGT0xFTkJRVmxqTEVWQlFVVXNRMEZCUTNaQ0xFZEJRV1lzUTBGQlNpeEZRVUY1UWp0QlFVTjJRbkZETEcxQ1FVRlRMRU5CUVVOR0xFZEJRVllzUTBGQlkxQXNSMEZCWkR0QlFVTkVPMEZCUTBZN1FVRkRSaXhMUVRsT05FSTdRVUZCUVRzN1FVRm5UemRDT3pzN1FVRkhRVmtzWjBKQlFXTXNRMEZCUTI1Q0xFMUJRVVFzUlVGQk1FSTdRVUZEZEVNc1UwRkJTMmxDTEdkQ1FVRk1MRU5CUVhOQ01VTXNSMEZCZEVJc1EwRkJNRUo1UWl4TlFVRXhRaXhGUVVGclF5eEpRVUZKYjBJc1IwRkJTaXhGUVVGc1F6dEJRVVZCTEZkQlFVOHNTVUZCVUR0QlFVTkVPenRCUVVWRVF5eG5Ra0ZCWXl4RFFVRkRNVUlzVFVGQlJDeEZRVUZuUXp0QlFVTTFReXhWUVVGTlR5eEZRVUZGTEVkQlFVY3NTVUZCU1M5Q0xHMUNRVUZLTEVWQlFWZzdRVUZGUVN4VFFVRkxaME1zYjBKQlFVd3NRMEZCTUVJMVFpeEhRVUV4UWl4RFFVRTRRbTlDTEUxQlFVMHNRMEZCUTFNc1JVRkJja01zUlVGQmVVTkdMRVZCUVhwRE8wRkJRMEVzVTBGQlMwNHNVVUZCVEN4RFFVRmpja0lzUjBGQlpDeERRVUZyUW05Q0xFMUJRVTBzUTBGQlExTXNSVUZCZWtJc1JVRkJOa0pVTEUxQlFUZENPMEZCUlVFc1YwRkJUeXhKUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3UVVGSFFUSkNMSFZDUVVGeFFpeERRVUZEWml4SFFVRkVMRVZCUVRKQ08wRkJRemxETEZOQlFVdEtMRzlDUVVGTUxFTkJRVEJDTlVJc1IwRkJNVUlzUTBGQk9FSm5ReXhIUVVFNVFpeEZRVUZ0UXl4SlFVRkpjRU1zYlVKQlFVb3NSVUZCYmtNN08wRkJSVUVzVTBGQlN5eE5RVUZOTmtNc1UwRkJXQ3hKUVVGM1FpeExRVUZMUXl4blFrRkJUQ3hEUVVGelFuQkNMRTFCUVhSQ0xFVkJRWGhDTEVWQlFYZEVPMEZCUTNSRUxGVkJRVWx0UWl4VFFVRlRMRU5CUVVOeVF5eEhRVUZXTEVOQlFXTTBRaXhIUVVGa0xFTkJRVW9zUlVGQmQwSTdRVUZEZEVKVExHbENRVUZUTEVOQlFVTm9ReXhOUVVGV0xFTkJRV2xDZFVJc1IwRkJha0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRmRCUVU4c1NVRkJVRHRCUVVORU8wRkJSVVE3T3pzN096dEJRVWxCWjBJc1pVRkJZU3hEUVVGRGFFSXNSMEZCUkN4RlFVRXlRanRCUVVOMFF5eFRRVUZMU2l4dlFrRkJUQ3hEUVVFd1FtNUNMRTFCUVRGQ0xFTkJRV2xEZFVJc1IwRkJha003UVVGRFFTeFRRVUZMV0N4UlFVRk1MRU5CUVdOYUxFMUJRV1FzUTBGQmNVSjFRaXhIUVVGeVFqczdRVUZGUVN4VFFVRkxMRTFCUVUxVExGTkJRVmdzU1VGQmQwSXNTMEZCUzBNc1owSkJRVXdzUTBGQmMwSndRaXhOUVVGMFFpeEZRVUY0UWl4RlFVRjNSRHRCUVVOMFJDeFZRVUZKYlVJc1UwRkJVeXhEUVVGRGNrTXNSMEZCVml4RFFVRmpORUlzUjBGQlpDeERRVUZLTEVWQlFYZENPMEZCUTNSQ1V5eHBRa0ZCVXl4RFFVRkRhRU1zVFVGQlZpeERRVUZwUW5WQ0xFZEJRV3BDTzBGQlEwUTdRVUZEUml4TFFWSnhReXhEUVZWMFF6czdPMEZCUTBFc1UwRkJTeXhOUVVGTkxFTkJRVU5ETEVkQlFVUXNSVUZCVFZFc1UwRkJUaXhEUVVGWUxFbEJRU3RDTEV0QlFVdE9MR05CUVhCRExFVkJRVzlFTzBGQlEyeEVMRlZCUVVsTkxGTkJRVk1zUTBGQlEzSkRMRWRCUVZZc1EwRkJZelJDTEVkQlFXUXNRMEZCU2l4RlFVRjNRanRCUVVOMFFsTXNhVUpCUVZNc1EwRkJRMmhETEUxQlFWWXNRMEZCYVVKMVFpeEhRVUZxUWp0QlFVTkVPenRCUVVWRUxGVkJRVWxUTEZOQlFWTXNRMEZCUTNoQ0xFbEJRVllzUzBGQmJVSXNRMEZCZGtJc1JVRkJNRUk3UVVGRGVFSXNZVUZCUzJ0Q0xHTkJRVXdzUTBGQmIwSXhRaXhOUVVGd1FpeERRVUV5UW5kQ0xFZEJRVE5DTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hYUVVGUExFbEJRVkE3UVVGRFJEczdRVUV6VWpSQ0xFTTdPMEZEYWtJdlFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVObE8wRkJRMlk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1F6czdRVU5pUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEZOQlFWTXNZVUZCUXl4TFFVRkxMRU5CUVVNc1lVRkJReXhQUVVGUExFZEJRVWNzWVVGQlF6dEJRVU0xUWl4clFrRkJhMElzWVVGQlF6dEJRVU51UWpzN1FVRkZRVHRCUVVOQkxEUkNRVUUwUWp0QlFVTTFRanM3UVVGRlFUdEJRVU5CT3p0QlFVVmxMSFZGUVVGWExFVTdPMEZEYWtKRE8wRkJRMmRDT3p0QlFVVXpRenRCUVVOQk8wRkJRMEVzSzBOQlFTdERMRWRCUVVjc1NVRkJTVHM3UVVGRmRFUTdRVUZEUVN4clEwRkJhME03TzBGQlJXeERPMEZCUTBFN08wRkJSVUVzYlVKQlFXMUNMRkZCUVZFN1FVRkRNMEk3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxGTkJRVk1zZFVKQlFWYzdRVUZEY0VJN08wRkJSV1VzY1VSQlFVVXNSVHM3T3p0QlEzWkNha0k3UVVGSFFUdEJRVXRsTEUxQlFVMW5RaXhoUVVGT0xFTkJRV2xDTzBGQlNUbENReXhoUVVGWExFTkJRVU5ETEV0QlFVUXNSVUZCYlVJN1FVRkJRVHM3UVVGQlFUczdRVUZETlVJc1UwRkJTME1zUjBGQlRDeEhRVUZYUXl4alFVRk5MRVZCUVdwQ08wRkJRMEVzVTBGQlMwTXNUVUZCVEN4SFFVRmpTQ3hMUVVGa08wRkJSVUU3T3pzN1FVRkhRU3hUUVVGTFJ5eE5RVUZNTEVOQlFWbFNMR05CUVZvc1EwRkJNa0lzU1VGQk0wSTdRVUZEUkR0QlFVVkVPenM3T3p0QlFVZEJVQ3hMUVVGSExFTkJRVU42UXl4VFFVRkVMRVZCUVhWRE8wRkJRM2hETEZOQlFVdDNSQ3hOUVVGTUxFTkJRVmwwUkN4SFFVRmFMRU5CUVdkQ0xFdEJRVXR2UkN4SFFVRnlRaXhGUVVFd1FuUkVMRk5CUVRGQ096dEJRVVZCTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN096czdPMEZCUjBGNVJDeFJRVUZOTEVOQlFVTjBRaXhIUVVGRUxFVkJRWFZDTzBGQlF6TkNMRlZCUVUxUkxGTkJRVk1zUjBGQlJ5eExRVUZMWVN4TlFVRk1MRU5CUVZsdVFpeGpRVUZhTEVOQlFUSkNMMElzUjBGQk0wSXNRMEZCSzBJMlFpeEhRVUV2UWl4SlFVTmtMRXRCUVV0eFFpeE5RVUZNTEVOQlFWbHVRaXhqUVVGYUxFTkJRVEpDTjBJc1IwRkJNMElzUTBGQkswSXlRaXhIUVVFdlFpeERRVVJqTEVkQlJXUXNTVUZCU1Zrc1IwRkJTaXhGUVVaS096dEJRVWxCTEZGQlFVbEtMRk5CUVVvc1JVRkJaVHRCUVVOaVFTeGxRVUZUTEVOQlFVTkdMRWRCUVZZc1EwRkJZeXhMUVVGTFlTeEhRVUZ1UWpzN1FVRkRRU3hYUVVGTFJTeE5RVUZNTEVOQlFWbHVRaXhqUVVGYUxFTkJRVEpDYmtNc1IwRkJNMElzUTBGQkswSnBReXhIUVVFdlFpeEZRVUZ2UTFFc1UwRkJjRU03UVVGRFJEczdRVUZGUkN4WFFVRlBMRWxCUVZBN1FVRkRSRHRCUVVWRU96czdPenRCUVVkQmNrTXNTMEZCUnl4RFFVRkRSaXhMUVVGRUxFVkJRWEZDTzBGQlEzUkNMRlZCUVUxNVFpeEZRVUZGTEVkQlFVY3NTMEZCU3pKQ0xFMUJRVXdzUTBGQldURkNMRzlDUVVGYUxFTkJRV2xEZEVJc1IwRkJha01zUTBGQmNVTXNTMEZCU3poRExFZEJRVEZETEV0QlFXdEVMRWxCUVVsNFJDeHRRa0ZCU2l4RlFVRTNSRHRCUVVWQkxGZEJRVThyUWl4RlFVRkZMRU5CUVVOMlFpeEhRVUZJTEVOQlFVOUdMRXRCUVZBc1EwRkJVRHRCUVVORU8wRkJSVVE3T3pzN08wRkJSMEZ6UkN4UlFVRk5MRU5CUVVOMlFpeEhRVUZFTEVWQlFXOUNPMEZCUTNoQ0xGRkJRVWtzUzBGQlMzRkNMRTFCUVV3c1EwRkJXVzVDTEdOQlFWb3NRMEZCTWtJdlFpeEhRVUV6UWl4RFFVRXJRalpDTEVkQlFTOUNMRU5CUVVvc1JVRkJlVU03UVVGRGRrTXNXVUZCVFZFc1UwRkJVeXhIUVVGSExFdEJRVXRoTEUxQlFVd3NRMEZCV1c1Q0xHTkJRVm9zUTBGQk1rSTNRaXhIUVVFelFpeERRVUVyUWpKQ0xFZEJRUzlDTEVOQlFXeENPenRCUVVOQkxGVkJRVWxSTEZOQlFVb3NSVUZCWlR0QlFVTmlMR1ZCUVU5QkxGTkJRVk1zUTBGQlEzSkRMRWRCUVZZc1EwRkJZeXhMUVVGTFowUXNSMEZCYmtJc1EwRkJVRHRCUVVORU8wRkJRMFk3TzBGQlJVUXNWMEZCVHl4TFFVRlFPMEZCUTBRN1FVRkZSRHM3T3pzN1FVRkhRVGxETEV0QlFVY3NRMEZCU1Vvc1MwRkJTaXhGUVVGclFqdEJRVU51UWl4VlFVRk5lVUlzUlVGQlJTeEhRVUZITEV0QlFVc3lRaXhOUVVGTUxFTkJRVmt4UWl4dlFrRkJXaXhEUVVGcFEzUkNMRWRCUVdwRExFTkJRWEZETEV0QlFVczRReXhIUVVFeFF5eExRVUZyUkN4SlFVRkplRVFzYlVKQlFVb3NSVUZCTjBRN1FVRkZRU3hWUVVGTlJTeFRRVUZUTEVkQlFVYzJRaXhGUVVGRkxFTkJRVU55UWl4SFFVRklMRU5CUVZWS0xFdEJRVllzUTBGQmJFSTdRVUZGUVN4WFFVRlBTaXhUUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3UVVGSFFUSkVMRkZCUVUwc1IwRkJORUk3UVVGRGFFTXNWMEZCVHl4TFFVRkxTQ3hOUVVGTUxFTkJRVmt4UWl4dlFrRkJXaXhEUVVGcFEzUkNMRWRCUVdwRExFTkJRWEZETEV0QlFVczRReXhIUVVFeFF5eExRVUZyUkN4SlFVRkplRVFzYlVKQlFVb3NSVUZCZWtRN1FVRkRSRHM3UVVGRlJDdERMRkZCUVUwc1EwRkJRM3BETEV0QlFVUXNSVUZCZDBJN1FVRkROVUlzVTBGQlMyOUVMRTFCUVV3c1EwRkJXVmdzVFVGQldpeERRVUZ0UWl4TFFVRkxVeXhIUVVGNFFpeEZRVUUyUW14RUxFdEJRVGRDT3p0QlFVVkJMRmRCUVU4c1NVRkJVRHRCUVVORU8wRkJSVVE3T3pzN08wRkJSMEYzUkN4WFFVRlRMRU5CUVVONlFpeEhRVUZFTEVWQlFXMURPMEZCUXpGRExGRkJRVWtzUzBGQlMzRkNMRTFCUVV3c1EwRkJXVzVDTEdOQlFWb3NRMEZCTWtJdlFpeEhRVUV6UWl4RFFVRXJRalpDTEVkQlFTOUNMRU5CUVVvc1JVRkJlVU03UVVGRGRrTXNXVUZCVFZFc1UwRkJVeXhIUVVGSExFdEJRVXRoTEUxQlFVd3NRMEZCV1c1Q0xHTkJRVm9zUTBGQk1rSTNRaXhIUVVFelFpeERRVUVyUWpKQ0xFZEJRUzlDTEVOQlFXeENPenRCUVVWQkxGVkJRVWxSTEZOQlFVb3NSVUZCWlR0QlFVTmlRU3hwUWtGQlV5eERRVUZEYUVNc1RVRkJWaXhEUVVGcFFpeExRVUZMTWtNc1IwRkJkRUk3TzBGQlJVRXNXVUZCU1Znc1UwRkJVeXhEUVVGRGVFSXNTVUZCVml4TFFVRnRRaXhEUVVGMlFpeEZRVUV3UWp0QlFVTjRRaXhsUVVGTGNVTXNUVUZCVEN4RFFVRlpia0lzWTBGQldpeERRVUV5UWpGQ0xFMUJRVE5DTEVOQlFXdERkMElzUjBGQmJFTTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwUTdRVUZGUkRzN08wRkJRMEV3UWl4UFFVRkxMRWRCUVdVN1FVRkRiRUlzVTBGQlMwd3NUVUZCVEN4RFFVRlpVQ3h4UWtGQldpeERRVUZyUXl4TFFVRkxTeXhIUVVGMlF6czdRVUZGUVN4WFFVRlBMRWxCUVZBN1FVRkRSRHRCUVVWRU96czdPenRCUVVkQlVTeFhRVUZUTEVkQlFXVTdRVUZEZEVJc1UwRkJTeXhOUVVGTkxFTkJRVU16UWl4SFFVRkVMRVZCUVUxUkxGTkJRVTRzUTBGQldDeEpRVUVyUWl4TFFVRkxZU3hOUVVGTUxFTkJRVmx1UWl4alFVRmFMRU5CUVRKQ01FSXNUMEZCTTBJc1JVRkJMMElzUlVGQmNVVTdRVUZEYmtWd1FpeGxRVUZUTEVOQlFVTm9ReXhOUVVGV0xFTkJRV2xDTEV0QlFVc3lReXhIUVVGMFFqczdRVUZGUVN4VlFVRkpXQ3hUUVVGVExFTkJRVU40UWl4SlFVRldMRXRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNoQ0xHRkJRVXR4UXl4TlFVRk1MRU5CUVZsdVFpeGpRVUZhTEVOQlFUSkNNVUlzVFVGQk0wSXNRMEZCYTBOM1FpeEhRVUZzUXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVjBGQlR5eEpRVUZRTzBGQlEwUTdPMEZCUlVRMlFpeFRRVUZQTEVkQlFWTTdRVUZEWkN4VFFVRkxVaXhOUVVGTUxFTkJRVmxPTEdGQlFWb3NRMEZCTUVJc1MwRkJTMGtzUjBGQkwwSTdRVUZEUkRzN1FVRkZSQ3hOUVVGSmRrSXNSVUZCU2l4SFFVRnBRanRCUVVObUxGZEJRVThzUzBGQlMzVkNMRWRCUVZvN1FVRkRSRHM3UVVGRlJDeE5RVUZKUkN4TFFVRktMRWRCUVhWQ08wRkJRM0pDTEZkQlFVOHNTMEZCUzBjc1RVRkJXanRCUVVORU8wRkJSVVE3T3pzN096dEJRVWxCTEUxQlFVbDJSQ3hWUVVGS0xFZEJRVEJETzBGQlEzaERMRmRCUVU4c1MwRkJTM1ZFTEUxQlFVd3NRMEZCV1RGQ0xHOUNRVUZhTEVOQlFXbERkRUlzUjBGQmFrTXNRMEZCY1VNc1MwRkJTemhETEVkQlFURkRMRXRCUVd0RUxFbEJRVWw0UkN4dFFrRkJTaXhGUVVGNlJEdEJRVU5FTzBGQlJVUTdPenM3TzBGQlIwRXNUVUZCU1cxRkxFbEJRVW9zUjBGQmNVSTdRVUZEYmtJc1ZVRkJUVUVzU1VGQlNTeEhRVUZITEVsQlFVbHNRaXhIUVVGS0xFVkJRV0k3TzBGQlEwRXNVMEZCU3l4TlFVRk5MRU5CUVVOYUxFZEJRVVFzUlVGQlRWRXNVMEZCVGl4RFFVRllMRWxCUVN0Q0xFdEJRVXRoTEUxQlFVd3NRMEZCV1c1Q0xHTkJRVm9zUTBGQk1rSXdRaXhQUVVFelFpeEZRVUV2UWl4RlFVRnhSVHRCUVVOdVJTeFZRVUZKY0VJc1UwRkJVeXhEUVVGRGNrTXNSMEZCVml4RFFVRmpMRXRCUVV0blJDeEhRVUZ1UWl4RFFVRktMRVZCUVRaQ08wRkJRek5DVnl4WlFVRkpMRU5CUVVONFFpeEhRVUZNTEVOQlFWTk9MRWRCUVZRN1FVRkRSRHRCUVVOR096dEJRVVZFTEZkQlFVODRRaXhKUVVGUU8wRkJRMFE3TzBGQk9VbzJRanRCUVdsTGVrSXNVMEZCVTBNc1dVRkJWQ3hEUVVOTVlpeExRVVJMTEVWQlJVODdRVUZEV2l4UlFVRk5MMElzVFVGQlRTeEhRVUZITEVsQlFVazJRaXhoUVVGS0xFTkJRV1ZGTEV0QlFXWXNRMEZCWmp0QlFVVkJMRk5CUVU4dlFpeE5RVUZRTzBGQlEwUXNRenM3UVVNNVMwUTdRVUZEUVRzN1FVRTJRMEU3T3pzN096czdRVUZQVHl4VFFVRlROa01zV1VGQlZDeERRVU5NWkN4TFFVUkxMRVZCUlV3eFFpeE5RVVpMTEVWQlIweDVReXhWUVVoTExFVkJTVWM3UVVGRFVtWXNUMEZCU3l4RFFVRkRVQ3hqUVVGT0xFTkJRWEZDYmtJc1RVRkJja0k3UVVGRlFTeFRRVUZQTEUxQlFWazdRVUZEYWtJc1VVRkJTVEJETEV0QlFVc3NSMEZCUnl4RFFVRmFPMEZCUTBFc1ZVRkJUV3hFTEVsQlFVa3NSMEZCUjJ0RExFdEJRVXNzUTBGQlExUXNaMEpCUVU0c1EwRkJkVUo2UWl4SlFVRndReXhEUVVacFFpeERRVWxxUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFZRVUZOYlVRc1UwRkJVeXhIUVVGSGFrSXNTMEZCU3l4RFFVRkRWQ3huUWtGQlRpeERRVUYxUW5CRExFZEJRWFpDTEVOQlFUSkNiVUlzVFVGQk0wSXNTMEZCYzBNc1NVRkJTVzlDTEVkQlFVb3NSVUZCZUVRN08wRkJSVUVzVTBGQlN5eE5RVUZOWWl4SFFVRllMRWxCUVd0Q2IwTXNVMEZCYkVJc1JVRkJOa0k3UVVGRE0wSXNXVUZCVFVNc1NVRkJkMElzUjBGQlJ6dEJRVU12UW1wRUxHTkJRVTBzUlVGQlJTdENMRXRCUVVzc1EwRkJRemxDTEZGQlFVNHNRMEZCWldZc1IwRkJaaXhEUVVGdFFqQkNMRWRCUVc1Q0xFdEJRVEpDTEVsQlFVbHBRaXhoUVVGS0xFTkJRV1ZGTEV0QlFXWXNRMEZFU2p0QlFVVXZRbkJFTEd0Q1FVRlZMRVZCUVVWdlJDeExRVUZMTEVOQlFVTjJRaXh2UWtGQlRpeERRVUV5UW5SQ0xFZEJRVE5DTEVOQlFTdENNRUlzUjBGQkwwSXNTMEZCZFVNc1NVRkJTWEJETEcxQ1FVRktMRVZCUm5CQ08wRkJSeTlDZFVRc1lVRklLMEk3UVVGSkwwSm5RaXhoUVVvclFqdEJRVXN2UW14RUxGbEJUQ3RDTzBGQlRTOUNjVVFzWlVGQlR5eEZRVUZGU0N4TFFVRkxMRXRCUVVzc1EwRk9XVHRCUVU4dlFra3NZMEZCVFN4RlFVRkZTaXhMUVVGTExFZEJRVWNzUTBGQlVpeExRVUZqYkVRN1FVRlFVeXhQUVVGcVF6dEJRVlZCYVVRc1owSkJRVlVzUTBGQlEwY3NTVUZCUkN4RFFVRldPMEZCUlVGR0xGZEJRVXNzU1VGQlNTeERRVUZVTzBGQlEwUTdRVUZEUml4SFFUbERSRHRCUVN0RFJDeERPenM3TzBGRE5VZGpMRTFCUVUxTExGTkJRVTRzUTBGQk1rTTdRVUZKZUVSMFFpeGhRVUZYTEVOQlFVTjFRaXhQUVVGRUxFVkJRV0U3UVVGQlFUczdRVUZCUVRzN1FVRkRkRUlzVTBGQlMzaEZMRWxCUVV3c1IwRkJZU3h0UWtGQllqdEJRVU5CTEZOQlFVdDNSU3hQUVVGTUxFZEJRV1ZCTEU5QlFXWTdPMEZCUlVFc1UwRkJTeXhOUVVGTkxFTkJRVU5ETEVkQlFVUXNSVUZCVFVNc1IwRkJUaXhEUVVGWUxFbEJRWGxDUXl4TlFVRk5MRU5CUVVObUxFOUJRVkFzUTBGQlpWa3NUMEZCWml4RFFVRjZRaXhGUVVGclJEdEJRVU5vUkVjc1dVRkJUU3hEUVVGRFF5eGpRVUZRTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDU0N4SFFVRTFRaXhGUVVGcFF6dEJRVU12UW5CRkxGZEJRVWNzUlVGQlJTeE5RVUZyUWp0QlFVTnlRaXhwUWtGQlR5eExRVUZMYlVVc1QwRkJUQ3hEUVVGaFF5eEhRVUZpTEVOQlFWQTdRVUZEUkN4VFFVZzRRanRCUVVrdlFqRkZMRmRCUVVjc1JVRkJSemhGTEU5QlFVUXNTVUZCSzBJN1FVRkRiRU1zWlVGQlMwd3NUMEZCVEN4RFFVRmhReXhIUVVGaUxFbEJRVzlDU1N4UFFVRndRanRCUVVORU8wRkJUamhDTEU5QlFXcERPMEZCVVVRc1MwRmljVUlzUTBGbGRFSTdPMEZCUTBRc1IwRndRblZFTEVOQmMwSjRSRHRCUVVWQk8wRkJRMEU3T3p0QlFVTkJkRVVzVlVGQlVTeEhRVUZUTEVOQlEyWTdRVUZEUkRzN1FVRTFRblZFTEVNN096czdRVU5CTTBNc1RVRkJUWFZGTEd0Q1FVRk9MRU5CUVhkRU8wRkJTWEpGTjBJc1lVRkJWeXhEUVVGRGRVSXNUMEZCUkN4RlFVRmhPMEZCUVVFN08wRkJRVUU3TzBGQlFVRXNkVVZCVlVVc1EwRkRlRUpQTEU5QlJIZENMRVZCUlhoQ1F5eEpRVVozUWl4RlFVZDRRa01zVTBGSWQwSXNTMEZKVkR0QlFVTm1MRmRCUVV0RExIRkNRVUZNTEVOQlFUSkNSaXhKUVVFelFqdEJRVVZCTEZsQlFVMU9MRWRCUVVjc1IwRkJSeXhMUVVGTFV5eGxRVUZNTEVOQlFYRkNTQ3hKUVVGeVFpeERRVUZhTzBGQlJVRXNWMEZCUzBrc2EwSkJRVXdzUTBGQmQwSktMRWxCUVhoQ08wRkJSVUVzWVVGQlQwNHNSMEZCVUR0QlFVTkVMRXRCZEVKMVFqczdRVUZCUVN4MVJVRjNRa1VzUTBGRGVFSlhMRTFCUkhkQ0xFVkJSWGhDVEN4SlFVWjNRaXhGUVVkNFFqTkRMRXRCU0hkQ0xFVkJTWGhDTkVNc1UwRktkMElzUzBGTFdqdEJRVU5hTEZWQlFVa3NTMEZCUzBzc2JVSkJRVXdzUTBGQmVVSk9MRWxCUVhwQ0xFVkJRU3RDTTBNc1MwRkJMMElzUTBGQlNpeEZRVUV5UXp0QlFVTjZReXhoUVVGTGEwUXNhVUpCUVV3c1EwRkJkVUpRTEVsQlFYWkNMRVZCUVRaQ00wTXNTMEZCTjBJN1FVRkRRU3hqUVVGTmJVUXNVMEZCVXl4SFFVRkhTQ3hOUVVGTkxFTkJRVU5NTEVsQlFVUXNRMEZCZUVJN1FVRkRRVXNzWTBGQlRTeERRVUZEVEN4SlFVRkVMRU5CUVU0c1IwRkJaVE5ETEV0QlFXWTdRVUZEUVN4aFFVRkxiMFFzWjBKQlFVd3NRMEZCYzBKVUxFbEJRWFJDTEVWQlFUUkNVU3hUUVVFMVFqdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1NVRkJVRHRCUVVORUxFdEJkRU4xUWpzN1FVRkRkRUlzVTBGQlMzaEdMRWxCUVV3c1IwRkJZU3h0UWtGQllpeERRVVJ6UWl4RFFVZDBRanM3UVVGRFFTeFRRVUZMZDBVc1QwRkJUQ3hIUVVGbExFbEJRVWxyUWl4TFFVRktMRU5CUVZWc1FpeFBRVUZXTEVWQlFXMUNPMEZCUTJoRGJrVXNVMEZCUnl4RlFVRkZMRXRCUVV0elJpeDFRa0ZFYzBJN1FVRkZhRU0xUml4VFFVRkhMRVZCUVVVc1MwRkJTelpHTzBGQlJuTkNMRXRCUVc1Q0xFTkJRV1k3UVVGSlJEczdRVUZuUTBRN1FVRkRRVTRzY1VKQlFXMUNMRU5CUVVOUExFdEJRVVFzUlVGQmFVSkRMRTFCUVdwQ0xFVkJRWFZETzBGQlEzaEVMRmRCUVU4c1NVRkJVRHRCUVVORU96dEJRVVZFV2l4MVFrRkJjVUlzUTBGQlExY3NTMEZCUkN4RlFVRjFRaXhEUVVNeFF6dEJRVU5FT3p0QlFVVkVWaXhwUWtGQlpTeERRVUZEU0N4SlFVRkVMRVZCUVRSQ08wRkJRM3BETEZkQlFVOHNTMEZCUzFJc1QwRkJUQ3hEUVVGaFVTeEpRVUZpTEVOQlFWQTdRVUZEUkRzN1FVRkZSRWtzYjBKQlFXdENMRU5CUVVOVExFdEJRVVFzUlVGQmRVSXNRMEZEZGtNN1FVRkRSRHM3UVVGRlJFNHNiVUpCUVdsQ0xFTkJRVU5OTEV0QlFVUXNSVUZCYVVKRkxGVkJRV3BDTEVWQlFYZERMRU5CUTNaRU8wRkJRMFE3TzBGQlJVUk9MR3RDUVVGblFpeERRVUZEU1N4TFFVRkVMRVZCUVdsQ1J5eFZRVUZxUWl4RlFVRjNReXhEUVVOMFJEdEJRVU5FT3p0QlFVVkVla1lzVlVGQlVTeEhRVUZUTEVOQlEyWTdRVUZEUkRzN1FVRjJSVzlGTEVNN08wRkRRWFpGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaU1TNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JEYjIxd2IyNWxiblFnWm5KdmJTQW5MaTlEYjIxd2IyNWxiblFuTzF4dWFXMXdiM0owSUV4cFptVmplV05zWlVOdmJYQnZibVZ1ZENCbWNtOXRJQ2N1TDB4cFptVmplV05zWlVOdmJYQnZibVZ1ZENjN1hHNXBiWEJ2Y25RZ2FYTkdkVzVqZEdsdmJpQm1jbTl0SUNkc2IyUmhjMmd2YVhOR2RXNWpkR2x2YmljN1hHNWNiblI1Y0dVZ1NtOXBiblJEYjIxd1BFTlVQaUE5SUVOdmJYQnZibVZ1ZER4RFZENGdmQ0JNYVdabFkzbGpiR1ZEYjIxd2IyNWxiblE4UTFRK08xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dVBFTlVQaUI3WEc0Z0lIQnlhWFpoZEdVZ1kyOXRjRzl1Wlc1MGN6b2dUV0Z3UEVOVUxDQktiMmx1ZEVOdmJYQThRMVErUGlBOUlHNWxkeUJOWVhBb0tUdGNibHh1SUNCaFpHUWdQU0FvWTI5dGNHOXVaVzUwT2lCS2IybHVkRU52YlhBOFExUStLVG9nZG05cFpDQTlQaUI3WEc0Z0lDQWdkR2hwY3k1amIyMXdiMjVsYm5SekxuTmxkQ2hqYjIxd2IyNWxiblF1ZEhsd1pTd2dZMjl0Y0c5dVpXNTBLVHRjYmlBZ2ZWeHVYRzRnSUhWd1pHRjBaU0E5SUNoalZIbHdaVG9nUTFRc0lHWjFibU02SUNoak9pQktiMmx1ZEVOdmJYQThRMVErS1NBOVBpQktiMmx1ZEVOdmJYQThRMVErS1RvZ2RtOXBaQ0E5UGlCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTI5dGNHOXVaVzUwY3k1b1lYTW9ZMVI1Y0dVcEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCaklEMGdkR2hwY3k1amIyMXdiMjVsYm5SekxtZGxkQ2hqVkhsd1pTazdYRzVjYmlBZ0lDQWdJR2xtSUNoaktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVndaR0YwWldSRGIyMXdiMjVsYm5RZ1BTQm1kVzVqS0dNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQnZibVZ1ZEhNdWMyVjBLR05VZVhCbExDQjFjR1JoZEdWa1EyOXRjRzl1Wlc1MEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVZ0YjNabElEMGdLR05VZVhCbE9pQkRWQ2s2SUhadmFXUWdQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbU52YlhCdmJtVnVkSE11YUdGektHTlVlWEJsS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWTI5dGNHOXVaVzUwSUQwZ2RHaHBjeTVqYjIxd2IyNWxiblJ6TG1kbGRDaGpWSGx3WlNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hqYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1MExtOXVVbVZ0YjNabEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVqYjIxd2IyNWxiblJ6TG1SbGJHVjBaU2hqVkhsd1pTazdYRzRnSUgxY2JseHVJQ0JuWlhRZ1BTQThRejRvWTFSNWNHVTZJRU5VS1RvZ1F5QTlQaUI3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbU52YlhCdmJtVnVkSE11YUdGektHTlVlWEJsS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUlHUnZaWE1nYm05MElHaGhkbVVnWTI5dGNHOXVaVzUwSUc5bUlIUjVjR1VnSkh0alZIbHdaWDFnS1Z4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjF3YjI1bGJuUnpMbWRsZENoalZIbHdaU2tnWVhNZ2RXNXJibTkzYmlCaGN5QkRPMXh1SUNCOVhHNWNiaUFnYUdGeklEMGdLR05VZVhCbE9pQkRWQ0I4SUVOVVcxMHBPaUJpYjI5c1pXRnVJRDArSUh0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hqVkhsd1pTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpWSGx3WlM1bGRtVnllU2dvWTNRcElEMCtJSFJvYVhNdVkyOXRjRzl1Wlc1MGN5NW9ZWE1vWTNRcElEMDlQU0IwY25WbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXRjRzl1Wlc1MGN5NW9ZWE1vWTFSNWNHVXBYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaMlYwSUdOdmJYQnZibVZ1ZEZSNWNHVnpLQ2s2SUVOVVcxMGdlMXh1SUNBZ0lISmxkSFZ5YmlCYkxpNHVkR2hwY3k1amIyMXdiMjVsYm5SekxtdGxlWE1vS1YwN1hHNGdJSDFjYmx4dUlDQm5aWFFnYzJsNlpTZ3BPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52YlhCdmJtVnVkSE11YzJsNlpUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRVZ1ZEdsMGVTd2dleUJGYm5ScGRIbEpaQ0I5SUdaeWIyMGdKeTR2Ulc1MGFYUjVKenRjYm1sdGNHOXlkQ0JEYjIxd2IyNWxiblFnWm5KdmJTQW5MaTlEYjIxd2IyNWxiblFuTzF4dWFXMXdiM0owSUV4cFptVmplV05zWlVOdmJYQnZibVZ1ZENCbWNtOXRJQ2N1TDB4cFptVmplV05zWlVOdmJYQnZibVZ1ZENjN1hHNXBiWEJ2Y25RZ1EyOXRjRzl1Wlc1MFEyOXNiR1ZqZEdsdmJpQm1jbTl0SUNjdUwwTnZiWEJ2Ym1WdWRFTnZiR3hsWTNScGIyNG5PMXh1YVcxd2IzSjBJSHNnVkdGbklIMGdabkp2YlNBbkxpOVVZV2NuTzF4dVhHNTBlWEJsSUVwdmFXNTBRMjl0Y0R4RFZENGdQU0JEYjIxd2IyNWxiblE4UTFRK0lId2dUR2xtWldONVkyeGxRMjl0Y0c5dVpXNTBQRU5VUGp0Y2JseHVkSGx3WlNCR2FXNWtVSEpsWkdsallYUmxQRU5VUGlBOUlDaGxiblJwZEhrNklFVnVkR2wwZVR4RFZENHBJRDArSUdKdmIyeGxZVzQ3WEc1Y2JuUjVjR1VnUjNKaFlsQnlaV1JwWTJGMFpUeERQaUE5SUNoamIyMXdiMjVsYm5RNklFTXBJRDArSUdKdmIyeGxZVzQ3WEc1Y2JtbHVkR1Z5Wm1GalpTQlRhVzVuYkdWRGIyMXdiMjVsYm5SU1pYTndQRU5VTENCRFBpQjdYRzRnSUdWdWRHbDBlVG9nUlc1MGFYUjVQRU5VUGp0Y2JpQWdZMjl0Y0c5dVpXNTBPaUJETzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCWGIzSnNaRHhEVkQ0Z2UxeHVJQ0JqYjIxd2IyNWxiblJEYjJ4c1pXTjBhVzl1Y3pvZ1RXRndQRVZ1ZEdsMGVVbGtMQ0JEYjIxd2IyNWxiblJEYjJ4c1pXTjBhVzl1UEVOVVBqNGdQU0J1WlhjZ1RXRndLQ2s3WEc1Y2JpQWdaVzUwYVhScFpYTTZJRTFoY0R4RmJuUnBkSGxKWkN3Z1JXNTBhWFI1UEVOVVBqNGdQU0J1WlhjZ1RXRndLQ2s3WEc1Y2JpQWdaVzUwYVhScFpYTkNlVU5VZVhCbGN6b2dUV0Z3UEVOVVcxMHNJRk5sZER4RmJuUnBkSGxKWkQ0K0lEMGdibVYzSUUxaGNDZ3BPMXh1WEc0Z0lHVnVkR2wwYVdWelFubFVZV2R6T2lCTllYQThWR0ZuTENCVFpYUThSVzUwYVhSNVNXUStQaUE5SUc1bGR5Qk5ZWEFvS1R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nWENKbWFXNWtjMXdpSUdFZ2MybHVaMnhsSUdWdWRHbDBlU0JpWVhObFpDQnZiaUJoSUhCeVpXUnBZMkYwWlZ4dUlDQWdLaTljYmlBZ1ptbHVaQ0E5SUNod2NtVmthV05oZEdVNklFWnBibVJRY21Wa2FXTmhkR1U4UTFRK0tUb2dSVzUwYVhSNVBFTlVQaUI4SUc1MWJHd2dQVDRnZTF4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnWlc1MGFYUjVJRzltSUhSb2FYTXVaVzUwYVhScFpYTXVkbUZzZFdWektDa3BJSHRjYmlBZ0lDQWdJR2xtSUNod2NtVmthV05oZEdVb1pXNTBhWFI1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNTBhWFI1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQmNJbVpwYm1SelhDSWdZV3hzSUdWdWRHbDBhV1Z6SUdKaGMyVmtJRzl1SUdFZ2NISmxaR2xqWVhSbExDQnJhVzVrWVNCc2FXdGxJR1pwYkhSbGNpNWNiaUFnSUNvdlhHNGdJR1pwYm1SQmJHd2dQU0FvY0hKbFpHbGpZWFJsT2lCR2FXNWtVSEpsWkdsallYUmxQRU5VUGlrNklFVnVkR2wwZVR4RFZENWJYU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MGN6b2dSVzUwYVhSNVBFTlVQbHRkSUQwZ1cxMDdYRzVjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJR1Z1ZEdsMGVTQnZaaUIwYUdsekxtVnVkR2wwYVdWekxuWmhiSFZsY3lncEtTQjdYRzRnSUNBZ0lDQnBaaUFvY0hKbFpHbGpZWFJsS0dWdWRHbDBlU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwY3k1d2RYTm9LR1Z1ZEdsMGVTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkSE03WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGd2liRzlqWVhSbGMxd2lJR0VnYzJsdVoyeGxJR1Z1ZEdsMGVTQmlZWE5sWkNCdmJpQnBkSE1nUTI5dGNHOXVaVzUwY3k1Y2JpQWdJQ292WEc0Z0lHeHZZMkYwWlNBOUlDaGpWSGx3WlhNNklFTlVJSHdnUTFSYlhTazZJRVZ1ZEdsMGVUeERWRDRnZkNCdWRXeHNJRDArSUh0Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdWdWRHbDBlU0J2WmlCMGFHbHpMbVZ1ZEdsMGFXVnpMblpoYkhWbGN5Z3BLU0I3WEc0Z0lDQWdJQ0JwWmlBb1pXNTBhWFI1TG1OdmJYQnZibVZ1ZEhNdWFHRnpLR05VZVhCbGN5a3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1ZEdsMGVUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVEc5allYUmxjeUJoYkd3Z1pXNTBhWFJwWlhNZ2RHaGhkQ0JqYjI1MFlXbHVJSFJvWlNCamIyMXdiMjVsYm5SeklHNWhiV1ZrWEc0Z0lDQXFMMXh1SUNCc2IyTmhkR1ZCYkd3Z1BTQW9ZMVI1Y0dWek9pQkRWQ0I4SUVOVVcxMHBPaUJGYm5ScGRIazhRMVErVzEwZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhKbGMzVnNkSE02SUVWdWRHbDBlVHhEVkQ1YlhTQTlJRnRkTzF4dVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCbGJuUnBkSGtnYjJZZ2RHaHBjeTVsYm5ScGRHbGxjeTUyWVd4MVpYTW9LU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHVnVkR2wwZVM1amIyMXdiMjVsYm5SekxtaGhjeWhqVkhsd1pYTXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkSE11Y0hWemFDaGxiblJwZEhrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSGNtRmljeUIwYUdVZ1ptbHljM1FnWlc1MGFYUjVMQ0JoYm1RZ2FYUnpJSEpsYkdGMFpXUWdZMjl0Y0c5dVpXNTBMQ0IwYUdGMElHMWhkR05vWlhNZ2RHaGxJR052YlhCdmJtVnVkQ0IwZVhCbExseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJnWUdCY2JpQWdJQ29nWTI5dWMzUWdleUJsYm5ScGRIa3NJR052YlhCdmJtVnVkQ0I5SUQwZ2QyOXliR1F1WjNKaFlqeE5lVU52YlhCdmJtVnVkRDRvUTI5dGNHOXVaVzUwY3k1TmVVTnZiWEJ2Ym1WdWRDazdYRzRnSUNBcUlHQmdZRnh1SUNBZ0tpOWNiaUFnWjNKaFlpQTlJRHhEUGloalZIbHdaVG9nUTFRcE9pQlRhVzVuYkdWRGIyMXdiMjVsYm5SU1pYTndQRU5VTENCRFBpQjhJRzUxYkd3Z1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdWdWRHbDBlU0E5SUhSb2FYTXViRzlqWVhSbEtHTlVlWEJsS1R0Y2JseHVJQ0FnSUdsbUlDaGxiblJwZEhrcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdOaklEMWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dWN5NW5aWFFvWlc1MGFYUjVMbWxrS1NCOGZGeHVJQ0FnSUNBZ0lDQnVaWGNnUTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ymp4RFZENG9LVHRjYmx4dUlDQWdJQ0FnWTI5dWMzUWdZMjl0Y0c5dVpXNTBJRDBnWTJNdVoyVjBQRU0rS0dOVWVYQmxLVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnWlc1MGFYUjVMRnh1SUNBZ0lDQWdJQ0JqYjIxd2IyNWxiblFzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhjbUZpSUhOcGJtZHNaU0JqYjIxd2IyNWxiblFnWW1GelpXUWdiMjRnWTI5dGNHOXVaVzUwSUhSNWNHVWdZVzVrSUhCeVpXUnBZMkYwWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ1lHQmdkSGx3WlhOamNtbHdkRnh1SUNBZ0tpQmpiMjV6ZENCN0lHVnVkR2wwZVN3Z1kyOXRjRzl1Wlc1MElIMGdQU0IzYjNKc1pDNW5jbUZpUW5rb1EyOXRjRzl1Wlc1MGN5NUdhWEp6ZEVOdmJYQnZibVZ1ZEN3Z0tHTnZiWEFwSUQwK0lHTnZiWEF1YVdRZ1BUMGdKMkYzWlhOdmJXVW5LVnh1SUNBZ0tpQmdZR0JjYmlBZ0lDb3ZYRzRnSUdkeVlXSkNlU0E5SUR4RFBpaGNiaUFnSUNCalZIbHdaVG9nUTFRc1hHNGdJQ0FnY0hKbFpHbGpZWFJsT2lCSGNtRmlVSEpsWkdsallYUmxQRU0rWEc0Z0lDazZJRk5wYm1kc1pVTnZiWEJ2Ym1WdWRGSmxjM0E4UTFRc0lFTStJSHdnYm5Wc2JDQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pXNTBhWFJwWlhNZ1BTQjBhR2x6TG14dlkyRjBaVUZzYkNoalZIbHdaU2s3WEc1Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdWdWRHbDBlU0J2WmlCbGJuUnBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWTJNZ1BWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQnZibVZ1ZEVOdmJHeGxZM1JwYjI1ekxtZGxkQ2hsYm5ScGRIa3VhV1FwSUh4OFhHNGdJQ0FnSUNBZ0lHNWxkeUJEYjIxd2IyNWxiblJEYjJ4c1pXTjBhVzl1UEVOVVBpZ3BPMXh1WEc0Z0lDQWdJQ0JqYjI1emRDQmpiMjF3YjI1bGJuUWdQU0JqWXk1blpYUThRejRvWTFSNWNHVXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2NISmxaR2xqWVhSbEtHTnZiWEJ2Ym1WdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyMXdiMjVsYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdaVzUwYVhSNUxGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSGNtRmlJR0ZzYkNCMGFHVWdZMjl0Y0c5dVpXNTBjeUJ3Y21sdFlYSnBiSGtzSUdGdVpDQjBhR1VnWlc1MGFYUnBaWE1nYVdZZ2JtVmxaR1ZrWEc0Z0lDQXFMMXh1SUNCbmNtRmlRV3hzSUQwZ1BFTStLR05VZVhCbE9pQkRWQ2s2SUZOcGJtZHNaVU52YlhCdmJtVnVkRkpsYzNBOFExUXNJRU0rVzEwZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbXh2WTJGMFpVRnNiQ2hqVkhsd1pTa3ViV0Z3S0NobGJuUnBkSGtwSUQwK0lDaDdYRzRnSUNBZ0lDQmxiblJwZEhrc1hHNGdJQ0FnSUNCamIyMXdiMjVsYm5RNklDaGxiblJwZEhrdVkyOXRjRzl1Wlc1MGN5NW5aWFFvWTFSNWNHVXBJR0Z6SUhWdWEyNXZkMjRwSUdGeklFTXNYRzRnSUNBZ2ZTa3BPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSGFYWmxiaUJoYmlCbGJuUnBkSGtnYVdRZ1lXNWtJR052YlhCdmJtVnVkRlI1Y0dVc0lISmxkSFZ5Ym5NZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FxTDF4dUlDQm5aWFFnUFNBOFF6NG9aV2xrT2lCRmJuUnBkSGxKWkN3Z1kxUjVjR1U2SUVOVUtUb2dReUE5UGlCN1hHNGdJQ0FnWTI5dWMzUWdZMk1nUFZ4dUlDQWdJQ0FnZEdocGN5NWpiMjF3YjI1bGJuUkRiMnhzWldOMGFXOXVjeTVuWlhRb1pXbGtLU0I4ZkNCdVpYY2dRMjl0Y0c5dVpXNTBRMjlzYkdWamRHbHZianhEVkQ0b0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCall5NW5aWFE4UXo0b1kxUjVjR1VwTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnWVc0Z1pXNTBhWFI1SUhSb1lYUWdhR0Z6SUdKbFpXNGdkR0ZuWjJWa0lIZHBkR2dnZEdobElHZHBkbVZ1SUhSaFp5d2diM0lnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FxTDF4dUlDQm5aWFJVWVdkblpXUWdQU0FvZEdGbk9pQlVZV2NwT2lCRmJuUnBkSGs4UTFRK0lId2diblZzYkNBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZEdGblJXNTBhWFI1U1dSeklEMGdkR2hwY3k1bGJuUnBkR2xsYzBKNVZHRm5jeTVuWlhRb2RHRm5LVHRjYmx4dUlDQWdJR2xtSUNoMFlXZEZiblJwZEhsSlpITXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHVnVkR2wwZVVsa0lEMGdkR0ZuUlc1MGFYUjVTV1J6TG5aaGJIVmxjeWdwTG01bGVIUW9LUzUyWVd4MVpUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ1pXNTBhWFI1SUQwZ2RHaHBjeTVsYm5ScGRHbGxjeTVuWlhRb1pXNTBhWFI1U1dRcE8xeHVYRzRnSUNBZ0lDQnBaaUFvWlc1MGFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsYm5ScGRIazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JuWlhSQmJHeFVZV2RuWldRZ1BTQW9kR0ZuT2lCVVlXY3BPaUJGYm5ScGRIazhRMVErVzEwZ1BUNGdlMXh1SUNBZ0lHeGxkQ0JsYm5ScGRHbGxjem9nUlc1MGFYUjVQRU5VUGx0ZElEMGdXMTA3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVmNibHh1SUNBZ0lHTnZibk4wSUhSaFowVnVkR2wwZVVsa2N5QTlJSFJvYVhNdVpXNTBhWFJwWlhOQ2VWUmhaM011WjJWMEtIUmhaeWs3WEc1Y2JpQWdJQ0JwWmlBb2RHRm5SVzUwYVhSNVNXUnpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdWdWRHbDBlVWxrSUc5bUlIUmhaMFZ1ZEdsMGVVbGtjeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYm5ScGRIa2dQU0IwYUdsekxtVnVkR2wwYVdWekxtZGxkQ2hsYm5ScGRIbEpaQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJwZEhrcElIdGNiaUFnSUNBZ0lDQWdJQ0JsYm5ScGRHbGxjeTV3ZFhOb0tHVnVkR2wwZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWlc1MGFYUnBaWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBJR0VnWTI5dGNHOXVaVzUwSUc5dUlIUm9aU0JuYVhabGJpQmxiblJwZEhsY2JpQWdJQ292WEc0Z0lITmxkQ0E5SUNobGFXUTZJRVZ1ZEdsMGVVbGtMQ0JqYjIxd2IyNWxiblE2SUVOdmJYQnZibVZ1ZER4RFZENHBPaUJYYjNKc1pEeERWRDRnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR05qSUQxY2JpQWdJQ0FnSUhSb2FYTXVZMjl0Y0c5dVpXNTBRMjlzYkdWamRHbHZibk11WjJWMEtHVnBaQ2tnZkh3Z2JtVjNJRU52YlhCdmJtVnVkRU52Ykd4bFkzUnBiMjQ4UTFRK0tDazdYRzVjYmlBZ0lDQmpZeTVoWkdRb1kyOXRjRzl1Wlc1MEtUdGNibHh1SUNBZ0lIUm9hWE11WTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ym5NdWMyVjBLR1ZwWkN3Z1kyTXBPMXh1WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0JiWTNSQmNuSXNJR1Z1ZEdsMGVWTmxkRjBnYjJZZ2RHaHBjeTVsYm5ScGRHbGxjMEo1UTFSNWNHVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb1kzUkJjbkl1WlhabGNua29ZMk11YUdGektTa2dlMXh1SUNBZ0lDQWdJQ0JsYm5ScGRIbFRaWFF1WVdSa0tHVnBaQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiVzkyWlNCaElHTnZiWEJ2Ym1WdWRDQm1jbTl0SUhSb1pTQm5hWFpsYmlCbGJuUnBkSGt1WEc0Z0lDQXFJRTVQVkVVNklGUm9hWE1nZDJsc2JDQmphR0Z1WjJVZ2QyaGhkQ0J6ZVhOMFpXMXpJSGRwYkd3Z1ltVWdZMkZzYkdWa0lHOXVJSFJvWlNCbGJuUnBkSGt1WEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVVnUFNBb1pXbGtPaUJGYm5ScGRIbEpaQ3dnWTFSNWNHVTZJRU5VS1RvZ2RtOXBaQ0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdZMk1nUFZ4dUlDQWdJQ0FnZEdocGN5NWpiMjF3YjI1bGJuUkRiMnhzWldOMGFXOXVjeTVuWlhRb1pXbGtLU0I4ZkNCdVpYY2dRMjl0Y0c5dVpXNTBRMjlzYkdWamRHbHZianhEVkQ0b0tUdGNibHh1SUNBZ0lDOHZJSEpsYlc5MlpTQmxiblJwZEhrZ1puSnZiU0JqZFhKeVpXNTBJR1Z1ZEdsMGFXVnpRbmxEVkhsd1pYTmNiaUFnSUNCbWIzSWdLR052Ym5OMElGdGpkRUZ5Y2l3Z1pXNTBhWFI1VTJWMFhTQnZaaUIwYUdsekxtVnVkR2wwYVdWelFubERWSGx3WlhNcElIdGNiaUFnSUNBZ0lHbG1JQ2hqZEVGeWNpNWxkbVZ5ZVNoall5NW9ZWE1wS1NCN1hHNGdJQ0FnSUNBZ0lHVnVkR2wwZVZObGRDNWtaV3hsZEdVb1pXbGtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpZeTV5WlcxdmRtVW9ZMVI1Y0dVcE8xeHVYRzRnSUNBZ0x5OGdUVzkyWlNCbGJuUnBkSGxKWkNCMGJ5QnVaWGNnUTFSNWNHVnpJR2xtSUc1bFpXUmxaQzVjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJRnRqZEVGeWNpd2daVzUwYVhSNVUyVjBYU0J2WmlCMGFHbHpMbVZ1ZEdsMGFXVnpRbmxEVkhsd1pYTXBJSHRjYmlBZ0lDQWdJR2xtSUNoamRFRnljaTVsZG1WeWVTaGpZeTVvWVhNcEtTQjdYRzRnSUNBZ0lDQWdJR1Z1ZEdsMGVWTmxkQzVoWkdRb1pXbGtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRHVnlibUZzSUcxbGRHaHZaQ0IxYzJWa0lHbHVJSE5sZEhScGJtY2dkWEFnWVNCdVpYY2djM2x6ZEdWdExseHVJQ0FnS2k5Y2JpQWdjbVZuYVhOMFpYSlRlWE4wWlcwb1kxUjVjR1Z6T2lCRFZGdGRLVG9nVjI5eWJHUThRMVErSUh0Y2JpQWdJQ0IwYUdsekxtVnVkR2wwYVdWelFubERWSGx3WlhNdWMyVjBLR05VZVhCbGN5d2dibVYzSUZObGREeEZiblJwZEhsSlpENG9LU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lISmxaMmx6ZEdWeVJXNTBhWFI1S0dWdWRHbDBlVG9nUlc1MGFYUjVQRU5VUGlrNklGZHZjbXhrUEVOVVBpQjdYRzRnSUNBZ1kyOXVjM1FnWTJNZ1BTQnVaWGNnUTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ymp4RFZENG9LVHRjYmx4dUlDQWdJSFJvYVhNdVkyOXRjRzl1Wlc1MFEyOXNiR1ZqZEdsdmJuTXVjMlYwS0dWdWRHbDBlUzVwWkN3Z1kyTXBPMXh1SUNBZ0lIUm9hWE11Wlc1MGFYUnBaWE11YzJWMEtHVnVkR2wwZVM1cFpDd2daVzUwYVhSNUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGJXOTJaU0JoYkd3Z1kyOXRjRzl1Wlc1MGN5QjBhR0YwSUdKbGJHOXVaeUIwYnlCaGJpQmxiblJwZEhrdVhHNGdJQ0FxTDF4dUlDQmpiR1ZoY2tWdWRHbDBlVU52YlhCdmJtVnVkSE1vWldsa09pQkZiblJwZEhsSlpDazZJRmR2Y214a1BFTlVQaUI3WEc0Z0lDQWdkR2hwY3k1amIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dWN5NXpaWFFvWldsa0xDQnVaWGNnUTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ymp4RFZENG9LU2s3WEc1Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdWdWRHbDBlVk5sZENCdlppQjBhR2x6TG1WdWRHbDBhV1Z6UW5sRFZIbHdaWE11ZG1Gc2RXVnpLQ2twSUh0Y2JpQWdJQ0FnSUdsbUlDaGxiblJwZEhsVFpYUXVhR0Z6S0dWcFpDa3BJSHRjYmlBZ0lDQWdJQ0FnWlc1MGFYUjVVMlYwTG1SbGJHVjBaU2hsYVdRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsYzNSeWIzbHpJR0Z1SUdWdWRHbDBlUzVjYmlBZ0lDb2dVMkZ0WlNCaGN5QmxiblJwZEhrdVpHVnpkSEp2ZVNncExseHVJQ0FnS2k5Y2JpQWdaR1Z6ZEhKdmVVVnVkR2wwZVNobGFXUTZJRVZ1ZEdsMGVVbGtLVG9nVjI5eWJHUThRMVErSUh0Y2JpQWdJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRFTnZiR3hsWTNScGIyNXpMbVJsYkdWMFpTaGxhV1FwTzF4dUlDQWdJSFJvYVhNdVpXNTBhWFJwWlhNdVpHVnNaWFJsS0dWcFpDazdYRzVjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJR1Z1ZEdsMGVWTmxkQ0J2WmlCMGFHbHpMbVZ1ZEdsMGFXVnpRbmxEVkhsd1pYTXVkbUZzZFdWektDa3BJSHRjYmlBZ0lDQWdJR2xtSUNobGJuUnBkSGxUWlhRdWFHRnpLR1ZwWkNrcElIdGNiaUFnSUNBZ0lDQWdaVzUwYVhSNVUyVjBMbVJsYkdWMFpTaGxhV1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhKbGJXOTJaU0JoYm5rZ2RHRm5JR0Z6YzI5amFXRjBhVzl1Y3lCM2FYUm9JR1JsYzNSeWIzbGxaQ0JsYm5ScGRHbGxjeTVjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJRnQwWVdjc0lHVnVkR2wwZVZObGRGMGdiMllnZEdocGN5NWxiblJwZEdsbGMwSjVWR0ZuY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1Z1ZEdsMGVWTmxkQzVvWVhNb1pXbGtLU2tnZTF4dUlDQWdJQ0FnSUNCbGJuUnBkSGxUWlhRdVpHVnNaWFJsS0dWcFpDbGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dWdWRHbDBlVk5sZEM1emFYcGxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNTBhWFJwWlhOQ2VWUmhaM011WkdWc1pYUmxLSFJoWnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYm4xY2JpSXNJaTh2SUZWdWFYRjFaU0JKUkNCamNtVmhkR2x2YmlCeVpYRjFhWEpsY3lCaElHaHBaMmdnY1hWaGJHbDBlU0J5WVc1a2IyMGdJeUJuWlc1bGNtRjBiM0l1SUVsdUlIUm9aU0JpY205M2MyVnlJSGRsSUhSb1pYSmxabTl5WlZ4dUx5OGdjbVZ4ZFdseVpTQjBhR1VnWTNKNWNIUnZJRUZRU1NCaGJtUWdaRzhnYm05MElITjFjSEJ2Y25RZ1luVnBiSFF0YVc0Z1ptRnNiR0poWTJzZ2RHOGdiRzkzWlhJZ2NYVmhiR2wwZVNCeVlXNWtiMjBnYm5WdFltVnlYRzR2THlCblpXNWxjbUYwYjNKeklDaHNhV3RsSUUxaGRHZ3VjbUZ1Wkc5dEtDa3BMbHh1THk4Z1oyVjBVbUZ1Wkc5dFZtRnNkV1Z6SUc1bFpXUnpJSFJ2SUdKbElHbHVkbTlyWldRZ2FXNGdZU0JqYjI1MFpYaDBJSGRvWlhKbElGd2lkR2hwYzF3aUlHbHpJR0VnUTNKNWNIUnZJR2x0Y0d4bGJXVnVkR0YwYVc5dUxpQkJiSE52TEZ4dUx5OGdabWx1WkNCMGFHVWdZMjl0Y0d4bGRHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdZM0o1Y0hSdklDaHRjME55ZVhCMGJ5a2diMjRnU1VVeE1TNWNiblpoY2lCblpYUlNZVzVrYjIxV1lXeDFaWE1nUFNCMGVYQmxiMllnWTNKNWNIUnZJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJqY25sd2RHOHVaMlYwVW1GdVpHOXRWbUZzZFdWeklDWW1JR055ZVhCMGJ5NW5aWFJTWVc1a2IyMVdZV3gxWlhNdVltbHVaQ2hqY25sd2RHOHBJSHg4SUhSNWNHVnZaaUJ0YzBOeWVYQjBieUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JRzF6UTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5QTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQnRjME55ZVhCMGJ5NW5aWFJTWVc1a2IyMVdZV3gxWlhNdVltbHVaQ2h0YzBOeWVYQjBieWs3WEc1MllYSWdjbTVrY3pnZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNneE5pazdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnlibWNvS1NCN1hHNGdJR2xtSUNnaFoyVjBVbUZ1Wkc5dFZtRnNkV1Z6S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqY25sd2RHOHVaMlYwVW1GdVpHOXRWbUZzZFdWektDa2dibTkwSUhOMWNIQnZjblJsWkM0Z1UyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkxZFdsa2FuTXZkWFZwWkNOblpYUnlZVzVrYjIxMllXeDFaWE10Ym05MExYTjFjSEJ2Y25SbFpDY3BPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR2RsZEZKaGJtUnZiVlpoYkhWbGN5aHlibVJ6T0NrN1hHNTlJaXdpTHlvcVhHNGdLaUJEYjI1MlpYSjBJR0Z5Y21GNUlHOW1JREUySUdKNWRHVWdkbUZzZFdWeklIUnZJRlZWU1VRZ2MzUnlhVzVuSUdadmNtMWhkQ0J2WmlCMGFHVWdabTl5YlRwY2JpQXFJRmhZV0ZoWVdGaFlMVmhZV0ZndFdGaFlXQzFZV0ZoWUxWaFlXRmhZV0ZoWVdGaFlXRnh1SUNvdlhHNTJZWElnWW5sMFpWUnZTR1Y0SUQwZ1cxMDdYRzVjYm1admNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z01qVTJPeUFySzJrcElIdGNiaUFnWW5sMFpWUnZTR1Y0TG5CMWMyZ29LR2tnS3lBd2VERXdNQ2t1ZEc5VGRISnBibWNvTVRZcExuTjFZbk4wY2lneEtTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSjVkR1Z6Vkc5VmRXbGtLR0oxWml3Z2IyWm1jMlYwWHlrZ2UxeHVJQ0IyWVhJZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwWHlCOGZDQXdPeUF2THlCT2IzUmxPaUJDWlNCallYSmxablZzSUdWa2FYUnBibWNnZEdocGN5QmpiMlJsSVNBZ1NYUW5jeUJpWldWdUlIUjFibVZrSUdadmNpQndaWEptYjNKdFlXNWpaVnh1SUNBdkx5QmhibVFnZDI5eWEzTWdhVzRnZDJGNWN5QjViM1VnYldGNUlHNXZkQ0JsZUhCbFkzUXVJRk5sWlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRYVnBaR3B6TDNWMWFXUXZjSFZzYkM4ME16UmNibHh1SUNCeVpYUjFjbTRnS0dKNWRHVlViMGhsZUZ0aWRXWmJiMlptYzJWMElDc2dNRjFkSUNzZ1lubDBaVlJ2U0dWNFcySjFabHR2Wm1aelpYUWdLeUF4WFYwZ0t5QmllWFJsVkc5SVpYaGJZblZtVzI5bVpuTmxkQ0FySURKZFhTQXJJR0o1ZEdWVWIwaGxlRnRpZFdaYmIyWm1jMlYwSUNzZ00xMWRJQ3NnSnkwbklDc2dZbmwwWlZSdlNHVjRXMkoxWmx0dlptWnpaWFFnS3lBMFhWMGdLeUJpZVhSbFZHOUlaWGhiWW5WbVcyOW1abk5sZENBcklEVmRYU0FySUNjdEp5QXJJR0o1ZEdWVWIwaGxlRnRpZFdaYmIyWm1jMlYwSUNzZ05sMWRJQ3NnWW5sMFpWUnZTR1Y0VzJKMVpsdHZabVp6WlhRZ0t5QTNYVjBnS3lBbkxTY2dLeUJpZVhSbFZHOUlaWGhiWW5WbVcyOW1abk5sZENBcklEaGRYU0FySUdKNWRHVlViMGhsZUZ0aWRXWmJiMlptYzJWMElDc2dPVjFkSUNzZ0p5MG5JQ3NnWW5sMFpWUnZTR1Y0VzJKMVpsdHZabVp6WlhRZ0t5QXhNRjFkSUNzZ1lubDBaVlJ2U0dWNFcySjFabHR2Wm1aelpYUWdLeUF4TVYxZElDc2dZbmwwWlZSdlNHVjRXMkoxWmx0dlptWnpaWFFnS3lBeE1sMWRJQ3NnWW5sMFpWUnZTR1Y0VzJKMVpsdHZabVp6WlhRZ0t5QXhNMTFkSUNzZ1lubDBaVlJ2U0dWNFcySjFabHR2Wm1aelpYUWdLeUF4TkYxZElDc2dZbmwwWlZSdlNHVjRXMkoxWmx0dlptWnpaWFFnS3lBeE5WMWRLUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JpZVhSbGMxUnZWWFZwWkRzaUxDSnBiWEJ2Y25RZ2NtNW5JR1p5YjIwZ0p5NHZjbTVuTG1wekp6dGNibWx0Y0c5eWRDQmllWFJsYzFSdlZYVnBaQ0JtY205dElDY3VMMko1ZEdWelZHOVZkV2xrTG1wekp6dGNibHh1Wm5WdVkzUnBiMjRnZGpRb2IzQjBhVzl1Y3l3Z1luVm1MQ0J2Wm1aelpYUXBJSHRjYmlBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lIWmhjaUJ5Ym1SeklEMGdiM0IwYVc5dWN5NXlZVzVrYjIwZ2ZId2dLRzl3ZEdsdmJuTXVjbTVuSUh4OElISnVaeWtvS1RzZ0x5OGdVR1Z5SURRdU5Dd2djMlYwSUdKcGRITWdabTl5SUhabGNuTnBiMjRnWVc1a0lHQmpiRzlqYTE5elpYRmZhR2xmWVc1a1gzSmxjMlZ5ZG1Wa1lGeHVYRzRnSUhKdVpITmJObDBnUFNCeWJtUnpXelpkSUNZZ01IZ3daaUI4SURCNE5EQTdYRzRnSUhKdVpITmJPRjBnUFNCeWJtUnpXemhkSUNZZ01IZ3paaUI4SURCNE9EQTdJQzh2SUVOdmNIa2dZbmwwWlhNZ2RHOGdZblZtWm1WeUxDQnBaaUJ3Y205MmFXUmxaRnh1WEc0Z0lHbG1JQ2hpZFdZcElIdGNiaUFnSUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkh3Z01EdGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dNVFk3SUNzcmFTa2dlMXh1SUNBZ0lDQWdZblZtVzI5bVpuTmxkQ0FySUdsZElEMGdjbTVrYzF0cFhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWW5WbU8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHSjVkR1Z6Vkc5VmRXbGtLSEp1WkhNcE8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0IyTkRzaUxDSnBiWEJ2Y25RZ2V5QjJOQ0JoY3lCMWRXbGtkalFnZlNCbWNtOXRJQ2QxZFdsa0p6dGNibWx0Y0c5eWRDQlhiM0pzWkNCbWNtOXRJQ2N1TDFkdmNteGtKenRjYm1sdGNHOXlkQ0JEYjIxd2IyNWxiblFnWm5KdmJTQW5MaTlEYjIxd2IyNWxiblFuTzF4dWFXMXdiM0owSUVOdmJYQnZibVZ1ZEVOdmJHeGxZM1JwYjI0Z1puSnZiU0FuTGk5RGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUp6dGNibWx0Y0c5eWRDQjdJRlJoWnlCOUlHWnliMjBnSnk0dlZHRm5KenRjYmx4dVpYaHdiM0owSUhSNWNHVWdSVzUwYVhSNVNXUWdQU0J6ZEhKcGJtYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFVnVkR2wwZVR4RFZENGdlMXh1SUNCd2NtbDJZWFJsSUY5cFpEb2djM1J5YVc1bk8xeHVJQ0J3Y21sMllYUmxJRjkzYjNKc1pEb2dWMjl5YkdROFExUStPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSGR2Y214a09pQlhiM0pzWkR4RFZENHBJSHRjYmlBZ0lDQjBhR2x6TGw5cFpDQTlJSFYxYVdSMk5DZ3BPMXh1SUNBZ0lIUm9hWE11WDNkdmNteGtJRDBnZDI5eWJHUTdYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lGSmxaMmx6ZEdWeWFXNW5JSGRwZEdnZ2RHaGxJRmR2Y214a0xseHVJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NWZkMjl5YkdRdWNtVm5hWE4wWlhKRmJuUnBkSGtvZEdocGN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa0lHRWdZMjl0Y0c5dVpXNTBJSFJ2SUdGdUlFVnVkR2wwZVN3Z1pHOW9MbHh1SUNBZ0tpOWNiaUFnWVdSa0tHTnZiWEJ2Ym1WdWREb2dRMjl0Y0c5dVpXNTBQRU5VUGlrNklFVnVkR2wwZVR4RFZENGdlMXh1SUNBZ0lIUm9hWE11WDNkdmNteGtMbk5sZENoMGFHbHpMbDlwWkN3Z1kyOXRjRzl1Wlc1MEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pDQmhJSFJoWnlCMGJ5QmhJR052YlhCdmJtVnVkRnh1SUNBZ0tpOWNiaUFnWVdSa1ZHRm5LSFJoWnpvZ1ZHRm5LVG9nUlc1MGFYUjVQRU5VUGlCN1hHNGdJQ0FnWTI5dWMzUWdaVzUwYVhSNVUyVjBJRDBnZEdocGN5NWZkMjl5YkdRdVpXNTBhWFJwWlhOQ2VWUmhaM011YUdGektIUmhaeWxjYmlBZ0lDQWdJRDhnZEdocGN5NWZkMjl5YkdRdVpXNTBhWFJwWlhOQ2VWUmhaM011WjJWMEtIUmhaeWxjYmlBZ0lDQWdJRG9nYm1WM0lGTmxkRHhGYm5ScGRIbEpaRDRvS1R0Y2JseHVJQ0FnSUdsbUlDaGxiblJwZEhsVFpYUXBJSHRjYmlBZ0lDQWdJR1Z1ZEdsMGVWTmxkQzVoWkdRb2RHaHBjeTVmYVdRcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmZDI5eWJHUXVaVzUwYVhScFpYTkNlVlJoWjNNdWMyVjBLSFJoWnl3Z1pXNTBhWFI1VTJWMEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFWlhSbGNtMXBibVZ6SUdsbUlHRnVJR1Z1ZEdsMGVTQm9ZWE1nWVNCamIyMXdiMjVsYm5RZ2NtVnNZWFJsWkNCMGJ5QnBkQzVjYmlBZ0lDb3ZYRzRnSUdoaGN5aGpWSGx3WlRvZ1ExUXBPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQmpiMjV6ZENCall5QTlJSFJvYVhNdVgzZHZjbXhrTG1OdmJYQnZibVZ1ZEVOdmJHeGxZM1JwYjI1ekxtZGxkQ2gwYUdsekxsOXBaQ2tnZkh3Z2JtVjNJRU52YlhCdmJtVnVkRU52Ykd4bFkzUnBiMjQ4UTFRK0tDazdYRzVjYmlBZ0lDQnlaWFIxY200Z1kyTXVhR0Z6S0dOVWVYQmxLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmpheUIwYnlCelpXVWdhV1lnWVc0Z1pXNTBhWFI1SUhSaFoyZGxaQ0IzYVhSb0lHRWdaMmwyWlc0Z2RHRm5MbHh1SUNBZ0tpOWNiaUFnYUdGelZHRm5LSFJoWnpvZ1ZHRm5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM2R2Y214a0xtVnVkR2wwYVdWelFubFVZV2R6TG1oaGN5aDBZV2NwS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JsYm5ScGRIbFRaWFFnUFNCMGFHbHpMbDkzYjNKc1pDNWxiblJwZEdsbGMwSjVWR0ZuY3k1blpYUW9kR0ZuS1R0Y2JpQWdJQ0FnSUdsbUlDaGxiblJwZEhsVFpYUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1ZEdsMGVWTmxkQzVvWVhNb2RHaHBjeTVmYVdRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lTQmpiMjF3YjI1bGJuUWdkR2hoZENCaVpXeHZibWR6SUhSdklHRnVJR1Z1ZEdsMGVTNWNiaUFnSUNvdlhHNGdJR2RsZER4RFBpaGpWSGx3WlRvZ1ExUXBPaUJESUh0Y2JpQWdJQ0JqYjI1emRDQmpZeUE5SUhSb2FYTXVYM2R2Y214a0xtTnZiWEJ2Ym1WdWRFTnZiR3hsWTNScGIyNXpMbWRsZENoMGFHbHpMbDlwWkNrZ2ZId2dibVYzSUVOdmJYQnZibVZ1ZEVOdmJHeGxZM1JwYjI0OFExUStLQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMjF3YjI1bGJuUWdQU0JqWXk1blpYUThRejRvWTFSNWNHVXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJ2Ym1WdWREdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lXeHNJR052YlhCdmJtVnVkSE1nZEdoaGRDQm9ZWFpsSUdKbFpXNGdZV1JrWldRZ2RHOGdZVzRnWlc1MGFYUjVMQ0IyYVdFZ1lTQkRiMjF3YjI1bGJuUkRiMnhzWldOMGFXOXVYRzRnSUNBcUwxeHVJQ0JuWlhSQmJHd29LVG9nUTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ymp4RFZENGdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzYjNKc1pDNWpiMjF3YjI1bGJuUkRiMnhzWldOMGFXOXVjeTVuWlhRb2RHaHBjeTVmYVdRcElIeDhJRzVsZHlCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dVBFTlVQaWdwTzF4dUlDQjlYRzVjYmlBZ2NtVnRiM1psS0dOVWVYQmxPaUJEVkNrNklFVnVkR2wwZVR4RFZENGdlMXh1SUNBZ0lIUm9hWE11WDNkdmNteGtMbkpsYlc5MlpTaDBhR2x6TGw5cFpDd2dZMVI1Y0dVcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WdGIzWmxJR0VnZEdGbklHWnliMjBnWVc0Z1pXNTBhWFI1WEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVZVWVdjb2RHRm5PaUJ6ZEhKcGJtY2dmQ0J1ZFcxaVpYSXBPaUJGYm5ScGRIazhRMVErSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmZDI5eWJHUXVaVzUwYVhScFpYTkNlVlJoWjNNdWFHRnpLSFJoWnlrcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWdWRHbDBlVk5sZENBOUlIUm9hWE11WDNkdmNteGtMbVZ1ZEdsMGFXVnpRbmxVWVdkekxtZGxkQ2gwWVdjcE8xeHVJQ0FnSUNBZ1hHNGdJQ0FnSUNCcFppQW9aVzUwYVhSNVUyVjBLU0I3WEc0Z0lDQWdJQ0FnSUdWdWRHbDBlVk5sZEM1a1pXeGxkR1VvZEdocGN5NWZhV1FwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm5ScGRIbFRaWFF1YzJsNlpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZHZjbXhrTG1WdWRHbDBhV1Z6UW5sVVlXZHpMbVJsYkdWMFpTaDBZV2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5b3FJRU5zWldGeWN5QmhiR3dnWTI5dGNHOXVaVzUwY3lCbWNtOXRJR0Z1SUVWdWRHbDBlU0FxTDF4dUlDQmpiR1ZoY2lncE9pQkZiblJwZEhrOFExUStJSHRjYmlBZ0lDQjBhR2x6TGw5M2IzSnNaQzVqYkdWaGNrVnVkR2wwZVVOdmJYQnZibVZ1ZEhNb2RHaHBjeTVmYVdRcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlcxdmRtVWdZV3hzSUhSaFozTWdiMjRnWVc0Z1pXNTBhWFI1WEc0Z0lDQXFMMXh1SUNCamJHVmhjbFJoWjNNb0tUb2dSVzUwYVhSNVBFTlVQaUI3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0JiZEdGbkxDQmxiblJwZEhsVFpYUmRJRzltSUhSb2FYTXVYM2R2Y214a0xtVnVkR2wwYVdWelFubFVZV2R6TG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ1pXNTBhWFI1VTJWMExtUmxiR1YwWlNoMGFHbHpMbDlwWkNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hsYm5ScGRIbFRaWFF1YzJsNlpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M2IzSnNaQzVsYm5ScGRHbGxjMEo1VkdGbmN5NWtaV3hsZEdVb2RHRm5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ2ZWeHVYRzRnSUdSbGMzUnliM2tvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1ZmQyOXliR1F1WkdWemRISnZlVVZ1ZEdsMGVTaDBhR2x6TGw5cFpDazdYRzRnSUgxY2JseHVJQ0JuWlhRZ2FXUW9LVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVdRN1hHNGdJSDFjYmx4dUlDQm5aWFFnZDI5eWJHUW9LVG9nVjI5eWJHUThRMVErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQyOXliR1E3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJR0ZzYkNCamIyMXdiMjVsYm5SeklIUm9ZWFFnYUdGMlpTQmlaV1Z1SUdGa1pHVmtJSFJ2SUdGdUlHVnVkR2wwZVN3Z2RtbGhJR0VnUTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ymk1Y2JpQWdJQ29nUkc5bGN5QjBhR1VnYzJGdFpTQjBhR2x1WnlCaGN5QmxiblJwZEhsSmJuTjBZVzVqWlM1blpYUkJiR3dvS1M1Y2JpQWdJQ292WEc0Z0lHZGxkQ0JqYjIxd2IyNWxiblJ6S0NrNklFTnZiWEJ2Ym1WdWRFTnZiR3hsWTNScGIyNDhRMVErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQyOXliR1F1WTI5dGNHOXVaVzUwUTI5c2JHVmpkR2x2Ym5NdVoyVjBLSFJvYVhNdVgybGtLU0I4ZkNCdVpYY2dRMjl0Y0c5dVpXNTBRMjlzYkdWamRHbHZianhEVkQ0b0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSeWFXVjJaWE1nWVd4c0lIUm9aU0IwWVdkeklIUm9ZWFFnYUdGMlpTQmlaV1Z1SUdGa1pHVmtJSFJ2SUhSb2FYTWdaVzUwYVhSNUxseHVJQ0FnS2k5Y2JpQWdaMlYwSUhSaFozTW9LVG9nVTJWMFBGUmhaejRnZTF4dUlDQWdJR052Ym5OMElIUmhaM01nUFNCdVpYY2dVMlYwUEZSaFp6NG9LVHRjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJRnQwWVdjc0lHVnVkR2wwZVZObGRGMGdiMllnZEdocGN5NWZkMjl5YkdRdVpXNTBhWFJwWlhOQ2VWUmhaM011Wlc1MGNtbGxjeWdwS1NCN1hHNGdJQ0FnSUNCcFppQW9aVzUwYVhSNVUyVjBMbWhoY3loMGFHbHpMbDlwWkNrcElIdGNiaUFnSUNBZ0lDQWdkR0ZuY3k1aFpHUW9kR0ZuS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR0ZuY3p0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUlc1MGFYUjVQRU5VUGloY2JpQWdkMjl5YkdRNklGZHZjbXhrUEVOVVBpeGNiaWs2SUVWdWRHbDBlVHhEVkQ0Z2UxeHVJQ0JqYjI1emRDQmxiblJwZEhrZ1BTQnVaWGNnUlc1MGFYUjVQRU5VUGloM2IzSnNaQ2s3WEc1Y2JpQWdjbVYwZFhKdUlHVnVkR2wwZVR0Y2JuMWNibHh1WEc0aUxDSnBiWEJ2Y25RZ1YyOXliR1FnWm5KdmJTQW5MaTlYYjNKc1pDYzdYRzVwYlhCdmNuUWdSVzUwYVhSNUlHWnliMjBnSnk0dlJXNTBhWFI1Snp0Y2JtbHRjRzl5ZENCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUlHWnliMjBnSnk0dlEyOXRjRzl1Wlc1MFEyOXNiR1ZqZEdsdmJpYzdYRzVjYm1WNGNHOXlkQ0IwZVhCbElGTjVjM1JsYlNBOUlDZ3BJRDArSUhadmFXUTdYRzVjYmk4cUtseHVJQ29nUVhKbmRXMWxiblJ6SUhSb1lYUWdZWEpsSUhCaGMzTmxaQ0JwYm5SdklHRWdVM2x6ZEdWdElHWjFibU4wYVc5dUlHOXVJR1ZoWTJnZ2FYUmxjbUYwYVc5dUxseHVJQ29nVkdocGN5QnBjeUJvYjNjZ2VXOTFJR0ZqWTJWeklIUm9hVzVuY3lCc2FXdGxJSFJvWlNCbGJuUnBkSGtnZEdoaGRDQndZWEowYVdOMWJHRnlJR1Z1ZEdsMGVTQjBieUJoWTNRZ2IyNHNYRzRnS2lCaGN5QjNaV3hzSUdGeklITnZiV1VnYjNSb1pYSWdhR1ZzY0daMWJDQndZWEpoYlhNZ2JHbHJaU0JwWmlCMGFHVWdaVzUwYVhSNUlHbHpJSFJvWlNCbWFYSnpkQ0J2Y2lCc1lYTjBJR1Z1ZEdsMGVWeHVJQ29nYVc0Z2RHaGxJR2R5YjNWd0lHOW1JR1Z1ZEdsMGFXVnpJSFJvWVhRZ1ltVnBibWNnYVhSbGNtRjBaV1FnYjNabGNpNWNiaUFxTDF4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCVGVYTjBaVzFHZFc1alFYSm5jenhEVkQ0Z2UxeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElHTjFjbkpsYm5RZ1pXNTBhWFI1SUdKbGFXNW5JR2wwWlhKaGRHVmtMbHh1SUNBZ0tpOWNiaUFnWlc1MGFYUjVPaUJGYm5ScGRIazhRMVErTzF4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdOdmJYQnZibVZ1ZEhNZ2RHaGhkQ0JpWld4dmJtY2dkRzhnZEdobElHVnVkR2wwZVZ4dUlDQWdLaTljYmlBZ1kyOXRjRzl1Wlc1MGN6b2dRMjl0Y0c5dVpXNTBRMjlzYkdWamRHbHZianhEVkQ0N1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1YyOXliR1FnYVc1emRHRnVZMlV1WEc0Z0lDQXFJRlZ6WlNCMGFHbHpJSFJ2SUdGalkyVnpjeUJ2ZEdobGNpQmxiblJwZEdsbGN5NWNiaUFnSUNvdlhHNGdJSGR2Y214a09pQlhiM0pzWkR4RFZENDdYRzRnSUdsdVpHVjRPaUJ1ZFcxaVpYSTdYRzRnSUhOcGVtVTZJRzUxYldKbGNqdGNiaUFnTHlvcVhHNGdJQ0FxSUVseklIUm9aU0JtYVhKemRDQmxiblJwZEhrZ2RHOGdZbVVnYVhSbGNtRjBaV1FnYjI0Z2RHaHBjeUJ5ZFc0Z2IyWWdZU0J6ZVhOMFpXMHVYRzRnSUNBcUlFaGxiSEJtZFd3Z1ptOXlJSE5sZEhScGJtY2dkWEFnYzNSaGRHVWdkR2hoZENCcGN5QjBhR1VnYzJGdFpTQm1iM0lnWVd4c0lHVnVkR2wwYVdWeklHOXViSGtnYjI1alpTNWNiaUFnSUNvdlhHNGdJR2x6Um1seWMzUTZJR0p2YjJ4bFlXNDdYRzRnSUM4cUtseHVJQ0FnS2lCSmN5QjBhR1VnYkdGemRDQmxiblJwZEhrZ2RHOGdZbVVnYVhSbGNtRjBaV1FnYjI0Z2RHaHBjeUJ5ZFc0Z2IyWWdZU0J6ZVhOMFpXMHVYRzRnSUNBcUlFTmhiaUJpWlNCb1pXeHdablZzSUhSdklIUmxZWElnWkc5M2JpQmhibmwwYUdsdVp5QjBhR0YwSUhOb2IzVnNaQ0JpWlNCa1pXRnNkQ0IzYVhSb0lHRm1kR1Z5SUdGc2JDQjBhR1VnWlc1MGFYUmxjeUJvWVhabElISmhiaTVjYmlBZ0lDb3ZYRzRnSUdselRHRnpkRG9nWW05dmJHVmhianRjYm4xY2JseHVMeW9xWEc0Z0tpQkdkVzVqZEdsdmJpQjBhR0YwSUdseklHTmhiR3hsWkNCM2FHVnVJR0VnYzNsemRHVnRJR2x6SUhKMWJpNWNiaUFxTDF4dVpYaHdiM0owSUhSNWNHVWdVM2x6ZEdWdFJuVnVZenhEVkQ0Z1BTQW9YRzRnSUhONWRHVnRSblZ1WTBGeVozTTZJRk41YzNSbGJVWjFibU5CY21kelBFTlVQaXhjYmlrZ1BUNGdkbTlwWkR0Y2JseHVMeW9xWEc0Z0tpQlVhR2x6SUdseklHaHZkeUI1YjNVZ1kzSmxZWFJsSUdFZ1UzbHpkR1Z0TGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUdCZ1lGeHVJQ29nWTNKbFlYUmxVM2x6ZEdWdEtIZHZjbXhrTENCYkowTnZiWEJ2Ym1WdWRGUjVjR1VuWFN3Z0tIc2daVzUwYVhSNUlIMHBJRDArSUNkRWJ5Qm1kVzRnYzNsemRHVnRJSFJvYVc1bmN5Qm9aWEpsTGljcFhHNGdLaUJnWUdCY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpWTjVjM1JsYlR4RFZENG9YRzRnSUhkdmNteGtPaUJYYjNKc1pEeERWRDRzWEc0Z0lHTlVlWEJsY3pvZ1ExUmJYU3hjYmlBZ2MzbHpkR1Z0Um5WdVl6b2dVM2x6ZEdWdFJuVnVZenhEVkQ1Y2JpazZJRk41YzNSbGJTQjdYRzRnSUhkdmNteGtMbkpsWjJsemRHVnlVM2x6ZEdWdEtHTlVlWEJsY3lrN1hHNWNiaUFnY21WMGRYSnVJQ2dwT2lCMmIybGtJRDArSUh0Y2JpQWdJQ0JzWlhRZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUdOdmJuTjBJSE5wZW1VZ1BTQjNiM0pzWkM1bGJuUnBkR2xsYzBKNVExUjVjR1Z6TG5OcGVtVTdYRzVjYmlBZ0lDQXZMeUJWYzJWa0lHWnZjaUJ0WVhSamFHbHVaeUIwYUdVZ1lYSnlZWGtnYjJZZ1EyOXRjRzl1Wlc1MFZIbHdaWE1nZDJocFkyZ2dhWE1nZEdobElHdGxlVnh1SUNBZ0lDOHZJRzltSUhkb1pYSmxJSFJvWlNCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dUlHbHpMQ0IzYVhSb0lIUm9aU0JoY25KaGVTQnZaaUJEYjIxd2IyNWxiblJVZVhCbGMxeHVJQ0FnSUM4dklIUm9ZWFFnWVhKbElIQmhjM05sY3k1Y2JpQWdJQ0F2THlCTmFXZG9kQ0JpWlNCdWFXTmxJR2x1SUhSb1pTQm1kWFIxY21VZ2RHOGdaMjhnWW1GamF5QjBieUJoSUhKbFppQmphR1ZqYXlCdmJpQmpWSGx3WlhNc0lHSjFkRnh1SUNBZ0lDOHZJR1p2Y2lCdWIzY2dkR2hwY3lCa2IyVnpiaWQwSUhObFpXMGdkRzhnWW1VZ2RHaGhkQ0J0ZFdOb0lHOW1JR0VnY0dWeVppQm9hWFF1WEc0Z0lDQWdMeThnWm05eUlDaGpiMjV6ZENCamRDQnZaaUIzYjNKc1pDNWxiblJwZEdsbGMwSjVRMVI1Y0dWekxtdGxlWE1vS1NrZ2UxeHVJQ0FnSUM4dklDQWdhV1lnS0dOVWVYQmxjeTVzWlc1bmRHZ2dQVDA5SUdOMExteGxibWQwYUNBbUppQmpWSGx3WlhNdVpYWmxjbmtvWXlBOVBpQmpkQzVwYm1Oc2RXUmxjeWhqS1NrcElIdGNiaUFnSUNBdkx5QWdJQ0FnWm05eUlDaGpiMjV6ZENCbGFXUWdiMllnZDI5eWJHUXVaVzUwYVhScFpYTkNlVU5VZVhCbGN5NW5aWFFvWTFSNWNHVnpLU2tnZTF4dUlDQWdJQzh2SUNBZ0lDQWdJR052Ym5OMElHRnlaM002SUZONWMzUmxiVVoxYm1OQmNtZHpQRU5VUGlBOUlIdGNiaUFnSUNBdkx5QWdJQ0FnSUNBZ0lHVnVkR2wwZVRvZ2QyOXliR1F1Wlc1MGFYUnBaWE11WjJWMEtHVnBaQ2tzWEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0JqYjIxd2IyNWxiblJ6T2lCM2IzSnNaQzVqYjIxd2IyNWxiblJEYjJ4c1pXTjBhVzl1Y3k1blpYUW9aV2xrS1N4Y2JpQWdJQ0F2THlBZ0lDQWdJQ0FnSUhkdmNteGtMRnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdhVzVrWlhnc1hHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNCemFYcGxMRnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdhWE5HYVhKemREb2dhVzVrWlhnZ1BUMDlJREFzWEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0JwYzB4aGMzUTZJR2x1WkdWNElDc2dNU0E5UFQwZ2MybDZaU3hjYmlBZ0lDQXZMeUFnSUNBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnTHk4Z0lDQWdJQ0FnYzNsemRHVnRSblZ1WXloaGNtZHpLVHRjYmlBZ0lDQmNiaUFnSUNBdkx5QWdJQ0FnSUNCcGJtUmxlQ0FyUFNBeE8xeHVJQ0FnSUM4dklDQWdJQ0I5WEc0Z0lDQWdMeThnSUNCOVhHNGdJQ0FnTHk4Z2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWTFSNWNHVkJjbkp6SUQwZ2QyOXliR1F1Wlc1MGFYUnBaWE5DZVVOVWVYQmxjeTVuWlhRb1kxUjVjR1Z6S1NCOGZDQnVaWGNnVTJWMEtDazdYRzVjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJR1ZwWkNCdlppQmpWSGx3WlVGeWNuTXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHRnlaM002SUZONWMzUmxiVVoxYm1OQmNtZHpQRU5VUGlBOUlIdGNiaUFnSUNBZ0lDQWdaVzUwYVhSNU9pQjNiM0pzWkM1bGJuUnBkR2xsY3k1blpYUW9aV2xrS1NCOGZDQnVaWGNnUlc1MGFYUjVQRU5VUGloM2IzSnNaQ2tzWEc0Z0lDQWdJQ0FnSUdOdmJYQnZibVZ1ZEhNNklIZHZjbXhrTG1OdmJYQnZibVZ1ZEVOdmJHeGxZM1JwYjI1ekxtZGxkQ2hsYVdRcElIeDhJRzVsZHlCRGIyMXdiMjVsYm5SRGIyeHNaV04wYVc5dVBFTlVQaWdwTEZ4dUlDQWdJQ0FnSUNCM2IzSnNaQ3hjYmlBZ0lDQWdJQ0FnYVc1a1pYZ3NYRzRnSUNBZ0lDQWdJSE5wZW1Vc1hHNGdJQ0FnSUNBZ0lHbHpSbWx5YzNRNklHbHVaR1Y0SUQwOVBTQXdMRnh1SUNBZ0lDQWdJQ0JwYzB4aGMzUTZJR2x1WkdWNElDc2dNU0E5UFQwZ2MybDZaU3hjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYzNsemRHVnRSblZ1WXloaGNtZHpLVHRjYmx4dUlDQWdJQ0FnYVc1a1pYZ2dLejBnTVR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRU52YlhCdmJtVnVkRHhEVkN3Z1V5QmxlSFJsYm1SeklHOWlhbVZqZENBOUlIdDlQaUI3WEc0Z0lIUjVjR1U2SUVOVU8xeHVJQ0J6ZEc5eVlXZGxPaUJUTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hOMGIzSmhaMlU2SUZNcElIdGNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW9YQ0pCWW5OMGNtRmpkRU52YlhCdmJtVnVkRndpSUdGeklIVnVhMjV2ZDI0cElHRnpJRU5VTzF4dUlDQWdJSFJvYVhNdWMzUnZjbUZuWlNBOUlITjBiM0poWjJVN1hHNWNiaUFnSUNCbWIzSWdLR052Ym5OMElGdHJaWGtzSUhaaGJGMGdiMllnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9jM1J2Y21GblpTa3BJSHRjYmlBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMGFHbHpMQ0JyWlhrc0lIdGNiaUFnSUNBZ0lDQWdaMlYwT2lBb0tUb2dkSGx3Wlc5bUlIWmhiQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSdmNtRm5aVnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6WlhRNklDaHVaWGgwVm1Gc09pQjBlWEJsYjJZZ2RtRnNLVG9nZG05cFpDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVlXZGxXMnRsZVYwZ1BTQnVaWGgwVm1Gc08xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUVdSa0lHZGxkSFJsY25NdmMyVjBkR1Z5Y3o5Y2JpQWdmVnh1WEc0Z0lDOHZJR2RsZEZCeWIzQmxjblI1S0NrNlhHNWNiaUFnTHk4Z1ZFOUVUem9nVjJsc2JDQmhaR1FnYjI1U1pXMXZkbVVnYkdGMFpYSWdZWE1nYm05MElIUnZJSE5qY21WM0lIVndJR052YlhCdmJtVnVkSE1nZEdoaGRGeHVJQ0F2THlBZ0lDQWdJQ0JjSW1sdGNHeGxiV1Z1ZEZ3aUlFTnZiWEJ2Ym1WdWRDQnBibk4wWldGa0lHOW1JRndpWlhoMFpXNWtYQ0pwYm1jZ2FYUXVYRzRnSUc5dVVtVnRiM1psS0NrNklIWnZhV1FnZTF4dUlDQWdJQzh2SUdWdGNIUjVYRzRnSUgxY2JuMWNiaUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFeHBabVZEZVdOc1pVTnZiWEJ2Ym1WdWREeERWQ3dnVXlCbGVIUmxibVJ6SUc5aWFtVmpkQ0E5SUc5aWFtVmpkRDRnZTF4dUlDQjBlWEJsT2lCRFZEdGNiaUFnYzNSdmNtRm5aVG9nVXp0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loemRHOXlZV2RsT2lCVEtTQjdYRzRnSUNBZ2RHaHBjeTUwZVhCbElEMGdLRndpUVdKemRISmhZM1JEYjIxd2IyNWxiblJjSWlCaGN5QjFibXR1YjNkdUtTQmhjeUJEVkR0Y2JseHVJQ0FnSUM4dklGTm9iM1ZzWkNCMGFHVWdjSEp2ZUhrZ1ltVWdZU0JjSW5KbGRtOWpZV0pzWlZ3aUlIUjVjR1UvWEc0Z0lDQWdkR2hwY3k1emRHOXlZV2RsSUQwZ2JtVjNJRkJ5YjNoNUtITjBiM0poWjJVc0lIdGNiaUFnSUNBZ0lHZGxkRG9nZEdocGN5NW9ZVzVrYkdWVGRHOXlZV2RsVUhKdmNFRmpZMlZ6Y3l4Y2JpQWdJQ0FnSUhObGREb2dkR2hwY3k1b1lXNWtiR1ZUZEc5eVlXZGxVSEp2Y0VOb1lXNW5aU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdoaGJtUnNaVk4wYjNKaFoyVlFjbTl3UVdOalpYTnpJRDBnS0Z4dUlDQWdJRjkwWVhKblpYUTZJRk1zWEc0Z0lDQWdjSEp2Y0RvZ2EyVjViMllnVXl4Y2JpQWdJQ0JmY21WalpXbDJaWEk2SUdGdWVWeHVJQ0FwT2lCVFcydGxlVzltSUZOZElEMCtJSHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmhaMlZYYVd4c1FtVkJZMk5sYzNObFpDaHdjbTl3S1R0Y2JseHVJQ0FnSUdOdmJuTjBJSFpoYkNBOUlIUm9hWE11YjI1VGRHOXlZV2RsUVdOalpYTnpLSEJ5YjNBcE8xeHVYRzRnSUNBZ2RHaHBjeTV6ZEc5eVlXZGxWMkZ6UVdOalpYTnpaV1FvY0hKdmNDazdYRzVjYmlBZ0lDQnlaWFIxY200Z2RtRnNPMXh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVk4wYjNKaFoyVlFjbTl3UTJoaGJtZGxJRDBnS0Z4dUlDQWdJSFJoY21kbGREb2dVeXhjYmlBZ0lDQndjbTl3T2lCclpYbHZaaUJUTEZ4dUlDQWdJSFpoYkhWbE9pQmhibmtzWEc0Z0lDQWdYM0psWTJWcGRtVnlPaUJoYm5sY2JpQWdLVG9nWW05dmJHVmhiaUE5UGlCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YzNSdmNtRm5aVk5vYjNWc1pGVndaR0YwWlNod2NtOXdMQ0IyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMzUnZjbUZuWlZkcGJHeFZjR1JoZEdVb2NISnZjQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2NISmxkbFpoYkhWbElEMGdkR0Z5WjJWMFczQnliM0JkTzF4dUlDQWdJQ0FnZEdGeVoyVjBXM0J5YjNCZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNCMGFHbHpMbk4wYjNKaFoyVkVhV1JWY0dSaGRHVW9jSEp2Y0N3Z2NISmxkbFpoYkhWbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlR0Y2JseHVJQ0F2THlCTWFXWmxZM2xqYkdVZ2JXVjBhRzlrYzF4dUlDQnpkRzl5WVdkbFUyaHZkV3hrVlhCa1lYUmxLRjl3Y205d09pQnJaWGx2WmlCVExDQmZkbUZzZFdVNklHRnVlU2s2SUdKdmIyeGxZVzRnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2MzUnZjbUZuWlZkcGJHeENaVUZqWTJWemMyVmtLRjl3Y205d09pQnJaWGx2WmlCVEtUb2dkbTlwWkNCN1hHNGdJQ0FnTHk4Z2JHVm1kQ0JsYlhCMGVTNWNiaUFnZlZ4dVhHNGdJRzl1VTNSdmNtRm5aVUZqWTJWemN5aHdjbTl3T2lCclpYbHZaaUJUS1RvZ1UxdHJaWGx2WmlCVFhTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1J2Y21GblpWdHdjbTl3WFR0Y2JpQWdmVnh1WEc0Z0lITjBiM0poWjJWWFlYTkJZMk5sYzNObFpDaGZjSEp2Y0RvZ2EyVjViMllnVXlrNklIWnZhV1FnZTF4dUlDQWdJQzh2SUd4bFpuUWdaVzF3ZEhrdVhHNGdJSDFjYmx4dUlDQnpkRzl5WVdkbFYybHNiRlZ3WkdGMFpTaGZjSEp2Y0RvZ2EyVjViMllnVXl3Z1gyNWxlSFJXWVd4MVpUb2dZVzU1S1RvZ2RtOXBaQ0I3WEc0Z0lDQWdMeThnYkdWbWRDQmxiWEIwZVM1Y2JpQWdmVnh1WEc0Z0lITjBiM0poWjJWRWFXUlZjR1JoZEdVb1gzQnliM0E2SUd0bGVXOW1JRk1zSUY5d2NtVjJWbUZzZFdVNklHRnVlU2s2SUhadmFXUWdlMXh1SUNBZ0lDOHZJR3hsWm5RZ1pXMXdkSGt1WEc0Z0lIMWNibHh1SUNCdmJsSmxiVzkyWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0F2THlCa2J5QnpkSFZtWmlCM2FHVnVJSEpsYlc5MlpXUXVMaTR1WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCWGIzSnNaQ0JtY205dElDY3VMMWR2Y214a0p6dGNibWx0Y0c5eWRDQjdJR055WldGMFpVVnVkR2wwZVNCOUlHWnliMjBnSnk0dlJXNTBhWFI1Snp0Y2JtbHRjRzl5ZENCN0lHTnlaV0YwWlZONWMzUmxiU0I5SUdaeWIyMGdKeTR2VTNsemRHVnRKenRjYm1sdGNHOXlkQ0JEYjIxd2IyNWxiblFnWm5KdmJTQW5MaTlEYjIxd2IyNWxiblFuTzF4dWFXMXdiM0owSUV4cFptVmplV05zWlVOdmJYQnZibVZ1ZENCbWNtOXRJQ2N1TDB4cFptVmplV05zWlVOdmJYQnZibVZ1ZENjN1hHNWNibVY0Y0c5eWRDQjdYRzRnSUZkdmNteGtMRnh1SUNCamNtVmhkR1ZGYm5ScGRIa3NYRzRnSUdOeVpXRjBaVk41YzNSbGJTeGNiaUFnUTI5dGNHOXVaVzUwTEZ4dUlDQk1hV1psWTNsamJHVkRiMjF3YjI1bGJuUXNYRzU5TzF4dUlsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMVxcbicpfV0pfSkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(V,l,U){V.exports=U(6)},function(module,exports){eval('/*\n Things that will need to be done:\n  - Monitor adding/removing of drag related elements. Maybe add mutation observers\n   to them or something.\n  - Need to figure out some kind of state management. Will the state be global?\n*/\nclass DragWrapper extends HTMLElement {\n  constructor() {\n    super();\n    console.time(\'closest\');\n    const a = this.closest("dnd-overlord");\n    console.timeEnd("closest");\n    console.log(\'a\', a === null || a === void 0 ? void 0 : a._state);\n  }\n\n}\n\ncustomElements.define("drag-wrapper", DragWrapper);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi9zcmMvZG9tLWVsZW1lbnRzL0RyYWdXcmFwcGVyLnRzP2U4ODUiXSwibmFtZXMiOlsiRHJhZ1dyYXBwZXIiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwiY29uc29sZSIsInRpbWUiLCJhIiwiY2xvc2VzdCIsInRpbWVFbmQiLCJsb2ciLCJfc3RhdGUiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQVNBLE1BQU1BLFdBQU4sU0FBMEJDLFdBQTFCLENBQXNDO0FBQ3BDQyxhQUFXLEdBQUc7QUFDWjtBQUVBQyxXQUFPLENBQUNDLElBQVIsQ0FBYSxTQUFiO0FBQ0EsVUFBTUMsQ0FBQyxHQUFHLEtBQUtDLE9BQUwsQ0FBMEIsY0FBMUIsQ0FBVjtBQUNBSCxXQUFPLENBQUNJLE9BQVIsQ0FBZ0IsU0FBaEI7QUFDQUosV0FBTyxDQUFDSyxHQUFSLENBQVksR0FBWixFQUFpQkgsQ0FBakIsYUFBaUJBLENBQWpCLHVCQUFpQkEsQ0FBQyxDQUFFSSxNQUFwQjtBQUNEOztBQVJtQzs7QUFXdENDLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQixjQUF0QixFQUFzQ1gsV0FBdEMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gVGhpbmdzIHRoYXQgd2lsbCBuZWVkIHRvIGJlIGRvbmU6XG4gIC0gTW9uaXRvciBhZGRpbmcvcmVtb3Zpbmcgb2YgZHJhZyByZWxhdGVkIGVsZW1lbnRzLiBNYXliZSBhZGQgbXV0YXRpb24gb2JzZXJ2ZXJzXG4gICB0byB0aGVtIG9yIHNvbWV0aGluZy5cbiAgLSBOZWVkIHRvIGZpZ3VyZSBvdXQgc29tZSBraW5kIG9mIHN0YXRlIG1hbmFnZW1lbnQuIFdpbGwgdGhlIHN0YXRlIGJlIGdsb2JhbD9cbiovXG5cbmltcG9ydCBETkRPdmVybG9yZCBmcm9tICcuL0RORE92ZXJsb3JkJztcblxuY2xhc3MgRHJhZ1dyYXBwZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zb2xlLnRpbWUoJ2Nsb3Nlc3QnKTtcbiAgICBjb25zdCBhID0gdGhpcy5jbG9zZXN0PERORE92ZXJsb3JkPihcImRuZC1vdmVybG9yZFwiKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoXCJjbG9zZXN0XCIpO1xuICAgIGNvbnNvbGUubG9nKCdhJywgYT8uX3N0YXRlKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJkcmFnLXdyYXBwZXJcIiwgRHJhZ1dyYXBwZXIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("class DraggingContent extends HTMLElement {\n  constructor() {\n    super();\n    this.style.display = 'none';\n  }\n\n}\n\ncustomElements.define(\"dragging-content\", DraggingContent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi9zcmMvZG9tLWVsZW1lbnRzL0RyYWdnaW5nQ29udGVudC50cz8xNWY0Il0sIm5hbWVzIjpbIkRyYWdnaW5nQ29udGVudCIsIkhUTUxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJzdHlsZSIsImRpc3BsYXkiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBTixTQUE4QkMsV0FBOUIsQ0FBMEM7QUFDeENDLGFBQVcsR0FBRztBQUNaO0FBRUEsU0FBS0MsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLE1BQXJCO0FBQ0Q7O0FBTHVDOztBQVExQ0MsY0FBYyxDQUFDQyxNQUFmLENBQXNCLGtCQUF0QixFQUEwQ04sZUFBMUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERyYWdnaW5nQ29udGVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJkcmFnZ2luZy1jb250ZW50XCIsIERyYWdnaW5nQ29udGVudCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval('class DraggingPlaceholder extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n}\n\ncustomElements.define("dragging-placeholder", DraggingPlaceholder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi9zcmMvZG9tLWVsZW1lbnRzL0RyYWdnaW5nUGxhY2Vob2xkZXIudHM/NWQzZiJdLCJuYW1lcyI6WyJEcmFnZ2luZ1BsYWNlaG9sZGVyIiwiSFRNTEVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxtQkFBTixTQUFrQ0MsV0FBbEMsQ0FBOEM7QUFDNUNDLGFBQVcsR0FBRztBQUNaO0FBQ0Q7O0FBSDJDOztBQU05Q0MsY0FBYyxDQUFDQyxNQUFmLENBQXNCLHNCQUF0QixFQUE4Q0osbUJBQTlDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBEcmFnZ2luZ1BsYWNlaG9sZGVyIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImRyYWdnaW5nLXBsYWNlaG9sZGVyXCIsIERyYWdnaW5nUGxhY2Vob2xkZXIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval("class DropZone extends HTMLElement {\n  constructor() {\n    super();\n    console.log('drop-zone!!');\n  }\n\n}\n\ncustomElements.define(\"drop-zone\", DropZone);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi9zcmMvZG9tLWVsZW1lbnRzL0Ryb3Bab25lLnRzPzNjN2IiXSwibmFtZXMiOlsiRHJvcFpvbmUiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwiY29uc29sZSIsImxvZyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFOLFNBQXVCQyxXQUF2QixDQUFtQztBQUNqQ0MsYUFBVyxHQUFHO0FBQ1o7QUFFQUMsV0FBTyxDQUFDQyxHQUFSLENBQVksYUFBWjtBQUNEOztBQUxnQzs7QUFRbkNDLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQixXQUF0QixFQUFtQ04sUUFBbkMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERyb3Bab25lIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgY29uc29sZS5sb2coJ2Ryb3Atem9uZSEhJyk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZHJvcC16b25lXCIsIERyb3Bab25lKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/components/index.ts\nlet Components;\n\n(function (Components) {\n  Components[\"DragInteraction\"] = \"DragInteraction\";\n})(Components || (Components = {}));\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// EXTERNAL MODULE: ../ecstatic/dist/bundle.js\nvar bundle = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/systems/dragElement.ts\n\nconst dragElementComps = [Components.DragInteraction];\nfunction dragElement(args) {\n  console.log('dragging element');\n  const {\n    components\n  } = args;\n  const interaction = components.get(Components.DragInteraction);\n\n  if (!interaction.initialized) {\n    console.log('init it!!', interaction);\n    interaction.initialized = true;\n    console.log('after: ', interaction.initialized);\n  } // const interaction = \n\n}\n;\n// CONCATENATED MODULE: ./src/systems/index.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass systems_Systems {\n  constructor(world) {\n    _defineProperty(this, \"dragElement\", void 0);\n\n    this.dragElement = Object(bundle[\"createSystem\"])(world, dragElementComps, dragElement);\n  }\n\n  run() {\n    this.dragElement(); // run whatever systems here.\n  }\n\n}\n\n/* harmony default export */ var src_systems = (systems_Systems);\n// CONCATENATED MODULE: ./src/dom-elements/DNDOverlord.ts\nfunction DNDOverlord_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n  This is the main provider of state for all the drag and drop components\n  within it. \n*/\n\n\n // import { }\n\nclass DNDOverlord_DNDOverlord extends HTMLElement {\n  constructor() {\n    super();\n\n    DNDOverlord_defineProperty(this, \"overlordID\", void 0);\n\n    DNDOverlord_defineProperty(this, \"world\", void 0);\n\n    DNDOverlord_defineProperty(this, \"systems\", void 0);\n\n    this.overlordID = esm_browser_v4();\n    this.world = new bundle[\"World\"]();\n    this.systems = new src_systems(this.world);\n  }\n\n}\n\ncustomElements.define(\"dnd-overlord\", DNDOverlord_DNDOverlord);\n/* harmony default export */ var dom_elements_DNDOverlord = (DNDOverlord_DNDOverlord);\n// EXTERNAL MODULE: ./src/dom-elements/DragWrapper.ts\nvar DragWrapper = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/components/interactions/DragInteraction.ts\nfunction DragInteraction_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass DragInteraction_DragInteraction extends bundle[\"Component\"] {\n  constructor(storage) {\n    super(storage); // this.storage = storage;\n\n    DragInteraction_defineProperty(this, \"type\", Components.DragInteraction);\n  }\n\n}\n\n/* harmony default export */ var interactions_DragInteraction = (DragInteraction_DragInteraction);\n// CONCATENATED MODULE: ./src/dom-elements/DragContent.ts\n\n\n\nclass DragContent_DragContent extends HTMLElement {\n  constructor() {\n    console.log('hello?');\n    super();\n    this.addEventListener(\"pointerdown\", this.onPointerDown);\n  }\n\n  onPointerDown(evt) {\n    console.log('pointer down!!');\n    const overlord = this.closest(\"dnd-overlord\");\n\n    if (overlord) {\n      const {\n        world,\n        systems\n      } = overlord;\n      Object(bundle[\"createEntity\"])(world).add(new interactions_DragInteraction({\n        element: this,\n        initialized: false\n      }));\n      systems.run();\n    } // this.style.position = 'absolute';\n    // this.style.left = `${evt.x}px`;\n    // this.style.top = `${evt.y}px`;\n    // document.addEventListener('pointermove', this.onPointerMove);\n    // this.addEventListener('pointerup', this.onPointerUp);\n\n  } // onPointerMove(evt: PointerEvent) {\n  //   this.style.left = `${evt.x}px`;\n  //   this.style.top = `${evt.y}px`;\n  // }\n  // onPointerUp(evt: PointerEvent) {\n  //   document.removeEventListener(\"pointermove\", this.onPointerMove);\n  // }\n\n\n  disconnectedCallback() {\n    this.removeEventListener(\"pointerdown\", this.onPointerDown);\n  }\n\n}\n\ncustomElements.define(\"drag-content\", DragContent_DragContent);\n// EXTERNAL MODULE: ./src/dom-elements/DraggingContent.ts\nvar DraggingContent = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/dom-elements/DraggingPlaceholder.ts\nvar DraggingPlaceholder = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./src/dom-elements/DropZone.ts\nvar DropZone = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/dom-elements/index.ts\n\n\n\n\n\n\n// CONCATENATED MODULE: ./src/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")}])}));