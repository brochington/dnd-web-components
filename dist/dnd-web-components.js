!function(V,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define("dnd-web-components",[],U):"object"==typeof exports?exports["dnd-web-components"]=U():V["dnd-web-components"]=U()}(window,(function(){return function(V){var U={};function Q(F){if(U[F])return U[F].exports;var l=U[F]={i:F,l:!1,exports:{}};return V[F].call(l.exports,l,l.exports,Q),l.l=!0,l.exports}return Q.m=V,Q.c=U,Q.d=function(V,U,F){Q.o(V,U)||Object.defineProperty(V,U,{enumerable:!0,get:F})},Q.r=function(V){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(V,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(V,"__esModule",{value:!0})},Q.t=function(V,U){if(1&U&&(V=Q(V)),8&U)return V;if(4&U&&"object"==typeof V&&V&&V.__esModule)return V;var F=Object.create(null);if(Q.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:V}),2&U&&"string"!=typeof V)for(var l in V)Q.d(F,l,function(U){return V[U]}.bind(null,l));return F},Q.n=function(V){var U=V&&V.__esModule?function(){return V.default}:function(){return V};return Q.d(U,"a",U),U},Q.o=function(V,U){return Object.prototype.hasOwnProperty.call(V,U)},Q.p="",Q(Q.s=2)}([function(module,exports,__webpack_require__){eval('!function(n,Q){ true?module.exports=Q():undefined}(window,(function(){return function(n){var Q=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(n,B){!function(n,Q){if(!y[n]||!X[n])return;for(var B in X[n]=!1,Q)Object.prototype.hasOwnProperty.call(Q,B)&&(C[B]=Q[B]);0==--G&&0===u&&x()}(n,B),Q&&Q(n,B)};var B,e=!0,t="50d5cd64242c22c490d7",F={},i=[],I=[];function c(n){var Q=E[n];if(!Q)return N;var e=function(e){return Q.hot.active?(E[e]?-1===E[e].parents.indexOf(n)&&E[e].parents.push(n):(i=[n],B=e),-1===Q.children.indexOf(e)&&Q.children.push(e)):(console.warn("[HMR] unexpected require("+e+") from disposed module "+n),i=[]),N(e)},t=function(n){return{configurable:!0,enumerable:!0,get:function(){return N[n]},set:function(Q){N[n]=Q}}};for(var F in N)Object.prototype.hasOwnProperty.call(N,F)&&"e"!==F&&"t"!==F&&Object.defineProperty(e,F,t(F));return e.e=function(n){return"ready"===U&&g("prepare"),u++,N.e(n).then(Q,(function(n){throw Q(),n}));function Q(){u--,"prepare"===U&&(a[n]||r(n),0===u&&0===G&&x())}},e.t=function(n,Q){return 1&Q&&(n=e(n)),N.t(n,-2&Q)},e}function l(Q){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:B!==Q,active:!0,accept:function(n,Q){if(void 0===n)e._selfAccepted=!0;else if("function"==typeof n)e._selfAccepted=n;else if("object"==typeof n)for(var B=0;B<n.length;B++)e._acceptedDependencies[n[B]]=Q||function(){};else e._acceptedDependencies[n]=Q||function(){}},decline:function(n){if(void 0===n)e._selfDeclined=!0;else if("object"==typeof n)for(var Q=0;Q<n.length;Q++)e._declinedDependencies[n[Q]]=!0;else e._declinedDependencies[n]=!0},dispose:function(n){e._disposeHandlers.push(n)},addDisposeHandler:function(n){e._disposeHandlers.push(n)},removeDisposeHandler:function(n){var Q=e._disposeHandlers.indexOf(n);Q>=0&&e._disposeHandlers.splice(Q,1)},invalidate:function(){switch(this._selfInvalidated=!0,U){case"idle":(C={})[Q]=n[Q],g("ready");break;case"ready":L(Q);break;case"prepare":case"check":case"dispose":case"apply":(o=o||[]).push(Q)}},check:Z,apply:R,status:function(n){if(!n)return U;s.push(n)},addStatusHandler:function(n){s.push(n)},removeStatusHandler:function(n){var Q=s.indexOf(n);Q>=0&&s.splice(Q,1)},data:F[Q]};return B=void 0,e}var s=[],U="idle";function g(n){U=n;for(var Q=0;Q<s.length;Q++)s[Q].call(null,n)}var d,C,b,o,G=0,u=0,a={},X={},y={};function V(n){return+n+""===n?+n:n}function Z(n){if("idle"!==U)throw new Error("check() is only allowed in idle status");return e=n,g("check"),(Q=1e4,Q=Q||1e4,new Promise((function(n,B){if("undefined"==typeof XMLHttpRequest)return B(new Error("No browser support"));try{var e=new XMLHttpRequest,t=N.p+"hot/hot-update.json";e.open("GET",t,!0),e.timeout=Q,e.send(null)}catch(n){return B(n)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)B(new Error("Manifest request to "+t+" timed out."));else if(404===e.status)n();else if(200!==e.status&&304!==e.status)B(new Error("Manifest request to "+t+" failed."));else{try{var Q=JSON.parse(e.responseText)}catch(n){return void B(n)}n(Q)}}}))).then((function(n){if(!n)return g(p()?"ready":"idle"),null;X={},a={},y=n.c,b=n.h,g("prepare");var Q=new Promise((function(n,Q){d={resolve:n,reject:Q}}));C={};return r(0),"prepare"===U&&0===u&&0===G&&x(),Q}));var Q}function r(n){var Q;y[n]?(X[n]=!0,G++,(Q=document.createElement("script")).charset="utf-8",Q.src=N.p+"hot/hot-update.js",document.head.appendChild(Q)):a[n]=!0}function x(){g("ready");var n=d;if(d=null,n)if(e)Promise.resolve().then((function(){return R(e)})).then((function(Q){n.resolve(Q)}),(function(Q){n.reject(Q)}));else{var Q=[];for(var B in C)Object.prototype.hasOwnProperty.call(C,B)&&Q.push(V(B));n.resolve(Q)}}function R(Q){if("ready"!==U)throw new Error("apply() is only allowed in ready status");return function Q(e){var I,c,l,s,U;function d(n){for(var Q=[n],B={},e=Q.map((function(n){return{chain:[n],id:n}}));e.length>0;){var t=e.pop(),F=t.id,i=t.chain;if((s=E[F])&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:F};if(s.hot._main)return{type:"unaccepted",chain:i,moduleId:F};for(var I=0;I<s.parents.length;I++){var c=s.parents[I],l=E[c];if(l){if(l.hot._declinedDependencies[F])return{type:"declined",chain:i.concat([c]),moduleId:F,parentId:c};-1===Q.indexOf(c)&&(l.hot._acceptedDependencies[F]?(B[c]||(B[c]=[]),G(B[c],[F])):(delete B[c],Q.push(c),e.push({chain:i.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:n,outdatedModules:Q,outdatedDependencies:B}}function G(n,Q){for(var B=0;B<Q.length;B++){var e=Q[B];-1===n.indexOf(e)&&n.push(e)}}p();var u={},a=[],X={},Z=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var r in C)if(Object.prototype.hasOwnProperty.call(C,r)){var x;U=V(r),x=C[r]?d(U):{type:"disposed",moduleId:r};var R=!1,L=!1,m=!1,W="";switch(x.chain&&(W="\\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":e.onDeclined&&e.onDeclined(x),e.ignoreDeclined||(R=new Error("Aborted because of self decline: "+x.moduleId+W));break;case"declined":e.onDeclined&&e.onDeclined(x),e.ignoreDeclined||(R=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+W));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(x),e.ignoreUnaccepted||(R=new Error("Aborted because "+U+" is not accepted"+W));break;case"accepted":e.onAccepted&&e.onAccepted(x),L=!0;break;case"disposed":e.onDisposed&&e.onDisposed(x),m=!0;break;default:throw new Error("Unexception type "+x.type)}if(R)return g("abort"),Promise.reject(R);if(L)for(U in X[U]=C[U],G(a,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,U)&&(u[U]||(u[U]=[]),G(u[U],x.outdatedDependencies[U]));m&&(G(a,[x.moduleId]),X[U]=Z)}var A,h=[];for(c=0;c<a.length;c++)U=a[c],E[U]&&E[U].hot._selfAccepted&&X[U]!==Z&&!E[U].hot._selfInvalidated&&h.push({module:U,parents:E[U].parents.slice(),errorHandler:E[U].hot._selfAccepted});g("dispose"),Object.keys(y).forEach((function(n){!1===y[n]&&function(n){delete installedChunks[n]}(n)}));var D,S,H=a.slice();for(;H.length>0;)if(U=H.pop(),s=E[U]){var v={},Y=s.hot._disposeHandlers;for(l=0;l<Y.length;l++)(I=Y[l])(v);for(F[U]=v,s.hot.active=!1,delete E[U],delete u[U],l=0;l<s.children.length;l++){var T=E[s.children[l]];T&&((A=T.parents.indexOf(U))>=0&&T.parents.splice(A,1))}}for(U in u)if(Object.prototype.hasOwnProperty.call(u,U)&&(s=E[U]))for(S=u[U],l=0;l<S.length;l++)D=S[l],(A=s.children.indexOf(D))>=0&&s.children.splice(A,1);g("apply"),void 0!==b&&(t=b,b=void 0);for(U in C=void 0,X)Object.prototype.hasOwnProperty.call(X,U)&&(n[U]=X[U]);var f=null;for(U in u)if(Object.prototype.hasOwnProperty.call(u,U)&&(s=E[U])){S=u[U];var J=[];for(c=0;c<S.length;c++)if(D=S[c],I=s.hot._acceptedDependencies[D]){if(-1!==J.indexOf(I))continue;J.push(I)}for(c=0;c<J.length;c++){I=J[c];try{I(S)}catch(n){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:U,dependencyId:S[c],error:n}),e.ignoreErrored||f||(f=n)}}}for(c=0;c<h.length;c++){var z=h[c];U=z.module,i=z.parents,B=U;try{N(U)}catch(n){if("function"==typeof z.errorHandler)try{z.errorHandler(n)}catch(Q){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:U,error:Q,originalError:n}),e.ignoreErrored||f||(f=Q),f||(f=n)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:U,error:n}),e.ignoreErrored||f||(f=n)}}if(f)return g("fail"),Promise.reject(f);if(o)return Q(e).then((function(n){return a.forEach((function(Q){n.indexOf(Q)<0&&n.push(Q)})),n}));return g("idle"),new Promise((function(n){n(a)}))}(Q=Q||{})}function p(){if(o)return C||(C={}),o.forEach(L),o=void 0,!0}function L(Q){Object.prototype.hasOwnProperty.call(C,Q)||(C[Q]=n[Q])}var E={};function N(Q){if(E[Q])return E[Q].exports;var B=E[Q]={i:Q,l:!1,exports:{},hot:l(Q),parents:(I=i,i=[],I),children:[]};return n[Q].call(B.exports,B,B.exports,c(Q)),B.l=!0,B.exports}return N.m=n,N.c=E,N.d=function(n,Q,B){N.o(n,Q)||Object.defineProperty(n,Q,{enumerable:!0,get:B})},N.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},N.t=function(n,Q){if(1&Q&&(n=N(n)),8&Q)return n;if(4&Q&&"object"==typeof n&&n&&n.__esModule)return n;var B=Object.create(null);if(N.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:n}),2&Q&&"string"!=typeof n)for(var e in n)N.d(B,e,function(Q){return n[Q]}.bind(null,e));return B},N.n=function(n){var Q=n&&n.__esModule?function(){return n.default}:function(){return n};return N.d(Q,"a",Q),Q},N.o=function(n,Q){return Object.prototype.hasOwnProperty.call(n,Q)},N.p="/static/",N.h=function(){return t},c(0)(N.s=0)}([function(n,Q,B){n.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval(\'// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\\n\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\\n// require the crypto API and do not support built-in fallback to lower quality random number\\n// generators (like Math.random()).\\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\\n// find the complete implementation of crypto (msCrypto) on IE11.\\nvar getRandomValues = typeof crypto !== \\\'undefined\\\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \\\'undefined\\\' && typeof msCrypto.getRandomValues === \\\'function\\\' && msCrypto.getRandomValues.bind(msCrypto);\\nvar rnds8 = new Uint8Array(16);\\nfunction rng() {\\n  if (!getRandomValues) {\\n    throw new Error(\\\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\\\');\\n  }\\n\\n  return getRandomValues(rnds8);\\n}\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\\n\\n\\nfunction validate(uuid) {\\n  return typeof uuid === \\\'string\\\' && regex.test(uuid);\\n}\\n\\n/* harmony default export */ var esm_browser_validate = (validate);\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\\n\\n/**\\n * Convert array of 16 byte values to UUID string format of the form:\\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\n */\\n\\nvar byteToHex = [];\\n\\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\\n}\\n\\nfunction stringify(arr) {\\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n  // Note: Be careful editing this code!  It\\\'s been tuned for performance\\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \\\'-\\\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \\\'-\\\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \\\'-\\\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \\\'-\\\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\\\'s likely due to one\\n  // of the following:\\n  // - One or more input array values don\\\'t map to a hex octet (leading to\\n  // "undefined" in the uuid)\\n  // - Invalid input values for the RFC `version` or `variant` fields\\n\\n  if (!esm_browser_validate(uuid)) {\\n    throw TypeError(\\\'Stringified UUID is invalid\\\');\\n  }\\n\\n  return uuid;\\n}\\n\\n/* harmony default export */ var esm_browser_stringify = (stringify);\\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\\n\\n\\n\\nfunction v4(options, buf, offset) {\\n  options = options || {};\\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\\n\\n  rnds[6] = rnds[6] & 0x0f | 0x40;\\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\\n\\n  if (buf) {\\n    offset = offset || 0;\\n\\n    for (var i = 0; i < 16; ++i) {\\n      buf[offset + i] = rnds[i];\\n    }\\n\\n    return buf;\\n  }\\n\\n  return esm_browser_stringify(rnds);\\n}\\n\\n/* harmony default export */ var esm_browser_v4 = (v4);\\n// CONCATENATED MODULE: ./src/guards.ts\\n// export function classIsCompType(cl: any)\\nfunction isComponentInstance(Class, comp) {\\n  if (!comp) {\\n    return false;\\n  }\\n\\n  if (!(comp instanceof Class)) {\\n    return false;\\n  }\\n\\n  return true;\\n}\\nfunction isComponentName(possibleName, entitiesByCTypes) {\\n  // string\\n  if (typeof possibleName !== \\\'string\\\') {\\n    return false;\\n  }\\n\\n  for (const a of entitiesByCTypes.keys()) {\\n    if (a.includes(possibleName)) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n}\\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n// CT is a Union, like `type = typeof FirstComponent | typeof SecondComponent`.\\nclass ComponentCollection_ComponentCollection {\\n  constructor() {\\n    _defineProperty(this, "components", new Map());\\n\\n    _defineProperty(this, "add", component => {\\n      this.components.set(component.constructor.name, component);\\n    });\\n\\n    _defineProperty(this, "update", (cl, func) => {\\n      const c = this.components.get(cl.name);\\n\\n      if (isComponentInstance(cl, c)) {\\n        const updatedComponent = func(c);\\n        this.components.set(cl.name, updatedComponent);\\n      }\\n    });\\n\\n    _defineProperty(this, "remove", cType => {\\n      this.components.delete(cType.name);\\n    });\\n\\n    _defineProperty(this, "get", cl => {\\n      const comp = this.components.get(cl.name);\\n\\n      if (isComponentInstance(cl, comp)) {\\n        return comp;\\n      } else {\\n        throw new Error(`ComponentCollection does not have component of type ${cl.name}`);\\n      }\\n    });\\n\\n    _defineProperty(this, "has", cType => {\\n      return Array.isArray(cType) ? cType.every(ct => this.components.has(ct.name) === true) : this.components.has(cType.name);\\n    });\\n\\n    _defineProperty(this, "hasByName", cName => {\\n      return Array.isArray(cName) ? cName.every(ct => this.components.has(ct) === true) : this.components.has(cName);\\n    });\\n  }\\n\\n  /**\\n   * Get the component type names that are currently being used in the collection.\\n   */\\n  get componentTypes() {\\n    return [...this.components.keys()];\\n  }\\n  /**\\n   * Get the current number of components that are in the collection.\\n   */\\n\\n\\n  get size() {\\n    return this.components.size;\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./src/Entity.ts\\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nclass Entity_Entity {\\n  constructor(world) {\\n    Entity_defineProperty(this, "_id", void 0);\\n\\n    Entity_defineProperty(this, "_world", void 0);\\n\\n    this._id = esm_browser_v4();\\n    this._world = world;\\n    /*\\n    Registering with the World.\\n    */\\n\\n    this._world.registerEntity(this);\\n  }\\n  /**\\n   * Add a component to an Entity, doh.\\n   */\\n\\n\\n  add(component) {\\n    this._world.set(this._id, component);\\n\\n    return this;\\n  }\\n  /**\\n   * Add a tag to a component\\n   */\\n\\n\\n  addTag(tag) {\\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\\n\\n    if (entitySet) {\\n      entitySet.add(this._id);\\n\\n      this._world.entitiesByTags.set(tag, entitySet);\\n    }\\n\\n    return this;\\n  }\\n  /**\\n   * Determines if an entity has a component related to it.\\n   */\\n\\n\\n  has(cType) {\\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\\n    return cc.has(cType);\\n  }\\n\\n  hasAll(cTypes) {\\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\\n\\n    for (const ct of cTypes) {\\n      if (!cc.has(ct)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n  /**\\n   * Check to see if an entity tagged with a given tag.\\n   */\\n\\n\\n  hasTag(tag) {\\n    if (this._world.entitiesByTags.has(tag)) {\\n      const entitySet = this._world.entitiesByTags.get(tag);\\n\\n      if (entitySet) {\\n        return entitySet.has(this._id);\\n      }\\n    }\\n\\n    return false;\\n  }\\n  /**\\n   * Get a component that belongs to an entity.\\n   */\\n\\n\\n  get(cl) {\\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\\n    const component = cc.get(cl);\\n    return component;\\n  }\\n  /**\\n   * Get all components that have been added to an entity, via a ComponentCollection\\n   */\\n\\n\\n  getAll() {\\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\\n  }\\n  /**\\n   * Remove a component from an entity.\\n   * @param cType A component class, eg MyComponent\\n   */\\n\\n\\n  remove(cType) {\\n    this._world.remove(this._id, cType);\\n\\n    return this;\\n  }\\n  /**\\n   * Remove a tag from an entity\\n   */\\n\\n\\n  removeTag(tag) {\\n    if (this._world.entitiesByTags.has(tag)) {\\n      const entitySet = this._world.entitiesByTags.get(tag);\\n\\n      if (entitySet) {\\n        entitySet.delete(this._id);\\n\\n        if (entitySet.size === 0) {\\n          this._world.entitiesByTags.delete(tag);\\n        }\\n      }\\n    }\\n\\n    return this;\\n  }\\n  /** Clears all components from an Entity */\\n\\n\\n  clear() {\\n    this._world.clearEntityComponents(this._id);\\n\\n    return this;\\n  }\\n  /**\\n   * Remove all tags on an entity\\n   */\\n\\n\\n  clearTags() {\\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\\n      entitySet.delete(this._id);\\n\\n      if (entitySet.size === 0) {\\n        this._world.entitiesByTags.delete(tag);\\n      }\\n    }\\n\\n    return this;\\n  }\\n\\n  destroy() {\\n    this._world.destroyEntity(this._id);\\n  }\\n\\n  get id() {\\n    return this._id;\\n  }\\n\\n  get world() {\\n    return this._world;\\n  }\\n  /**\\n   * Get all components that have been added to an entity, via a ComponentCollection.\\n   * Does the same thing as entityInstance.getAll().\\n   */\\n\\n\\n  get components() {\\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\\n  }\\n  /**\\n   * Retrieves all the tags that have been added to this entity.\\n   */\\n\\n\\n  get tags() {\\n    const tags = new Set();\\n\\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\\n      if (entitySet.has(this._id)) {\\n        tags.add(tag);\\n      }\\n    }\\n\\n    return tags;\\n  }\\n\\n}\\nfunction createEntity(world) {\\n  const entity = new Entity_Entity(world);\\n  return entity;\\n}\\n// CONCATENATED MODULE: ./src/System.ts\\n\\n\\n\\n/**\\n * This is how you create a System.\\n * @example\\n * ```\\n * createSystem(world, [\\\'ComponentType\\\'], ({ entity }) => \\\'Do fun system things here.\\\')\\n * ```\\n */\\nfunction createSystem( // export function createSystem<CT extends CompTypes<CT>>(\\nworld, // cTypes: CT[],\\ncTypes, systemFunc) {\\n  const cNames = cTypes.map(ct => ct.name);\\n  world.registerSystem(cNames); // world.registerSystem(cTypes);\\n\\n  return () => {\\n    let index = 0;\\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\\n    // of where the ComponentCollection is, with the array of ComponentTypes\\n    // that are passes.\\n    // Might be nice in the future to go back to a ref check on cTypes, but\\n    // for now this doesn\\\'t seem to be that much of a perf hit.\\n    // for (const ct of world.entitiesByCTypes.keys()) {\\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\\n    //       const args: SystemFuncArgs<CT> = {\\n    //         entity: world.entities.get(eid),\\n    //         components: world.componentCollections.get(eid),\\n    //         world,\\n    //         index,\\n    //         size,\\n    //         isFirst: index === 0,\\n    //         isLast: index + 1 === size,\\n    //       }\\n    //       systemFunc(args);\\n    //       index += 1;\\n    //     }\\n    //   }\\n    // }\\n\\n    const cTypeArrs = world.entitiesByCTypes.get(cNames) || new Set();\\n\\n    for (const eid of cTypeArrs) {\\n      const args = {\\n        entity: world.entities.get(eid) || new Entity_Entity(world),\\n        components: world.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(),\\n        world,\\n        index,\\n        size,\\n        isFirst: index === 0,\\n        isLast: index + 1 === size\\n      };\\n      systemFunc(args);\\n      index += 1;\\n    }\\n  };\\n}\\n// CONCATENATED MODULE: ./src/World.ts\\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nclass World_World {\\n  constructor() {\\n    World_defineProperty(this, "componentCollections", new Map());\\n\\n    World_defineProperty(this, "entities", new Map());\\n\\n    World_defineProperty(this, "entitiesByCTypes", new Map());\\n\\n    World_defineProperty(this, "entitiesByTags", new Map());\\n\\n    World_defineProperty(this, "find", predicate => {\\n      for (const entity of this.entities.values()) {\\n        if (predicate(entity)) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "findAll", predicate => {\\n      const results = [];\\n\\n      for (const entity of this.entities.values()) {\\n        if (predicate(entity)) {\\n          results.push(entity);\\n        }\\n      }\\n\\n      return results;\\n    });\\n\\n    World_defineProperty(this, "locate", cl => {\\n      for (const entity of this.entities.values()) {\\n        // console.log("entity?", entity.components, cl.name);\\n        if (entity.components.has(cl)) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "locateAll", cl => {\\n      const results = [];\\n\\n      for (const entity of this.entities.values()) {\\n        if (entity.components.has(cl)) {\\n          results.push(entity);\\n        }\\n      }\\n\\n      return results;\\n    });\\n\\n    World_defineProperty(this, "grab", cl => {\\n      // const entity = this.locate((cl as unknown) as CT[keyof CT]);\\n      const entity = this.locate(cl);\\n\\n      if (entity) {\\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\\n        const component = cc.get(cl);\\n        return {\\n          entity,\\n          component\\n        };\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "grabBy", (cl, predicate) => {\\n      const entities = this.locateAll(cl);\\n\\n      for (const entity of entities) {\\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\\n        const component = cc.get(cl);\\n\\n        if (predicate(component)) {\\n          return {\\n            component,\\n            entity\\n          };\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "grabAll", cl => {\\n      const entities = this.locateAll(cl);\\n      return entities.map(entity => {\\n        return {\\n          entity,\\n          component: entity.components.get(cl)\\n        };\\n      });\\n    });\\n\\n    World_defineProperty(this, "get", (eid, cl) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\\n      return cc.get(cl);\\n    });\\n\\n    World_defineProperty(this, "getTagged", tag => {\\n      const tagEntityIds = this.entitiesByTags.get(tag);\\n\\n      if (tagEntityIds) {\\n        const entityId = tagEntityIds.values().next().value;\\n        const entity = this.entities.get(entityId);\\n\\n        if (entity) {\\n          return entity;\\n        }\\n      }\\n\\n      return null;\\n    });\\n\\n    World_defineProperty(this, "getAllTagged", tag => {\\n      let entities = []; // eslint-disable-line\\n\\n      const tagEntityIds = this.entitiesByTags.get(tag);\\n\\n      if (tagEntityIds) {\\n        for (const entityId of tagEntityIds) {\\n          const entity = this.entities.get(entityId);\\n\\n          if (entity) {\\n            entities.push(entity);\\n          }\\n        }\\n      }\\n\\n      return entities;\\n    });\\n\\n    World_defineProperty(this, "set", (eid, component) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\\n      cc.add(component);\\n      this.componentCollections.set(eid, cc);\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.hasByName)) {\\n          entitySet.add(eid);\\n        }\\n      }\\n\\n      return this;\\n    });\\n\\n    World_defineProperty(this, "remove", (eid, cType) => {\\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(); // remove entity from current entitiesByCTypes\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.hasByName)) {\\n          entitySet.delete(eid);\\n        }\\n      }\\n\\n      cc.remove(cType); // Move entityId to new CTypes if needed.\\n\\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\\n        if (ctArr.every(cc.hasByName)) {\\n          entitySet.add(eid);\\n        }\\n      }\\n\\n      return this;\\n    });\\n  }\\n\\n  /**\\n   * Internal method used in setting up a new system.\\n   */\\n  registerSystem(cNames) {\\n    this.entitiesByCTypes.set(cNames, new Set());\\n    return this;\\n  }\\n  /**\\n   * an alias for createSystem().\\n   */\\n\\n\\n  createSystem(cl, systemFunc) {\\n    const system = createSystem(this, cl, systemFunc);\\n    return system;\\n  }\\n\\n  registerEntity(entity) {\\n    const cc = new ComponentCollection_ComponentCollection();\\n    this.componentCollections.set(entity.id, cc);\\n    this.entities.set(entity.id, entity);\\n    return this;\\n  }\\n  /**\\n   * Remove all components that belong to an entity.\\n   */\\n\\n\\n  clearEntityComponents(eid) {\\n    this.componentCollections.set(eid, new ComponentCollection_ComponentCollection());\\n\\n    for (const entitySet of this.entitiesByCTypes.values()) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n    }\\n\\n    return this;\\n  }\\n  /**\\n   * Create an entity that is in the world.\\n   * Basically just new Entity(world), but saves an import of Entity.\\n   */\\n\\n\\n  createEntity() {\\n    const entity = new Entity_Entity(this);\\n    return entity;\\n  }\\n  /**\\n   * Destroys an entity.\\n   * Same as entity.destroy().\\n   */\\n\\n\\n  destroyEntity(eid) {\\n    this.componentCollections.delete(eid);\\n    this.entities.delete(eid);\\n\\n    for (const entitySet of this.entitiesByCTypes.values()) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n    } // remove any tag associations with destroyed entities.\\n\\n\\n    for (const [tag, entitySet] of this.entitiesByTags) {\\n      if (entitySet.has(eid)) {\\n        entitySet.delete(eid);\\n      }\\n\\n      if (entitySet.size === 0) {\\n        this.entitiesByTags.delete(tag);\\n      }\\n    }\\n\\n    return this;\\n  }\\n\\n}\\n// CONCATENATED MODULE: ./src/index.ts\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n\')}])}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval("/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kbmQtd2ViLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanM/YmNkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9vcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(V,U,Q){V.exports=Q(4)},function(module,exports){eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/components/index.ts\nvar src_components = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/@brochington/ecstatic/dist/bundle.js\nvar bundle = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/lodash/noop.js\nvar noop = __webpack_require__(1);\nvar noop_default = /*#__PURE__*/__webpack_require__.n(noop);\n\n// CONCATENATED MODULE: ./src/utils/elements.ts\n\nfunction getDNDContext(el) {\n  return el.closest("dnd-context");\n}\nfunction getWorld(el) {\n  const context = getDNDContext(el);\n  return context !== null ? context.world : world_world;\n}\nfunction getSystems(el) {\n  const context = getDNDContext(el);\n  return context !== null ? context.systems : world_systems;\n}\nfunction getContext(el) {\n  const context = getDNDContext(el);\n  return {\n    world: context !== null ? context.world : world_world,\n    systems: context !== null ? context.systems : world_systems\n  };\n}\n// CONCATENATED MODULE: ./src/components/interactions/DragInteraction.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass DragInteraction {\n  constructor(args) {\n    _defineProperty(this, "x", 0);\n\n    _defineProperty(this, "y", 0);\n\n    _defineProperty(this, "offsetX", 0);\n\n    _defineProperty(this, "offsetY", 0);\n\n    _defineProperty(this, "offsetLeft", 0);\n\n    _defineProperty(this, "offsetTop", 0);\n\n    _defineProperty(this, "clientX", 0);\n\n    _defineProperty(this, "clientY", 0);\n\n    _defineProperty(this, "initialRect", new DOMRect());\n\n    _defineProperty(this, "initialGhostRect", new DOMRect());\n\n    _defineProperty(this, "initialized", false);\n\n    this.x = args.x;\n    this.y = args.y;\n    this.offsetX = args.offsetX;\n    this.offsetY = args.offsetY;\n    this.offsetLeft = args.offsetLeft;\n    this.offsetTop = args.offsetTop;\n    this.clientX = args.clientX;\n    this.clientY = args.clientY;\n  }\n\n}\n\n/* harmony default export */ var interactions_DragInteraction = (DragInteraction);\n// CONCATENATED MODULE: ./src/dom-elements/DragContent.ts\nfunction DragContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nfunction getDraggingContent(el) {\n  const dndDrag = el.closest("dnd-drag");\n  if (!dndDrag) return null;\n  const draggingContent = dndDrag.querySelector(\'dragging-content\');\n  return draggingContent;\n}\n\nclass DragContent_DragContent extends HTMLElement {\n  constructor() {\n    super();\n\n    DragContent_defineProperty(this, "dropZone", null);\n\n    this.addEventListener("pointerdown", this.onPointerDown);\n  }\n\n  onPointerDown(evt) {\n    const {\n      world,\n      systems\n    } = getContext(this); // OffsetLeft and OffsetTop" are use to calculate the original top and left\n    // when a transform is applied. This is needed because getBoundingClientRect()\n    // includes this original number.\n\n    const computedStyles = getComputedStyle(this, null);\n    const {\n      transform: t\n    } = computedStyles;\n    let offsetLeft = this.offsetLeft;\n    let offsetTop = this.offsetTop;\n    const rect = this.getBoundingClientRect();\n\n    if (t !== "none") {\n      var _t$match;\n\n      const tParsed = (_t$match = t.match(/-?\\d+\\.?\\d*/g)) === null || _t$match === void 0 ? void 0 : _t$match.map(Number);\n\n      if (tParsed) {\n        offsetLeft = rect.left - tParsed[4];\n        offsetTop = rect.top - tParsed[5];\n      }\n    }\n\n    const draggingContent = getDraggingContent(this);\n    const elementComp = draggingContent || this;\n    world.createEntity().add(elementComp).add(new interactions_DragInteraction({\n      x: evt.x,\n      y: evt.y,\n      offsetLeft: offsetLeft,\n      offsetTop: offsetTop,\n      // offsetX and offsetY are the offset of where the mouse hits within the drag element.\n      // These CANNOT be determined by element.offsetX/offsetY because they don\'t include the\n      // border width.\n      // https://stackoverflow.com/questions/35360704/wrong-offsetx-and-offsety-on-mousedown-event-of-parent-element\n      offsetX: evt.clientX - rect.left,\n      offsetY: evt.clientY - rect.top,\n      clientX: evt.clientX,\n      clientY: evt.clientY\n    }));\n    systems.run();\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener("pointerdown", this.onPointerDown);\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DragContent = (DragContent_DragContent);\n// CONCATENATED MODULE: ./src/dom-elements/DropZone.ts\nfunction DropZone_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass DropZone_DropZone extends HTMLElement {\n  constructor() {\n    super();\n\n    DropZone_defineProperty(this, "entity", void 0);\n\n    DropZone_defineProperty(this, "items", void 0);\n\n    this.entity = getWorld(this).createEntity().add(this);\n    this.items = new Set();\n    const rect = this.getBoundingClientRect();\n    console.log(\'dropzone rect\', rect); // this.addEventListener(\'pointerover\', this.onPointerOver);\n  } // onPointerOver() {\n  //   console.log(\'over drop zone!\');\n  //   // const world = getWorld(this);\n  //   // const things = world.locateAll(DragInteraction);\n  //   // world.locateAll(DragInteraction).map((ent) => {\n  //   //   console.log(\'drag entity\', ent);\n  //   // });\n  // }\n\n\n  disconnectedCallback() {\n    this.entity.destroy(); // this.removeEventListener(\'mouseover\', this.onPointerOver);\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DropZone = (DropZone_DropZone);\n// CONCATENATED MODULE: ./src/utils/dropzone.ts\n\nfunction handleOverDZ(x, y, element, world) {\n  // Detect if over a dropzone by hiding the element currently dragged,\n  // then doing a test to see what the element below it is.\n  // element.hidden = true;\n  // Update! For now there is an issue with hiding the currently\n  // dragged element if a dropzone is below it in the DOM tree.\n  // hiding a transformed element doesn\'t maintain the spaceing, so\n  // there is a shift in the layer, which will move the dropzone\n  // and affect the below element detection. Using style.pointerEvents\n  // instead to let the dragged element be clicked through. \n  const originalPointerEventVal = element.style.pointerEvents;\n  element.style.pointerEvents = \'none\';\n  const elBelow = document.elementFromPoint(x, y);\n  element.style.pointerEvents = originalPointerEventVal; // element.hidden = false;\n\n  const dz = elBelow === null || elBelow === void 0 ? void 0 : elBelow.closest("drop-zone"); // can only be over one drop zone at a time\n\n  if (dz) {\n    dz.items.add(element);\n  } else {\n    // remove from all dropzones\n    world.grabAll(dom_elements_DropZone).map(({\n      component\n    }) => component.items.delete(element));\n  }\n}\n// CONCATENATED MODULE: ./src/utils/general.ts\nfunction placePoint(x, y) {\n  const el = document.createElement("div");\n  el.style.position = "absolute";\n  el.style.border = "solid red 1px";\n  el.style.width = "1px";\n  el.style.height = "1px";\n  el.style.left = `${x}px`;\n  el.style.top = `${y}px`;\n  document.body.appendChild(el);\n}\nfunction getParsedTransform(el) {\n  const computedStyles = getComputedStyle(el, null);\n  const {\n    transform: t\n  } = computedStyles;\n\n  if (t !== "none") {\n    var _t$match;\n\n    const tParsed = (_t$match = t.match(/-?\\d+\\.?\\d*/g)) === null || _t$match === void 0 ? void 0 : _t$match.map(Number);\n    return tParsed ? tParsed : null;\n  }\n\n  return null;\n}\n// CONCATENATED MODULE: ./src/systems/dragElement.ts\n\n\n\n\n\nfunction dragElement(args) {\n  const {\n    entity,\n    components\n  } = args;\n  const interaction = components.get(interactions_DragInteraction);\n  const dragContent = components.get(dom_elements_DragContent);\n  const dragContain = dragContent.closest("drag-contain");\n  const {\n    world,\n    systems\n  } = getContext(dragContent);\n  const {\n    x,\n    y,\n    offsetX,\n    offsetY,\n    offsetLeft,\n    offsetTop\n  } = interaction;\n\n  if (!interaction.initialized) {\n    const handleMove = evt => {\n      interaction.x = evt.x;\n      interaction.y = evt.y;\n      systems.run();\n    };\n\n    const handleUp = evt => {\n      document.removeEventListener("pointermove", handleMove);\n      document.removeEventListener("pointerup", handleUp);\n      const snapBack = dragContent.hasAttribute("snap-back");\n\n      if (snapBack) {\n        dragContent.style.transform = "none";\n        const rect = dragContent.getBoundingClientRect();\n        handleOverDZ(rect.x, rect.y, dragContent, world);\n      }\n\n      entity.remove(interactions_DragInteraction);\n      systems.run();\n    };\n\n    document.addEventListener("pointermove", handleMove);\n    document.addEventListener("pointerup", handleUp);\n    interaction.initialized = true;\n  }\n\n  const nextX = x - offsetX - offsetLeft;\n  const nextY = y - offsetY - offsetTop;\n  let transform = `translate(${nextX}px, ${nextY}px)`;\n\n  if (dragContain) {\n    const containRect = dragContain.getBoundingClientRect();\n    const contentRect = dragContent.getBoundingClientRect();\n    const t = getParsedTransform(dragContent);\n\n    if (t) {\n      let boundX = nextX;\n      let boundY = nextY;\n      const northConst = contentRect.top - t[5]; // constant\n\n      const eastConst = contentRect.right - t[4];\n      const southConst = contentRect.bottom - t[5];\n      const westConst = contentRect.left - t[4];\n      const a = containRect.top - nextY;\n      const b = containRect.bottom - nextY;\n      const c = containRect.right - nextX;\n      const d = containRect.left - nextX; // y axis\n\n      if (a > northConst) {\n        boundY = contentRect.top - northConst;\n      } else if (b < southConst) {\n        boundY = contentRect.bottom - southConst;\n      } // x axis\n\n\n      if (c < eastConst) {\n        boundX = contentRect.right - eastConst;\n      } else if (d > westConst) {\n        boundX = contentRect.left - westConst;\n      }\n\n      transform = `translate(${boundX}px, ${boundY}px)`;\n    }\n  }\n\n  dragContent.style.transform = transform;\n  handleOverDZ(x, y, dragContent, world);\n}\n// CONCATENATED MODULE: ./src/dom-elements/DraggingContent.ts\nclass DraggingContent extends HTMLElement {\n  constructor() {\n    super();\n    this.style.display = \'none\';\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DraggingContent = (DraggingContent);\n// CONCATENATED MODULE: ./src/systems/dragGhostElement.ts\n\n\n\n\nfunction dragGhostElement(args) {\n  const {\n    entity,\n    components\n  } = args;\n  const interaction = components.get(interactions_DragInteraction);\n  const draggingContent = components.get(dom_elements_DraggingContent);\n  const dndDrag = draggingContent.closest(\'dnd-drag\');\n  const dragContent = dndDrag === null || dndDrag === void 0 ? void 0 : dndDrag.querySelector(\'drag-content\');\n  if (!dragContent) return; // const systems = getSystems(dragContent);\n\n  const {\n    world,\n    systems\n  } = getContext(draggingContent);\n  const {\n    x,\n    y,\n    offsetX,\n    offsetY,\n    offsetLeft,\n    offsetTop\n  } = interaction;\n\n  if (!interaction.initialized) {\n    const handleMove = evt => {\n      interaction.x = evt.x;\n      interaction.y = evt.y;\n      systems.run();\n    };\n\n    const handleUp = evt => {\n      document.removeEventListener("pointermove", handleMove);\n      document.removeEventListener("pointerup", handleUp);\n      const maintainPosition = draggingContent.hasAttribute("maintain-position");\n\n      if (!maintainPosition) {\n        draggingContent.style.display = \'none\'; // might need to store the original transform on the element, in case\n        // it had one.\n\n        draggingContent.style.transform = \'initial\';\n        const rect = draggingContent.getBoundingClientRect();\n        handleOverDZ(rect.x, rect.y, draggingContent, world);\n      }\n\n      entity.remove(interactions_DragInteraction);\n      systems.run();\n    };\n\n    document.addEventListener("pointermove", handleMove);\n    document.addEventListener("pointerup", handleUp);\n    draggingContent.style.display = "inline-block";\n    const elRect = dragContent.getBoundingClientRect();\n    const ghostRect = draggingContent.getBoundingClientRect();\n    interaction.initialRect = elRect;\n    interaction.initialGhostRect = ghostRect;\n    interaction.initialized = true;\n  }\n\n  draggingContent.style.display = "inline-block";\n  const elRect = interaction.initialRect;\n  const dcRect = interaction.initialGhostRect;\n  const a = x - offsetX - offsetLeft;\n  const b = y - offsetY - offsetTop;\n  const transform = `translate(${elRect.x - dcRect.x + a}px, ${elRect.y - dcRect.y + b}px)`;\n  draggingContent.style.transform = transform;\n  handleOverDZ(x, y, draggingContent, world);\n}\n// CONCATENATED MODULE: ./src/systems/dragOverDropZone.ts\n\nfunction dragOverDropZone(args) {\n  const {\n    components\n  } = args;\n  const dz = components.get(dom_elements_DropZone);\n  const child = dz.querySelector(\'div\');\n\n  if (dz.items.size > 0) {\n    if (child) {\n      child.style.backgroundColor = "orange";\n    }\n  } else {\n    if (child) {\n      child.style.backgroundColor = "cyan";\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/dom-elements/DNDContext.ts\nfunction DNDContext_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n  This is the main provider of state for all the drag and drop components\n  within it. \n*/\n\n\n\n\nclass DNDContext_DNDContext extends HTMLElement {\n  constructor() {\n    super();\n\n    DNDContext_defineProperty(this, "overlordID", void 0);\n\n    DNDContext_defineProperty(this, "world", void 0);\n\n    DNDContext_defineProperty(this, "systems", void 0);\n\n    this.overlordID = esm_browser_v4();\n    this.world = new bundle["World"]();\n    this.systems = new src_systems(this.world);\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DNDContext = (DNDContext_DNDContext);\n// CONCATENATED MODULE: ./src/dom-elements/DNDDrag.ts\n// TODO: This will probably have a decent amount of attrs on it.\nclass DNDDrag extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DNDDrag = (DNDDrag);\n// CONCATENATED MODULE: ./src/systems/index.ts\nfunction systems_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n // import DragWrapper from \'dom-elements/DragWrapper\';\n\n\n\n\nconst totalAddAttemptsAllowed = 20;\n\nclass systems_Systems {\n  constructor(world) {\n    systems_defineProperty(this, "dragElement", noop_default.a);\n\n    systems_defineProperty(this, "dragGhostElement", noop_default.a);\n\n    systems_defineProperty(this, "dragOverDropZone", noop_default.a);\n\n    systems_defineProperty(this, "addAttempts", 0);\n\n    this.addSystems(world);\n  }\n\n  addSystems(world) {\n    const allComps = [dom_elements_DNDDrag, dom_elements_DragContent, dom_elements_DraggingContent, interactions_DragInteraction, dom_elements_DNDContext, dom_elements_DropZone];\n\n    if (allComps.every(c => !!c)) {\n      this.dragElement = world.createSystem([dom_elements_DragContent, interactions_DragInteraction], dragElement);\n      this.dragGhostElement = world.createSystem([dom_elements_DraggingContent, interactions_DragInteraction], dragGhostElement);\n      this.dragOverDropZone = world.createSystem([dom_elements_DropZone], dragOverDropZone);\n      return;\n    }\n\n    this.addAttempts += 1;\n\n    if (this.addAttempts < totalAddAttemptsAllowed) {\n      window.requestAnimationFrame(() => this.addSystems(world));\n    } else {\n      throw new Error("Unable to load Sytems");\n    }\n  }\n\n  run() {\n    this.dragElement();\n    this.dragGhostElement();\n    this.dragOverDropZone(); // run whatever systems here.\n  }\n\n}\n\n/* harmony default export */ var src_systems = (systems_Systems);\n// CONCATENATED MODULE: ./src/world.ts\n\n\nconst world_world = new bundle["World"]();\nconst world_systems = new src_systems(world_world);\n// CONCATENATED MODULE: ./src/dom-elements/DragContain.ts\nclass DragContain extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n}\n\n/* harmony default export */ var dom_elements_DragContain = (DragContain);\n// CONCATENATED MODULE: ./src/dom-elements/index.ts\n// Order here matters!\n\n\n\n\n // import \'./DraggingPlaceholder\';\n\n\n/*\n  It\'s important to define the custom elements in the order\n  that they are nested in the HTML.\n\n  Also, defining them in the same file that declares the Class of\n  the component leaves you at the mercy of import order, and can\n  lead to weird errors.\n*/\n\ncustomElements.define("dnd-context", dom_elements_DNDContext);\ncustomElements.define("dnd-drag", dom_elements_DNDDrag);\ncustomElements.define("drag-contain", dom_elements_DragContain);\ncustomElements.define("drag-content", dom_elements_DragContent);\ncustomElements.define("dragging-content", dom_elements_DraggingContent); // Drop related elements\n\ncustomElements.define("drop-zone", dom_elements_DropZone);\n// CONCATENATED MODULE: ./src/index.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')}])}));